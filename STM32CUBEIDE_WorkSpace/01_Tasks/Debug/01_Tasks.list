
01_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08005d8c  08005d8c  00015d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f08  08005f08  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f08  08005f08  00015f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f10  08005f10  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f10  08005f10  00015f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          0001455c  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200145cc  200145cc  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011ad9  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002cde  00000000  00000000  00031bbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011b0  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d87  00000000  00000000  00035a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024041  00000000  00000000  000367d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014e50  00000000  00000000  0005a818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7fe5  00000000  00000000  0006f668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000505c  00000000  00000000  00147650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b9  00000000  00000000  0014c6ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d74 	.word	0x08005d74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005d74 	.word	0x08005d74

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ea8 	.word	0x20012ea8
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <MX_GPIO_Init>:
     PC12   ------> I2S3_SD
     PB6   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08c      	sub	sp, #48	; 0x30
 8000610:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 031c 	add.w	r3, r7, #28
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000622:	2300      	movs	r3, #0
 8000624:	61bb      	str	r3, [r7, #24]
 8000626:	4ba2      	ldr	r3, [pc, #648]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	4aa1      	ldr	r2, [pc, #644]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6313      	str	r3, [r2, #48]	; 0x30
 8000632:	4b9f      	ldr	r3, [pc, #636]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	61bb      	str	r3, [r7, #24]
 800063c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
 8000642:	4b9b      	ldr	r3, [pc, #620]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a9a      	ldr	r2, [pc, #616]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b98      	ldr	r3, [pc, #608]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0304 	and.w	r3, r3, #4
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b94      	ldr	r3, [pc, #592]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	4a93      	ldr	r2, [pc, #588]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000668:	6313      	str	r3, [r2, #48]	; 0x30
 800066a:	4b91      	ldr	r3, [pc, #580]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b8d      	ldr	r3, [pc, #564]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	4a8c      	ldr	r2, [pc, #560]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	; 0x30
 8000686:	4b8a      	ldr	r3, [pc, #552]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b86      	ldr	r3, [pc, #536]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a85      	ldr	r2, [pc, #532]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 800069c:	f043 0302 	orr.w	r3, r3, #2
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b83      	ldr	r3, [pc, #524]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0302 	and.w	r3, r3, #2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b7f      	ldr	r3, [pc, #508]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a7e      	ldr	r2, [pc, #504]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 80006b8:	f043 0308 	orr.w	r3, r3, #8
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b7c      	ldr	r3, [pc, #496]	; (80008b0 <MX_GPIO_Init+0x2a4>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0308 	and.w	r3, r3, #8
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2108      	movs	r1, #8
 80006ce:	4879      	ldr	r0, [pc, #484]	; (80008b4 <MX_GPIO_Init+0x2a8>)
 80006d0:	f000 fdfe 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2101      	movs	r1, #1
 80006d8:	4877      	ldr	r0, [pc, #476]	; (80008b8 <MX_GPIO_Init+0x2ac>)
 80006da:	f000 fdf9 	bl	80012d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80006de:	2200      	movs	r2, #0
 80006e0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80006e4:	4875      	ldr	r0, [pc, #468]	; (80008bc <MX_GPIO_Init+0x2b0>)
 80006e6:	f000 fdf3 	bl	80012d0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006ea:	2308      	movs	r3, #8
 80006ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	2301      	movs	r3, #1
 80006f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	4619      	mov	r1, r3
 8000700:	486c      	ldr	r0, [pc, #432]	; (80008b4 <MX_GPIO_Init+0x2a8>)
 8000702:	f000 fc49 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000706:	2301      	movs	r3, #1
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 031c 	add.w	r3, r7, #28
 800071a:	4619      	mov	r1, r3
 800071c:	4866      	ldr	r0, [pc, #408]	; (80008b8 <MX_GPIO_Init+0x2ac>)
 800071e:	f000 fc3b 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000722:	2308      	movs	r3, #8
 8000724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000726:	2302      	movs	r3, #2
 8000728:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072a:	2300      	movs	r3, #0
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000732:	2305      	movs	r3, #5
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000736:	f107 031c 	add.w	r3, r7, #28
 800073a:	4619      	mov	r1, r3
 800073c:	485e      	ldr	r0, [pc, #376]	; (80008b8 <MX_GPIO_Init+0x2ac>)
 800073e:	f000 fc2b 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000742:	2301      	movs	r3, #1
 8000744:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800074a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	485a      	ldr	r0, [pc, #360]	; (80008c0 <MX_GPIO_Init+0x2b4>)
 8000758:	f000 fc1e 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800075c:	2310      	movs	r3, #16
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000760:	2302      	movs	r3, #2
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800076c:	2306      	movs	r3, #6
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4852      	ldr	r0, [pc, #328]	; (80008c0 <MX_GPIO_Init+0x2b4>)
 8000778:	f000 fc0e 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800077c:	23e0      	movs	r3, #224	; 0xe0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800078c:	2305      	movs	r3, #5
 800078e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000790:	f107 031c 	add.w	r3, r7, #28
 8000794:	4619      	mov	r1, r3
 8000796:	484a      	ldr	r0, [pc, #296]	; (80008c0 <MX_GPIO_Init+0x2b4>)
 8000798:	f000 fbfe 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800079c:	2304      	movs	r3, #4
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4619      	mov	r1, r3
 80007ae:	4845      	ldr	r0, [pc, #276]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 80007b0:	f000 fbf2 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007c6:	2305      	movs	r3, #5
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	483c      	ldr	r0, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 80007d2:	f000 fbe1 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007d6:	f24f 0310 	movw	r3, #61456	; 0xf010
 80007da:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4833      	ldr	r0, [pc, #204]	; (80008bc <MX_GPIO_Init+0x2b0>)
 80007f0:	f000 fbd2 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80007f4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fa:	2302      	movs	r3, #2
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000806:	2306      	movs	r3, #6
 8000808:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4829      	ldr	r0, [pc, #164]	; (80008b8 <MX_GPIO_Init+0x2ac>)
 8000812:	f000 fbc1 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000816:	f44f 7300 	mov.w	r3, #512	; 0x200
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	4825      	ldr	r0, [pc, #148]	; (80008c0 <MX_GPIO_Init+0x2b4>)
 800082c:	f000 fbb4 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000830:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000836:	2302      	movs	r3, #2
 8000838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083e:	2300      	movs	r3, #0
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000842:	230a      	movs	r3, #10
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	481c      	ldr	r0, [pc, #112]	; (80008c0 <MX_GPIO_Init+0x2b4>)
 800084e:	f000 fba3 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000852:	2320      	movs	r3, #32
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	4815      	ldr	r0, [pc, #84]	; (80008bc <MX_GPIO_Init+0x2b0>)
 8000866:	f000 fb97 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800086a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000870:	2312      	movs	r3, #18
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800087c:	2304      	movs	r3, #4
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	480f      	ldr	r0, [pc, #60]	; (80008c4 <MX_GPIO_Init+0x2b8>)
 8000888:	f000 fb86 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800088c:	2302      	movs	r3, #2
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000890:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_GPIO_Init+0x2a8>)
 80008a2:	f000 fb79 	bl	8000f98 <HAL_GPIO_Init>

}
 80008a6:	bf00      	nop
 80008a8:	3730      	adds	r7, #48	; 0x30
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40023800 	.word	0x40023800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40020800 	.word	0x40020800
 80008bc:	40020c00 	.word	0x40020c00
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020400 	.word	0x40020400

080008c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b088      	sub	sp, #32
 80008cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ce:	f000 fa3f 	bl	8000d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d2:	f000 f851 	bl	8000978 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d6:	f7ff fe99 	bl	800060c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /*Enable the Cycle Count Register in Cortext M4 Processor*/
  DWT_CTRL |= ( 1 << 0 );
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <main+0x94>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <main+0x94>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80008e6:	f002 fe25 	bl	8003534 <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80008ea:	f003 fd89 	bl	8004400 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate( TASK_tsk1Hdler, "Task - 1", 200, "Hello World from Task - 1", 2, &tsk1Hdl );
 80008ee:	f107 0308 	add.w	r3, r7, #8
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	2302      	movs	r3, #2
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	4b19      	ldr	r3, [pc, #100]	; (8000960 <main+0x98>)
 80008fa:	22c8      	movs	r2, #200	; 0xc8
 80008fc:	4919      	ldr	r1, [pc, #100]	; (8000964 <main+0x9c>)
 80008fe:	481a      	ldr	r0, [pc, #104]	; (8000968 <main+0xa0>)
 8000900:	f001 fcdf 	bl	80022c2 <xTaskCreate>
 8000904:	6178      	str	r0, [r7, #20]
  configASSERT( status == pdPASS );
 8000906:	697b      	ldr	r3, [r7, #20]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d00a      	beq.n	8000922 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800090c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000910:	f383 8811 	msr	BASEPRI, r3
 8000914:	f3bf 8f6f 	isb	sy
 8000918:	f3bf 8f4f 	dsb	sy
 800091c:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800091e:	bf00      	nop
 8000920:	e7fe      	b.n	8000920 <main+0x58>

  status = xTaskCreate( TASK_tsk2Hdler, "Task - 2", 200, "Hello World from Task - 2", 2, &tsk2Hdl );
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2302      	movs	r3, #2
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <main+0xa4>)
 800092c:	22c8      	movs	r2, #200	; 0xc8
 800092e:	4910      	ldr	r1, [pc, #64]	; (8000970 <main+0xa8>)
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <main+0xac>)
 8000932:	f001 fcc6 	bl	80022c2 <xTaskCreate>
 8000936:	6178      	str	r0, [r7, #20]
  configASSERT( status == pdPASS );
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00a      	beq.n	8000954 <main+0x8c>
        __asm volatile
 800093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000942:	f383 8811 	msr	BASEPRI, r3
 8000946:	f3bf 8f6f 	isb	sy
 800094a:	f3bf 8f4f 	dsb	sy
 800094e:	60fb      	str	r3, [r7, #12]
    }
 8000950:	bf00      	nop
 8000952:	e7fe      	b.n	8000952 <main+0x8a>

  /*Start the FreeRTOS Scheduler*/
  vTaskStartScheduler( );
 8000954:	f001 fe18 	bl	8002588 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000958:	e7fe      	b.n	8000958 <main+0x90>
 800095a:	bf00      	nop
 800095c:	e0001000 	.word	0xe0001000
 8000960:	08005d8c 	.word	0x08005d8c
 8000964:	08005da8 	.word	0x08005da8
 8000968:	08000a4d 	.word	0x08000a4d
 800096c:	08005db4 	.word	0x08005db4
 8000970:	08005dd0 	.word	0x08005dd0
 8000974:	08000a65 	.word	0x08000a65

08000978 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b094      	sub	sp, #80	; 0x50
 800097c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800097e:	f107 0320 	add.w	r3, r7, #32
 8000982:	2230      	movs	r2, #48	; 0x30
 8000984:	2100      	movs	r1, #0
 8000986:	4618      	mov	r0, r3
 8000988:	f004 fbcf 	bl	800512a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	4b28      	ldr	r3, [pc, #160]	; (8000a44 <SystemClock_Config+0xcc>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a27      	ldr	r2, [pc, #156]	; (8000a44 <SystemClock_Config+0xcc>)
 80009a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b25      	ldr	r3, [pc, #148]	; (8000a44 <SystemClock_Config+0xcc>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009b8:	2300      	movs	r3, #0
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <SystemClock_Config+0xd0>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a21      	ldr	r2, [pc, #132]	; (8000a48 <SystemClock_Config+0xd0>)
 80009c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <SystemClock_Config+0xd0>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d4:	2301      	movs	r3, #1
 80009d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e8:	2304      	movs	r3, #4
 80009ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009ec:	23a8      	movs	r3, #168	; 0xa8
 80009ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f0:	2302      	movs	r3, #2
 80009f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009f4:	2307      	movs	r3, #7
 80009f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f8:	f107 0320 	add.w	r3, r7, #32
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 fc81 	bl	8001304 <HAL_RCC_OscConfig>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a08:	f000 f84a 	bl	8000aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a10:	2302      	movs	r3, #2
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a1e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	2105      	movs	r1, #5
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fee2 	bl	80017f4 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a36:	f000 f833 	bl	8000aa0 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3750      	adds	r7, #80	; 0x50
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40007000 	.word	0x40007000

08000a4c <TASK_tsk1Hdler>:

/* USER CODE BEGIN 4 */

static void TASK_tsk1Hdler( void *params )
{ 
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /*Must be an infinte loop*/
  while( 1 )
  {
    printf( "%s \n", ( char *)params );
 8000a54:	6879      	ldr	r1, [r7, #4]
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <TASK_tsk1Hdler+0x14>)
 8000a58:	f004 fb02 	bl	8005060 <iprintf>
 8000a5c:	e7fa      	b.n	8000a54 <TASK_tsk1Hdler+0x8>
 8000a5e:	bf00      	nop
 8000a60:	08005ddc 	.word	0x08005ddc

08000a64 <TASK_tsk2Hdler>:
//    taskYIELD( );
  }
}

static void TASK_tsk2Hdler( void *params )
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /*Must be an infinte loop*/
  while( 1 )
  {
    printf( "%s \n", ( char *)params );
 8000a6c:	6879      	ldr	r1, [r7, #4]
 8000a6e:	4802      	ldr	r0, [pc, #8]	; (8000a78 <TASK_tsk2Hdler+0x14>)
 8000a70:	f004 faf6 	bl	8005060 <iprintf>
 8000a74:	e7fa      	b.n	8000a6c <TASK_tsk2Hdler+0x8>
 8000a76:	bf00      	nop
 8000a78:	08005ddc 	.word	0x08005ddc

08000a7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d101      	bne.n	8000a92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a8e:	f000 f981 	bl	8000d94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a92:	bf00      	nop
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40001000 	.word	0x40001000

08000aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa4:	b672      	cpsid	i
}
 8000aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <Error_Handler+0x8>
	...

08000aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	4a0f      	ldr	r2, [pc, #60]	; (8000af8 <HAL_MspInit+0x4c>)
 8000abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	603b      	str	r3, [r7, #0]
 8000ad2:	4b09      	ldr	r3, [pc, #36]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad6:	4a08      	ldr	r2, [pc, #32]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000adc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ade:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_MspInit+0x4c>)
 8000ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	603b      	str	r3, [r7, #0]
 8000ae8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue( );
 8000aea:	f002 f96d 	bl	8002dc8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40023800 	.word	0x40023800

08000afc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08e      	sub	sp, #56	; 0x38
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	4b33      	ldr	r3, [pc, #204]	; (8000be0 <HAL_InitTick+0xe4>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b14:	4a32      	ldr	r2, [pc, #200]	; (8000be0 <HAL_InitTick+0xe4>)
 8000b16:	f043 0310 	orr.w	r3, r3, #16
 8000b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b1c:	4b30      	ldr	r3, [pc, #192]	; (8000be0 <HAL_InitTick+0xe4>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	f003 0310 	and.w	r3, r3, #16
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b28:	f107 0210 	add.w	r2, r7, #16
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 f86a 	bl	8001c0c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b38:	6a3b      	ldr	r3, [r7, #32]
 8000b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d103      	bne.n	8000b4a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b42:	f001 f84f 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8000b46:	6378      	str	r0, [r7, #52]	; 0x34
 8000b48:	e004      	b.n	8000b54 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b4a:	f001 f84b 	bl	8001be4 <HAL_RCC_GetPCLK1Freq>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	005b      	lsls	r3, r3, #1
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b56:	4a23      	ldr	r2, [pc, #140]	; (8000be4 <HAL_InitTick+0xe8>)
 8000b58:	fba2 2303 	umull	r2, r3, r2, r3
 8000b5c:	0c9b      	lsrs	r3, r3, #18
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b62:	4b21      	ldr	r3, [pc, #132]	; (8000be8 <HAL_InitTick+0xec>)
 8000b64:	4a21      	ldr	r2, [pc, #132]	; (8000bec <HAL_InitTick+0xf0>)
 8000b66:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <HAL_InitTick+0xec>)
 8000b6a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b6e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b70:	4a1d      	ldr	r2, [pc, #116]	; (8000be8 <HAL_InitTick+0xec>)
 8000b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b74:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <HAL_InitTick+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <HAL_InitTick+0xec>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <HAL_InitTick+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <HAL_InitTick+0xec>)
 8000b8a:	f001 f871 	bl	8001c70 <HAL_TIM_Base_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d11b      	bne.n	8000bd4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b9c:	4812      	ldr	r0, [pc, #72]	; (8000be8 <HAL_InitTick+0xec>)
 8000b9e:	f001 f8c1 	bl	8001d24 <HAL_TIM_Base_Start_IT>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000ba8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d111      	bne.n	8000bd4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bb0:	2036      	movs	r0, #54	; 0x36
 8000bb2:	f000 f9e3 	bl	8000f7c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d808      	bhi.n	8000bce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2036      	movs	r0, #54	; 0x36
 8000bc2:	f000 f9bf 	bl	8000f44 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_InitTick+0xf4>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6013      	str	r3, [r2, #0]
 8000bcc:	e002      	b.n	8000bd4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3738      	adds	r7, #56	; 0x38
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	431bde83 	.word	0x431bde83
 8000be8:	2000008c 	.word	0x2000008c
 8000bec:	40001000 	.word	0x40001000
 8000bf0:	20000004 	.word	0x20000004

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c24:	4802      	ldr	r0, [pc, #8]	; (8000c30 <TIM6_DAC_IRQHandler+0x10>)
 8000c26:	f001 f8ed 	bl	8001e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000008c 	.word	0x2000008c

08000c34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
  }

  return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
  return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <SystemInit+0x20>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce2:	4a05      	ldr	r2, [pc, #20]	; (8000cf8 <SystemInit+0x20>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d00:	480d      	ldr	r0, [pc, #52]	; (8000d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d02:	490e      	ldr	r1, [pc, #56]	; (8000d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d04:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d08:	e002      	b.n	8000d10 <LoopCopyDataInit>

08000d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0e:	3304      	adds	r3, #4

08000d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d14:	d3f9      	bcc.n	8000d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d16:	4a0b      	ldr	r2, [pc, #44]	; (8000d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d18:	4c0b      	ldr	r4, [pc, #44]	; (8000d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d1c:	e001      	b.n	8000d22 <LoopFillZerobss>

08000d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d20:	3204      	adds	r2, #4

08000d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d24:	d3fb      	bcc.n	8000d1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d26:	f7ff ffd7 	bl	8000cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d2a:	f004 fa3b 	bl	80051a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d2e:	f7ff fdcb 	bl	80008c8 <main>
  bx  lr    
 8000d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d40:	08005f18 	.word	0x08005f18
  ldr r2, =_sbss
 8000d44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d48:	200145cc 	.word	0x200145cc

08000d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d4c:	e7fe      	b.n	8000d4c <ADC_IRQHandler>
	...

08000d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d54:	4b0e      	ldr	r3, [pc, #56]	; (8000d90 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0d      	ldr	r2, [pc, #52]	; (8000d90 <HAL_Init+0x40>)
 8000d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d60:	4b0b      	ldr	r3, [pc, #44]	; (8000d90 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_Init+0x40>)
 8000d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_Init+0x40>)
 8000d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f000 f8d8 	bl	8000f2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7e:	2000      	movs	r0, #0
 8000d80:	f7ff febc 	bl	8000afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d84:	f7ff fe92 	bl	8000aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d88:	2300      	movs	r3, #0
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023c00 	.word	0x40023c00

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_IncTick+0x24>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4413      	add	r3, r2
 8000da4:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <HAL_IncTick+0x24>)
 8000da6:	6013      	str	r3, [r2, #0]
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008
 8000db8:	200000d4 	.word	0x200000d4

08000dbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <HAL_GetTick+0x14>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	200000d4 	.word	0x200000d4

08000dd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000df0:	4013      	ands	r3, r2
 8000df2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df8:	68bb      	ldr	r3, [r7, #8]
 8000dfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e06:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <__NVIC_SetPriorityGrouping+0x44>)
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	60d3      	str	r3, [r2, #12]
}
 8000e0c:	bf00      	nop
 8000e0e:	3714      	adds	r7, #20
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e20:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <__NVIC_GetPriorityGrouping+0x18>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	0a1b      	lsrs	r3, r3, #8
 8000e26:	f003 0307 	and.w	r3, r3, #7
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	db0b      	blt.n	8000e62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	f003 021f 	and.w	r2, r3, #31
 8000e50:	4907      	ldr	r1, [pc, #28]	; (8000e70 <__NVIC_EnableIRQ+0x38>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	095b      	lsrs	r3, r3, #5
 8000e58:	2001      	movs	r0, #1
 8000e5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e62:	bf00      	nop
 8000e64:	370c      	adds	r7, #12
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	e000e100 	.word	0xe000e100

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff4c 	bl	8000dd4 <__NVIC_SetPriorityGrouping>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f56:	f7ff ff61 	bl	8000e1c <__NVIC_GetPriorityGrouping>
 8000f5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5c:	687a      	ldr	r2, [r7, #4]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	6978      	ldr	r0, [r7, #20]
 8000f62:	f7ff ffb1 	bl	8000ec8 <NVIC_EncodePriority>
 8000f66:	4602      	mov	r2, r0
 8000f68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6c:	4611      	mov	r1, r2
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff80 	bl	8000e74 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff54 	bl	8000e38 <__NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
 8000fb2:	e16b      	b.n	800128c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	697a      	ldr	r2, [r7, #20]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	f040 815a 	bne.w	8001286 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 0303 	and.w	r3, r3, #3
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d005      	beq.n	8000fea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d130      	bne.n	800104c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	2203      	movs	r2, #3
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4313      	orrs	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001020:	2201      	movs	r2, #1
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	4013      	ands	r3, r2
 800102e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	091b      	lsrs	r3, r3, #4
 8001036:	f003 0201 	and.w	r2, r3, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4313      	orrs	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 0303 	and.w	r3, r3, #3
 8001054:	2b03      	cmp	r3, #3
 8001056:	d017      	beq.n	8001088 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	005b      	lsls	r3, r3, #1
 8001062:	2203      	movs	r2, #3
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689a      	ldr	r2, [r3, #8]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4313      	orrs	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 0303 	and.w	r3, r3, #3
 8001090:	2b02      	cmp	r3, #2
 8001092:	d123      	bne.n	80010dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	08da      	lsrs	r2, r3, #3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3208      	adds	r2, #8
 800109c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	f003 0307 	and.w	r3, r3, #7
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	220f      	movs	r2, #15
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	691a      	ldr	r2, [r3, #16]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	08da      	lsrs	r2, r3, #3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3208      	adds	r2, #8
 80010d6:	69b9      	ldr	r1, [r7, #24]
 80010d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	fa02 f303 	lsl.w	r3, r2, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4313      	orrs	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001118:	2b00      	cmp	r3, #0
 800111a:	f000 80b4 	beq.w	8001286 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b60      	ldr	r3, [pc, #384]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a5f      	ldr	r2, [pc, #380]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 8001128:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b5d      	ldr	r3, [pc, #372]	; (80012a4 <HAL_GPIO_Init+0x30c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113a:	4a5b      	ldr	r2, [pc, #364]	; (80012a8 <HAL_GPIO_Init+0x310>)
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	220f      	movs	r2, #15
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43db      	mvns	r3, r3
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	4013      	ands	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a52      	ldr	r2, [pc, #328]	; (80012ac <HAL_GPIO_Init+0x314>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d02b      	beq.n	80011be <HAL_GPIO_Init+0x226>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a51      	ldr	r2, [pc, #324]	; (80012b0 <HAL_GPIO_Init+0x318>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d025      	beq.n	80011ba <HAL_GPIO_Init+0x222>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a50      	ldr	r2, [pc, #320]	; (80012b4 <HAL_GPIO_Init+0x31c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d01f      	beq.n	80011b6 <HAL_GPIO_Init+0x21e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4f      	ldr	r2, [pc, #316]	; (80012b8 <HAL_GPIO_Init+0x320>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d019      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4e      	ldr	r2, [pc, #312]	; (80012bc <HAL_GPIO_Init+0x324>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <HAL_GPIO_Init+0x216>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4d      	ldr	r2, [pc, #308]	; (80012c0 <HAL_GPIO_Init+0x328>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d00d      	beq.n	80011aa <HAL_GPIO_Init+0x212>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <HAL_GPIO_Init+0x32c>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d007      	beq.n	80011a6 <HAL_GPIO_Init+0x20e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4b      	ldr	r2, [pc, #300]	; (80012c8 <HAL_GPIO_Init+0x330>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d101      	bne.n	80011a2 <HAL_GPIO_Init+0x20a>
 800119e:	2307      	movs	r3, #7
 80011a0:	e00e      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a2:	2308      	movs	r3, #8
 80011a4:	e00c      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011a6:	2306      	movs	r3, #6
 80011a8:	e00a      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011aa:	2305      	movs	r3, #5
 80011ac:	e008      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ae:	2304      	movs	r3, #4
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b2:	2303      	movs	r3, #3
 80011b4:	e004      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011b6:	2302      	movs	r3, #2
 80011b8:	e002      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011ba:	2301      	movs	r3, #1
 80011bc:	e000      	b.n	80011c0 <HAL_GPIO_Init+0x228>
 80011be:	2300      	movs	r3, #0
 80011c0:	69fa      	ldr	r2, [r7, #28]
 80011c2:	f002 0203 	and.w	r2, r2, #3
 80011c6:	0092      	lsls	r2, r2, #2
 80011c8:	4093      	lsls	r3, r2
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011d0:	4935      	ldr	r1, [pc, #212]	; (80012a8 <HAL_GPIO_Init+0x310>)
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_GPIO_Init+0x334>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4013      	ands	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001202:	4a32      	ldr	r2, [pc, #200]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <HAL_GPIO_Init+0x334>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	43db      	mvns	r3, r3
 8001212:	69ba      	ldr	r2, [r7, #24]
 8001214:	4013      	ands	r3, r2
 8001216:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <HAL_GPIO_Init+0x334>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b26      	ldr	r3, [pc, #152]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_GPIO_Init+0x334>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	43db      	mvns	r3, r3
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4013      	ands	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	4313      	orrs	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001280:	4a12      	ldr	r2, [pc, #72]	; (80012cc <HAL_GPIO_Init+0x334>)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	3301      	adds	r3, #1
 800128a:	61fb      	str	r3, [r7, #28]
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0f      	cmp	r3, #15
 8001290:	f67f ae90 	bls.w	8000fb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001294:	bf00      	nop
 8001296:	bf00      	nop
 8001298:	3724      	adds	r7, #36	; 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40013800 	.word	0x40013800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40020400 	.word	0x40020400
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020c00 	.word	0x40020c00
 80012bc:	40021000 	.word	0x40021000
 80012c0:	40021400 	.word	0x40021400
 80012c4:	40021800 	.word	0x40021800
 80012c8:	40021c00 	.word	0x40021c00
 80012cc:	40013c00 	.word	0x40013c00

080012d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	460b      	mov	r3, r1
 80012da:	807b      	strh	r3, [r7, #2]
 80012dc:	4613      	mov	r3, r2
 80012de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e0:	787b      	ldrb	r3, [r7, #1]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012e6:	887a      	ldrh	r2, [r7, #2]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012ec:	e003      	b.n	80012f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ee:	887b      	ldrh	r3, [r7, #2]
 80012f0:	041a      	lsls	r2, r3, #16
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	619a      	str	r2, [r3, #24]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e267      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d075      	beq.n	800140e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001322:	4b88      	ldr	r3, [pc, #544]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b04      	cmp	r3, #4
 800132c:	d00c      	beq.n	8001348 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800132e:	4b85      	ldr	r3, [pc, #532]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001336:	2b08      	cmp	r3, #8
 8001338:	d112      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800133a:	4b82      	ldr	r3, [pc, #520]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001346:	d10b      	bne.n	8001360 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	4b7e      	ldr	r3, [pc, #504]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d05b      	beq.n	800140c <HAL_RCC_OscConfig+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d157      	bne.n	800140c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e242      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d106      	bne.n	8001378 <HAL_RCC_OscConfig+0x74>
 800136a:	4b76      	ldr	r3, [pc, #472]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a75      	ldr	r2, [pc, #468]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e01d      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001380:	d10c      	bne.n	800139c <HAL_RCC_OscConfig+0x98>
 8001382:	4b70      	ldr	r3, [pc, #448]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a6f      	ldr	r2, [pc, #444]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001388:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	4b6d      	ldr	r3, [pc, #436]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4a6c      	ldr	r2, [pc, #432]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001398:	6013      	str	r3, [r2, #0]
 800139a:	e00b      	b.n	80013b4 <HAL_RCC_OscConfig+0xb0>
 800139c:	4b69      	ldr	r3, [pc, #420]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a68      	ldr	r2, [pc, #416]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b66      	ldr	r3, [pc, #408]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a65      	ldr	r2, [pc, #404]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d013      	beq.n	80013e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013bc:	f7ff fcfe 	bl	8000dbc <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c4:	f7ff fcfa 	bl	8000dbc <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b64      	cmp	r3, #100	; 0x64
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e207      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b5b      	ldr	r3, [pc, #364]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d0f0      	beq.n	80013c4 <HAL_RCC_OscConfig+0xc0>
 80013e2:	e014      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e4:	f7ff fcea 	bl	8000dbc <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013ec:	f7ff fce6 	bl	8000dbc <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b64      	cmp	r3, #100	; 0x64
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e1f3      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	4b51      	ldr	r3, [pc, #324]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1f0      	bne.n	80013ec <HAL_RCC_OscConfig+0xe8>
 800140a:	e000      	b.n	800140e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d063      	beq.n	80014e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800141a:	4b4a      	ldr	r3, [pc, #296]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f003 030c 	and.w	r3, r3, #12
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00b      	beq.n	800143e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001426:	4b47      	ldr	r3, [pc, #284]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800142e:	2b08      	cmp	r3, #8
 8001430:	d11c      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d116      	bne.n	800146c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d005      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d001      	beq.n	8001456 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e1c7      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001456:	4b3b      	ldr	r3, [pc, #236]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4937      	ldr	r1, [pc, #220]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001466:	4313      	orrs	r3, r2
 8001468:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800146a:	e03a      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d020      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b34      	ldr	r3, [pc, #208]	; (8001548 <HAL_RCC_OscConfig+0x244>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800147a:	f7ff fc9f 	bl	8000dbc <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001482:	f7ff fc9b 	bl	8000dbc <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e1a8      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	4b2b      	ldr	r3, [pc, #172]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a0:	4b28      	ldr	r3, [pc, #160]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4925      	ldr	r1, [pc, #148]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	600b      	str	r3, [r1, #0]
 80014b4:	e015      	b.n	80014e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_RCC_OscConfig+0x244>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014bc:	f7ff fc7e 	bl	8000dbc <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014c4:	f7ff fc7a 	bl	8000dbc <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e187      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	4b1b      	ldr	r3, [pc, #108]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d036      	beq.n	800155c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d016      	beq.n	8001524 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <HAL_RCC_OscConfig+0x248>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014fc:	f7ff fc5e 	bl	8000dbc <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001504:	f7ff fc5a 	bl	8000dbc <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e167      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_RCC_OscConfig+0x240>)
 8001518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d0f0      	beq.n	8001504 <HAL_RCC_OscConfig+0x200>
 8001522:	e01b      	b.n	800155c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <HAL_RCC_OscConfig+0x248>)
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800152a:	f7ff fc47 	bl	8000dbc <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001530:	e00e      	b.n	8001550 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001532:	f7ff fc43 	bl	8000dbc <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d907      	bls.n	8001550 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	e150      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
 8001544:	40023800 	.word	0x40023800
 8001548:	42470000 	.word	0x42470000
 800154c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001550:	4b88      	ldr	r3, [pc, #544]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1ea      	bne.n	8001532 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0304 	and.w	r3, r3, #4
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 8097 	beq.w	8001698 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156e:	4b81      	ldr	r3, [pc, #516]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10f      	bne.n	800159a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	4b7d      	ldr	r3, [pc, #500]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	4a7c      	ldr	r2, [pc, #496]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001588:	6413      	str	r3, [r2, #64]	; 0x40
 800158a:	4b7a      	ldr	r3, [pc, #488]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800158c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001596:	2301      	movs	r3, #1
 8001598:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159a:	4b77      	ldr	r3, [pc, #476]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d118      	bne.n	80015d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a6:	4b74      	ldr	r3, [pc, #464]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a73      	ldr	r2, [pc, #460]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015b2:	f7ff fc03 	bl	8000dbc <HAL_GetTick>
 80015b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b8:	e008      	b.n	80015cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ba:	f7ff fbff 	bl	8000dbc <HAL_GetTick>
 80015be:	4602      	mov	r2, r0
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	1ad3      	subs	r3, r2, r3
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d901      	bls.n	80015cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015c8:	2303      	movs	r3, #3
 80015ca:	e10c      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015cc:	4b6a      	ldr	r3, [pc, #424]	; (8001778 <HAL_RCC_OscConfig+0x474>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0f0      	beq.n	80015ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d106      	bne.n	80015ee <HAL_RCC_OscConfig+0x2ea>
 80015e0:	4b64      	ldr	r3, [pc, #400]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015e4:	4a63      	ldr	r2, [pc, #396]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015e6:	f043 0301 	orr.w	r3, r3, #1
 80015ea:	6713      	str	r3, [r2, #112]	; 0x70
 80015ec:	e01c      	b.n	8001628 <HAL_RCC_OscConfig+0x324>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d10c      	bne.n	8001610 <HAL_RCC_OscConfig+0x30c>
 80015f6:	4b5f      	ldr	r3, [pc, #380]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015fa:	4a5e      	ldr	r2, [pc, #376]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	6713      	str	r3, [r2, #112]	; 0x70
 8001602:	4b5c      	ldr	r3, [pc, #368]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001606:	4a5b      	ldr	r2, [pc, #364]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6713      	str	r3, [r2, #112]	; 0x70
 800160e:	e00b      	b.n	8001628 <HAL_RCC_OscConfig+0x324>
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001614:	4a57      	ldr	r2, [pc, #348]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	; 0x70
 800161c:	4b55      	ldr	r3, [pc, #340]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001620:	4a54      	ldr	r2, [pc, #336]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d015      	beq.n	800165c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001630:	f7ff fbc4 	bl	8000dbc <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001636:	e00a      	b.n	800164e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001638:	f7ff fbc0 	bl	8000dbc <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	f241 3288 	movw	r2, #5000	; 0x1388
 8001646:	4293      	cmp	r3, r2
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e0cb      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164e:	4b49      	ldr	r3, [pc, #292]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d0ee      	beq.n	8001638 <HAL_RCC_OscConfig+0x334>
 800165a:	e014      	b.n	8001686 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7ff fbae 	bl	8000dbc <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001662:	e00a      	b.n	800167a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001664:	f7ff fbaa 	bl	8000dbc <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001672:	4293      	cmp	r3, r2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0b5      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167a:	4b3e      	ldr	r3, [pc, #248]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d1ee      	bne.n	8001664 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d105      	bne.n	8001698 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800168c:	4b39      	ldr	r3, [pc, #228]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800168e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001690:	4a38      	ldr	r2, [pc, #224]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001692:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001696:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a1 	beq.w	80017e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b08      	cmp	r3, #8
 80016ac:	d05c      	beq.n	8001768 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d141      	bne.n	800173a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b31      	ldr	r3, [pc, #196]	; (800177c <HAL_RCC_OscConfig+0x478>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff fb7e 	bl	8000dbc <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff fb7a 	bl	8000dbc <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e087      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016d6:	4b27      	ldr	r3, [pc, #156]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f0:	019b      	lsls	r3, r3, #6
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	3b01      	subs	r3, #1
 80016fc:	041b      	lsls	r3, r3, #16
 80016fe:	431a      	orrs	r2, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	061b      	lsls	r3, r3, #24
 8001706:	491b      	ldr	r1, [pc, #108]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <HAL_RCC_OscConfig+0x478>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001712:	f7ff fb53 	bl	8000dbc <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800171a:	f7ff fb4f 	bl	8000dbc <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e05c      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x416>
 8001738:	e054      	b.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_RCC_OscConfig+0x478>)
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001740:	f7ff fb3c 	bl	8000dbc <HAL_GetTick>
 8001744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001748:	f7ff fb38 	bl	8000dbc <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e045      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_RCC_OscConfig+0x470>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f0      	bne.n	8001748 <HAL_RCC_OscConfig+0x444>
 8001766:	e03d      	b.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d107      	bne.n	8001780 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e038      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000
 800177c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x4ec>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d028      	beq.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001798:	429a      	cmp	r2, r3
 800179a:	d121      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d11a      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80017b0:	4013      	ands	r3, r2
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d111      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c6:	085b      	lsrs	r3, r3, #1
 80017c8:	3b01      	subs	r3, #1
 80017ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d107      	bne.n	80017e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d101      	bne.n	8001808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e0cc      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d90c      	bls.n	8001830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b65      	ldr	r3, [pc, #404]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b63      	ldr	r3, [pc, #396]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e0b8      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001848:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	4a58      	ldr	r2, [pc, #352]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0308 	and.w	r3, r3, #8
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001860:	4b53      	ldr	r3, [pc, #332]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4a52      	ldr	r2, [pc, #328]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800186a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800186c:	4b50      	ldr	r3, [pc, #320]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	494d      	ldr	r1, [pc, #308]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	4313      	orrs	r3, r2
 800187c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d044      	beq.n	8001914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001892:	4b47      	ldr	r3, [pc, #284]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d119      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e07f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d003      	beq.n	80018b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018ae:	2b03      	cmp	r3, #3
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b2:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d109      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e06f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c2:	4b3b      	ldr	r3, [pc, #236]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e067      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f023 0203 	bic.w	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	4934      	ldr	r1, [pc, #208]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e4:	f7ff fa6a 	bl	8000dbc <HAL_GetTick>
 80018e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ea:	e00a      	b.n	8001902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ec:	f7ff fa66 	bl	8000dbc <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e04f      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f003 020c 	and.w	r2, r3, #12
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	429a      	cmp	r2, r3
 8001912:	d1eb      	bne.n	80018ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001914:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	429a      	cmp	r2, r3
 8001920:	d20c      	bcs.n	800193c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 8001924:	683a      	ldr	r2, [r7, #0]
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800192a:	4b20      	ldr	r3, [pc, #128]	; (80019ac <HAL_RCC_ClockConfig+0x1b8>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	d001      	beq.n	800193c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e032      	b.n	80019a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	d008      	beq.n	800195a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001948:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	4916      	ldr	r1, [pc, #88]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001956:	4313      	orrs	r3, r2
 8001958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	490e      	ldr	r1, [pc, #56]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001976:	4313      	orrs	r3, r2
 8001978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800197a:	f000 f821 	bl	80019c0 <HAL_RCC_GetSysClockFreq>
 800197e:	4602      	mov	r2, r0
 8001980:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	490a      	ldr	r1, [pc, #40]	; (80019b4 <HAL_RCC_ClockConfig+0x1c0>)
 800198c:	5ccb      	ldrb	r3, [r1, r3]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f8ae 	bl	8000afc <HAL_InitTick>

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00
 80019b0:	40023800 	.word	0x40023800
 80019b4:	08005ea8 	.word	0x08005ea8
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000004 	.word	0x20000004

080019c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019c4:	b094      	sub	sp, #80	; 0x50
 80019c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019c8:	2300      	movs	r3, #0
 80019ca:	647b      	str	r3, [r7, #68]	; 0x44
 80019cc:	2300      	movs	r3, #0
 80019ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019d0:	2300      	movs	r3, #0
 80019d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019d8:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 030c 	and.w	r3, r3, #12
 80019e0:	2b08      	cmp	r3, #8
 80019e2:	d00d      	beq.n	8001a00 <HAL_RCC_GetSysClockFreq+0x40>
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	f200 80e1 	bhi.w	8001bac <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <HAL_RCC_GetSysClockFreq+0x34>
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d003      	beq.n	80019fa <HAL_RCC_GetSysClockFreq+0x3a>
 80019f2:	e0db      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019f4:	4b73      	ldr	r3, [pc, #460]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 80019f6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019f8:	e0db      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019fa:	4b73      	ldr	r3, [pc, #460]	; (8001bc8 <HAL_RCC_GetSysClockFreq+0x208>)
 80019fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fe:	e0d8      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a16:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
 8001a2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a32:	4622      	mov	r2, r4
 8001a34:	462b      	mov	r3, r5
 8001a36:	f04f 0000 	mov.w	r0, #0
 8001a3a:	f04f 0100 	mov.w	r1, #0
 8001a3e:	0159      	lsls	r1, r3, #5
 8001a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a44:	0150      	lsls	r0, r2, #5
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4621      	mov	r1, r4
 8001a4c:	1a51      	subs	r1, r2, r1
 8001a4e:	6139      	str	r1, [r7, #16]
 8001a50:	4629      	mov	r1, r5
 8001a52:	eb63 0301 	sbc.w	r3, r3, r1
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a64:	4659      	mov	r1, fp
 8001a66:	018b      	lsls	r3, r1, #6
 8001a68:	4651      	mov	r1, sl
 8001a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a6e:	4651      	mov	r1, sl
 8001a70:	018a      	lsls	r2, r1, #6
 8001a72:	4651      	mov	r1, sl
 8001a74:	ebb2 0801 	subs.w	r8, r2, r1
 8001a78:	4659      	mov	r1, fp
 8001a7a:	eb63 0901 	sbc.w	r9, r3, r1
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a92:	4690      	mov	r8, r2
 8001a94:	4699      	mov	r9, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	eb18 0303 	adds.w	r3, r8, r3
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	462b      	mov	r3, r5
 8001aa0:	eb49 0303 	adc.w	r3, r9, r3
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	f04f 0200 	mov.w	r2, #0
 8001aaa:	f04f 0300 	mov.w	r3, #0
 8001aae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	024b      	lsls	r3, r1, #9
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001abc:	4621      	mov	r1, r4
 8001abe:	024a      	lsls	r2, r1, #9
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001acc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ad0:	f7fe fc1e 	bl	8000310 <__aeabi_uldivmod>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4613      	mov	r3, r2
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001adc:	e058      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ade:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	099b      	lsrs	r3, r3, #6
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	4611      	mov	r1, r2
 8001aea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001aee:	623b      	str	r3, [r7, #32]
 8001af0:	2300      	movs	r3, #0
 8001af2:	627b      	str	r3, [r7, #36]	; 0x24
 8001af4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001af8:	4642      	mov	r2, r8
 8001afa:	464b      	mov	r3, r9
 8001afc:	f04f 0000 	mov.w	r0, #0
 8001b00:	f04f 0100 	mov.w	r1, #0
 8001b04:	0159      	lsls	r1, r3, #5
 8001b06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b0a:	0150      	lsls	r0, r2, #5
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4641      	mov	r1, r8
 8001b12:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b16:	4649      	mov	r1, r9
 8001b18:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b30:	ebb2 040a 	subs.w	r4, r2, sl
 8001b34:	eb63 050b 	sbc.w	r5, r3, fp
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	f04f 0300 	mov.w	r3, #0
 8001b40:	00eb      	lsls	r3, r5, #3
 8001b42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b46:	00e2      	lsls	r2, r4, #3
 8001b48:	4614      	mov	r4, r2
 8001b4a:	461d      	mov	r5, r3
 8001b4c:	4643      	mov	r3, r8
 8001b4e:	18e3      	adds	r3, r4, r3
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	464b      	mov	r3, r9
 8001b54:	eb45 0303 	adc.w	r3, r5, r3
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	f04f 0200 	mov.w	r2, #0
 8001b5e:	f04f 0300 	mov.w	r3, #0
 8001b62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b66:	4629      	mov	r1, r5
 8001b68:	028b      	lsls	r3, r1, #10
 8001b6a:	4621      	mov	r1, r4
 8001b6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b70:	4621      	mov	r1, r4
 8001b72:	028a      	lsls	r2, r1, #10
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61bb      	str	r3, [r7, #24]
 8001b7e:	61fa      	str	r2, [r7, #28]
 8001b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b84:	f7fe fbc4 	bl	8000310 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0c1b      	lsrs	r3, r3, #16
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ba0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ba2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001baa:	e002      	b.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001bb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3750      	adds	r7, #80	; 0x50
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	00f42400 	.word	0x00f42400
 8001bc8:	007a1200 	.word	0x007a1200

08001bcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000000 	.word	0x20000000

08001be4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001be8:	f7ff fff0 	bl	8001bcc <HAL_RCC_GetHCLKFreq>
 8001bec:	4602      	mov	r2, r0
 8001bee:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	0a9b      	lsrs	r3, r3, #10
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	4903      	ldr	r1, [pc, #12]	; (8001c08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bfa:	5ccb      	ldrb	r3, [r1, r3]
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40023800 	.word	0x40023800
 8001c08:	08005eb8 	.word	0x08005eb8

08001c0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	220f      	movs	r2, #15
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0203 	and.w	r2, r3, #3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c40:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_GetClockConfig+0x5c>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	08db      	lsrs	r3, r3, #3
 8001c46:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <HAL_RCC_GetClockConfig+0x60>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0207 	and.w	r2, r3, #7
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	601a      	str	r2, [r3, #0]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40023c00 	.word	0x40023c00

08001c70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e041      	b.n	8001d06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d106      	bne.n	8001c9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f839 	bl	8001d0e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2202      	movs	r2, #2
 8001ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3304      	adds	r3, #4
 8001cac:	4619      	mov	r1, r3
 8001cae:	4610      	mov	r0, r2
 8001cb0:	f000 f9d8 	bl	8002064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
	...

08001d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d001      	beq.n	8001d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04e      	b.n	8001dda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f042 0201 	orr.w	r2, r2, #1
 8001d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d022      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d66:	d01d      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a1f      	ldr	r2, [pc, #124]	; (8001dec <HAL_TIM_Base_Start_IT+0xc8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d018      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a1e      	ldr	r2, [pc, #120]	; (8001df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d013      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a1c      	ldr	r2, [pc, #112]	; (8001df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00e      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d009      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d004      	beq.n	8001da4 <HAL_TIM_Base_Start_IT+0x80>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d111      	bne.n	8001dc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d010      	beq.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f042 0201 	orr.w	r2, r2, #1
 8001dc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc6:	e007      	b.n	8001dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0201 	orr.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010000 	.word	0x40010000
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40000800 	.word	0x40000800
 8001df4:	40000c00 	.word	0x40000c00
 8001df8:	40010400 	.word	0x40010400
 8001dfc:	40014000 	.word	0x40014000
 8001e00:	40001800 	.word	0x40001800

08001e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d122      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d11b      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0202 	mvn.w	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8ee 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8e0 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8f1 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d122      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b04      	cmp	r3, #4
 8001e7a:	d11b      	bne.n	8001eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0204 	mvn.w	r2, #4
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	699b      	ldr	r3, [r3, #24]
 8001e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f8c4 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f8b6 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f8c7 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d122      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f003 0308 	and.w	r3, r3, #8
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d11b      	bne.n	8001f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f06f 0208 	mvn.w	r2, #8
 8001ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2204      	movs	r2, #4
 8001ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f89a 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e005      	b.n	8001f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f88c 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f000 f89d 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b10      	cmp	r3, #16
 8001f14:	d122      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	2b10      	cmp	r3, #16
 8001f22:	d11b      	bne.n	8001f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f06f 0210 	mvn.w	r2, #16
 8001f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2208      	movs	r2, #8
 8001f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f870 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001f48:	e005      	b.n	8001f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f000 f862 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 f873 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d10e      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d107      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f06f 0201 	mvn.w	r2, #1
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7fe fd7a 	bl	8000a7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b80      	cmp	r3, #128	; 0x80
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fa0:	2b80      	cmp	r3, #128	; 0x80
 8001fa2:	d107      	bne.n	8001fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f902 	bl	80021b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fbe:	2b40      	cmp	r3, #64	; 0x40
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fcc:	2b40      	cmp	r3, #64	; 0x40
 8001fce:	d107      	bne.n	8001fe0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f838 	bl	8002050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	2b20      	cmp	r3, #32
 8001fec:	d10e      	bne.n	800200c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b20      	cmp	r3, #32
 8001ffa:	d107      	bne.n	800200c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0220 	mvn.w	r2, #32
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8cc 	bl	80021a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a40      	ldr	r2, [pc, #256]	; (8002178 <TIM_Base_SetConfig+0x114>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002082:	d00f      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a3d      	ldr	r2, [pc, #244]	; (800217c <TIM_Base_SetConfig+0x118>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a3c      	ldr	r2, [pc, #240]	; (8002180 <TIM_Base_SetConfig+0x11c>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a3b      	ldr	r2, [pc, #236]	; (8002184 <TIM_Base_SetConfig+0x120>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a3a      	ldr	r2, [pc, #232]	; (8002188 <TIM_Base_SetConfig+0x124>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d108      	bne.n	80020b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2f      	ldr	r2, [pc, #188]	; (8002178 <TIM_Base_SetConfig+0x114>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020c4:	d027      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2c      	ldr	r2, [pc, #176]	; (800217c <TIM_Base_SetConfig+0x118>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d023      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <TIM_Base_SetConfig+0x11c>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a2a      	ldr	r2, [pc, #168]	; (8002184 <TIM_Base_SetConfig+0x120>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a29      	ldr	r2, [pc, #164]	; (8002188 <TIM_Base_SetConfig+0x124>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d017      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a28      	ldr	r2, [pc, #160]	; (800218c <TIM_Base_SetConfig+0x128>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a27      	ldr	r2, [pc, #156]	; (8002190 <TIM_Base_SetConfig+0x12c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a26      	ldr	r2, [pc, #152]	; (8002194 <TIM_Base_SetConfig+0x130>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a25      	ldr	r2, [pc, #148]	; (8002198 <TIM_Base_SetConfig+0x134>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a24      	ldr	r2, [pc, #144]	; (800219c <TIM_Base_SetConfig+0x138>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <TIM_Base_SetConfig+0x13c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a0a      	ldr	r2, [pc, #40]	; (8002178 <TIM_Base_SetConfig+0x114>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0xf8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <TIM_Base_SetConfig+0x124>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]
}
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	40010000 	.word	0x40010000
 800217c:	40000400 	.word	0x40000400
 8002180:	40000800 	.word	0x40000800
 8002184:	40000c00 	.word	0x40000c00
 8002188:	40010400 	.word	0x40010400
 800218c:	40014000 	.word	0x40014000
 8002190:	40014400 	.word	0x40014400
 8002194:	40014800 	.word	0x40014800
 8002198:	40001800 	.word	0x40001800
 800219c:	40001c00 	.word	0x40001c00
 80021a0:	40002000 	.word	0x40002000

080021a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f103 0208 	add.w	r2, r3, #8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f04f 32ff 	mov.w	r2, #4294967295
 80021e4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f103 0208 	add.w	r2, r3, #8
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f103 0208 	add.w	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002226:	b480      	push	{r7}
 8002228:	b085      	sub	sp, #20
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr

0800226e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6892      	ldr	r2, [r2, #8]
 8002284:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	6852      	ldr	r2, [r2, #4]
 800228e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	d103      	bne.n	80022a2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1e5a      	subs	r2, r3, #1
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08c      	sub	sp, #48	; 0x30
 80022c6:	af04      	add	r7, sp, #16
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 ff20 	bl	800311c <pvPortMalloc>
 80022dc:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00e      	beq.n	8002302 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80022e4:	2058      	movs	r0, #88	; 0x58
 80022e6:	f000 ff19 	bl	800311c <pvPortMalloc>
 80022ea:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80022ec:	69fb      	ldr	r3, [r7, #28]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d003      	beq.n	80022fa <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	631a      	str	r2, [r3, #48]	; 0x30
 80022f8:	e005      	b.n	8002306 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80022fa:	6978      	ldr	r0, [r7, #20]
 80022fc:	f000 ffee 	bl	80032dc <vPortFree>
 8002300:	e001      	b.n	8002306 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d013      	beq.n	8002334 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800230c:	88fa      	ldrh	r2, [r7, #6]
 800230e:	2300      	movs	r3, #0
 8002310:	9303      	str	r3, [sp, #12]
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	9302      	str	r3, [sp, #8]
 8002316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f80e 	bl	8002344 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002328:	69f8      	ldr	r0, [r7, #28]
 800232a:	f000 f8a1 	bl	8002470 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800232e:	2301      	movs	r3, #1
 8002330:	61bb      	str	r3, [r7, #24]
 8002332:	e002      	b.n	800233a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002334:	f04f 33ff 	mov.w	r3, #4294967295
 8002338:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800233a:	69bb      	ldr	r3, [r7, #24]
    }
 800233c:	4618      	mov	r0, r3
 800233e:	3720      	adds	r7, #32
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b088      	sub	sp, #32
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002354:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	461a      	mov	r2, r3
 800235c:	21a5      	movs	r1, #165	; 0xa5
 800235e:	f002 fee4 	bl	800512a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800236c:	3b01      	subs	r3, #1
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	f023 0307 	bic.w	r3, r3, #7
 800237a:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800237c:	69bb      	ldr	r3, [r7, #24]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	617b      	str	r3, [r7, #20]
    }
 8002398:	bf00      	nop
 800239a:	e7fe      	b.n	800239a <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d01f      	beq.n	80023e2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
 80023a6:	e012      	b.n	80023ce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	7819      	ldrb	r1, [r3, #0]
 80023b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	4413      	add	r3, r2
 80023b6:	3334      	adds	r3, #52	; 0x34
 80023b8:	460a      	mov	r2, r1
 80023ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d006      	beq.n	80023d6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	2b09      	cmp	r3, #9
 80023d2:	d9e9      	bls.n	80023a8 <prvInitialiseNewTask+0x64>
 80023d4:	e000      	b.n	80023d8 <prvInitialiseNewTask+0x94>
            {
                break;
 80023d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80023d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80023e0:	e003      	b.n	80023ea <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80023ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d901      	bls.n	80023f4 <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80023f0:	2304      	movs	r3, #4
 80023f2:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80023f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80023fe:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002402:	2200      	movs	r2, #0
 8002404:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002408:	3304      	adds	r3, #4
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff fefe 	bl	800220c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002412:	3318      	adds	r3, #24
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fef9 	bl	800220c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800241a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800241c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002422:	f1c3 0205 	rsb	r2, r3, #5
 8002426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002428:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800242a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800242e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002432:	3350      	adds	r3, #80	; 0x50
 8002434:	2204      	movs	r2, #4
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f002 fe76 	bl	800512a <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800243e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002440:	3354      	adds	r3, #84	; 0x54
 8002442:	2201      	movs	r2, #1
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f002 fe6f 	bl	800512a <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	68f9      	ldr	r1, [r7, #12]
 8002450:	69b8      	ldr	r0, [r7, #24]
 8002452:	f000 fb8d 	bl	8002b70 <pxPortInitialiseStack>
 8002456:	4602      	mov	r2, r0
 8002458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800245a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800245c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002466:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002468:	bf00      	nop
 800246a:	3720      	adds	r7, #32
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002470:	b5b0      	push	{r4, r5, r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af02      	add	r7, sp, #8
 8002476:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002478:	f000 fd24 	bl	8002ec4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800247c:	4b3b      	ldr	r3, [pc, #236]	; (800256c <prvAddNewTaskToReadyList+0xfc>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	4a3a      	ldr	r2, [pc, #232]	; (800256c <prvAddNewTaskToReadyList+0xfc>)
 8002484:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002486:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <prvAddNewTaskToReadyList+0x100>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d109      	bne.n	80024a2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800248e:	4a38      	ldr	r2, [pc, #224]	; (8002570 <prvAddNewTaskToReadyList+0x100>)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <prvAddNewTaskToReadyList+0xfc>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d110      	bne.n	80024be <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800249c:	f000 face 	bl	8002a3c <prvInitialiseTaskLists>
 80024a0:	e00d      	b.n	80024be <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80024a2:	4b34      	ldr	r3, [pc, #208]	; (8002574 <prvAddNewTaskToReadyList+0x104>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024aa:	4b31      	ldr	r3, [pc, #196]	; (8002570 <prvAddNewTaskToReadyList+0x100>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d802      	bhi.n	80024be <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80024b8:	4a2d      	ldr	r2, [pc, #180]	; (8002570 <prvAddNewTaskToReadyList+0x100>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80024be:	4b2e      	ldr	r3, [pc, #184]	; (8002578 <prvAddNewTaskToReadyList+0x108>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <prvAddNewTaskToReadyList+0x108>)
 80024c6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024c8:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <prvAddNewTaskToReadyList+0x108>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d016      	beq.n	8002504 <prvAddNewTaskToReadyList+0x94>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4618      	mov	r0, r3
 80024da:	f002 faef 	bl	8004abc <SEGGER_SYSVIEW_OnTaskCreate>
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	461d      	mov	r5, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461c      	mov	r4, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	1ae3      	subs	r3, r4, r3
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	462b      	mov	r3, r5
 8002500:	f001 f8ba 	bl	8003678 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f002 fb5c 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	2201      	movs	r2, #1
 8002512:	409a      	lsls	r2, r3
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <prvAddNewTaskToReadyList+0x10c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4313      	orrs	r3, r2
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <prvAddNewTaskToReadyList+0x10c>)
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002522:	4613      	mov	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <prvAddNewTaskToReadyList+0x110>)
 800252c:	441a      	add	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	4619      	mov	r1, r3
 8002534:	4610      	mov	r0, r2
 8002536:	f7ff fe76 	bl	8002226 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800253a:	f000 fcf3 	bl	8002f24 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800253e:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <prvAddNewTaskToReadyList+0x104>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002546:	4b0a      	ldr	r3, [pc, #40]	; (8002570 <prvAddNewTaskToReadyList+0x100>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002550:	429a      	cmp	r2, r3
 8002552:	d207      	bcs.n	8002564 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002554:	4b0b      	ldr	r3, [pc, #44]	; (8002584 <prvAddNewTaskToReadyList+0x114>)
 8002556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	f3bf 8f4f 	dsb	sy
 8002560:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bdb0      	pop	{r4, r5, r7, pc}
 800256c:	200001b0 	.word	0x200001b0
 8002570:	200000d8 	.word	0x200000d8
 8002574:	200001bc 	.word	0x200001bc
 8002578:	200001cc 	.word	0x200001cc
 800257c:	200001b8 	.word	0x200001b8
 8002580:	200000dc 	.word	0x200000dc
 8002584:	e000ed04 	.word	0xe000ed04

08002588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800258e:	4b24      	ldr	r3, [pc, #144]	; (8002620 <vTaskStartScheduler+0x98>)
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	2300      	movs	r3, #0
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	2300      	movs	r3, #0
 8002598:	2282      	movs	r2, #130	; 0x82
 800259a:	4922      	ldr	r1, [pc, #136]	; (8002624 <vTaskStartScheduler+0x9c>)
 800259c:	4822      	ldr	r0, [pc, #136]	; (8002628 <vTaskStartScheduler+0xa0>)
 800259e:	f7ff fe90 	bl	80022c2 <xTaskCreate>
 80025a2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d124      	bne.n	80025f4 <vTaskStartScheduler+0x6c>
        __asm volatile
 80025aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	60bb      	str	r3, [r7, #8]
    }
 80025bc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80025be:	4b1b      	ldr	r3, [pc, #108]	; (800262c <vTaskStartScheduler+0xa4>)
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295
 80025c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <vTaskStartScheduler+0xa8>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <vTaskStartScheduler+0xac>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80025d2:	4b19      	ldr	r3, [pc, #100]	; (8002638 <vTaskStartScheduler+0xb0>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <vTaskStartScheduler+0x98>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d102      	bne.n	80025e4 <vTaskStartScheduler+0x5c>
 80025de:	f002 fa51 	bl	8004a84 <SEGGER_SYSVIEW_OnIdle>
 80025e2:	e004      	b.n	80025ee <vTaskStartScheduler+0x66>
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <vTaskStartScheduler+0xb0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 faa9 	bl	8004b40 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80025ee:	f000 fb49 	bl	8002c84 <xPortStartScheduler>
 80025f2:	e00e      	b.n	8002612 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025fa:	d10a      	bne.n	8002612 <vTaskStartScheduler+0x8a>
        __asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	607b      	str	r3, [r7, #4]
    }
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002612:	4b0a      	ldr	r3, [pc, #40]	; (800263c <vTaskStartScheduler+0xb4>)
 8002614:	681b      	ldr	r3, [r3, #0]
}
 8002616:	bf00      	nop
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200001d4 	.word	0x200001d4
 8002624:	08005de4 	.word	0x08005de4
 8002628:	08002a0d 	.word	0x08002a0d
 800262c:	200001d0 	.word	0x200001d0
 8002630:	200001bc 	.word	0x200001bc
 8002634:	200001b4 	.word	0x200001b4
 8002638:	200000d8 	.word	0x200000d8
 800263c:	2000000c 	.word	0x2000000c

08002640 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002644:	4b04      	ldr	r3, [pc, #16]	; (8002658 <vTaskSuspendAll+0x18>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	4a03      	ldr	r2, [pc, #12]	; (8002658 <vTaskSuspendAll+0x18>)
 800264c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	200001d8 	.word	0x200001d8

0800265c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002662:	2300      	movs	r3, #0
 8002664:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <xTaskResumeAll+0x11c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10a      	bne.n	8002688 <xTaskResumeAll+0x2c>
        __asm volatile
 8002672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002676:	f383 8811 	msr	BASEPRI, r3
 800267a:	f3bf 8f6f 	isb	sy
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	603b      	str	r3, [r7, #0]
    }
 8002684:	bf00      	nop
 8002686:	e7fe      	b.n	8002686 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002688:	f000 fc1c 	bl	8002ec4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <xTaskResumeAll+0x11c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	3b01      	subs	r3, #1
 8002692:	4a39      	ldr	r2, [pc, #228]	; (8002778 <xTaskResumeAll+0x11c>)
 8002694:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002696:	4b38      	ldr	r3, [pc, #224]	; (8002778 <xTaskResumeAll+0x11c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d165      	bne.n	800276a <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <xTaskResumeAll+0x120>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d061      	beq.n	800276a <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80026a6:	e032      	b.n	800270e <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026a8:	4b35      	ldr	r3, [pc, #212]	; (8002780 <xTaskResumeAll+0x124>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	3318      	adds	r3, #24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fdda 	bl	800226e <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	3304      	adds	r3, #4
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fdd5 	bl	800226e <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f002 fa7c 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026d0:	2201      	movs	r2, #1
 80026d2:	409a      	lsls	r2, r3
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <xTaskResumeAll+0x128>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4313      	orrs	r3, r2
 80026da:	4a2a      	ldr	r2, [pc, #168]	; (8002784 <xTaskResumeAll+0x128>)
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <xTaskResumeAll+0x12c>)
 80026ec:	441a      	add	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f7ff fd96 	bl	8002226 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <xTaskResumeAll+0x130>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	429a      	cmp	r2, r3
 8002706:	d302      	bcc.n	800270e <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8002708:	4b21      	ldr	r3, [pc, #132]	; (8002790 <xTaskResumeAll+0x134>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800270e:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <xTaskResumeAll+0x124>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1c8      	bne.n	80026a8 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800271c:	f000 fa0c 	bl	8002b38 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <xTaskResumeAll+0x138>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d010      	beq.n	800274e <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800272c:	f000 f848 	bl	80027c0 <xTaskIncrementTick>
 8002730:	4603      	mov	r3, r0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d002      	beq.n	800273c <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8002736:	4b16      	ldr	r3, [pc, #88]	; (8002790 <xTaskResumeAll+0x134>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3b01      	subs	r3, #1
 8002740:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f1      	bne.n	800272c <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8002748:	4b12      	ldr	r3, [pc, #72]	; (8002794 <xTaskResumeAll+0x138>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800274e:	4b10      	ldr	r3, [pc, #64]	; (8002790 <xTaskResumeAll+0x134>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002756:	2301      	movs	r3, #1
 8002758:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800275a:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <xTaskResumeAll+0x13c>)
 800275c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	f3bf 8f4f 	dsb	sy
 8002766:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800276a:	f000 fbdb 	bl	8002f24 <vPortExitCritical>

    return xAlreadyYielded;
 800276e:	68bb      	ldr	r3, [r7, #8]
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	200001d8 	.word	0x200001d8
 800277c:	200001b0 	.word	0x200001b0
 8002780:	20000170 	.word	0x20000170
 8002784:	200001b8 	.word	0x200001b8
 8002788:	200000dc 	.word	0x200000dc
 800278c:	200000d8 	.word	0x200000d8
 8002790:	200001c4 	.word	0x200001c4
 8002794:	200001c0 	.word	0x200001c0
 8002798:	e000ed04 	.word	0xe000ed04

0800279c <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80027a2:	f000 fc7b 	bl	800309c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80027a6:	2300      	movs	r3, #0
 80027a8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <xTaskGetTickCountFromISR+0x20>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80027b0:	683b      	ldr	r3, [r7, #0]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3708      	adds	r7, #8
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200001b4 	.word	0x200001b4

080027c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80027c6:	2300      	movs	r3, #0
 80027c8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80027ca:	4b50      	ldr	r3, [pc, #320]	; (800290c <xTaskIncrementTick+0x14c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 8092 	bne.w	80028f8 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80027d4:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <xTaskIncrementTick+0x150>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80027dc:	4a4c      	ldr	r2, [pc, #304]	; (8002910 <xTaskIncrementTick+0x150>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d120      	bne.n	800282a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <xTaskIncrementTick+0x154>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00a      	beq.n	8002808 <xTaskIncrementTick+0x48>
        __asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	603b      	str	r3, [r7, #0]
    }
 8002804:	bf00      	nop
 8002806:	e7fe      	b.n	8002806 <xTaskIncrementTick+0x46>
 8002808:	4b42      	ldr	r3, [pc, #264]	; (8002914 <xTaskIncrementTick+0x154>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	4b42      	ldr	r3, [pc, #264]	; (8002918 <xTaskIncrementTick+0x158>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a40      	ldr	r2, [pc, #256]	; (8002914 <xTaskIncrementTick+0x154>)
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	4a40      	ldr	r2, [pc, #256]	; (8002918 <xTaskIncrementTick+0x158>)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6013      	str	r3, [r2, #0]
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <xTaskIncrementTick+0x15c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	3301      	adds	r3, #1
 8002822:	4a3e      	ldr	r2, [pc, #248]	; (800291c <xTaskIncrementTick+0x15c>)
 8002824:	6013      	str	r3, [r2, #0]
 8002826:	f000 f987 	bl	8002b38 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800282a:	4b3d      	ldr	r3, [pc, #244]	; (8002920 <xTaskIncrementTick+0x160>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	429a      	cmp	r2, r3
 8002832:	d34c      	bcc.n	80028ce <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002834:	4b37      	ldr	r3, [pc, #220]	; (8002914 <xTaskIncrementTick+0x154>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d104      	bne.n	8002848 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <xTaskIncrementTick+0x160>)
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	601a      	str	r2, [r3, #0]
                    break;
 8002846:	e042      	b.n	80028ce <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <xTaskIncrementTick+0x154>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	429a      	cmp	r2, r3
 800285e:	d203      	bcs.n	8002868 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002860:	4a2f      	ldr	r2, [pc, #188]	; (8002920 <xTaskIncrementTick+0x160>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002866:	e032      	b.n	80028ce <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	3304      	adds	r3, #4
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff fcfe 	bl	800226e <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002876:	2b00      	cmp	r3, #0
 8002878:	d004      	beq.n	8002884 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	3318      	adds	r3, #24
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fcf5 	bl	800226e <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4618      	mov	r0, r3
 8002888:	f002 f99c 	bl	8004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002890:	2201      	movs	r2, #1
 8002892:	409a      	lsls	r2, r3
 8002894:	4b23      	ldr	r3, [pc, #140]	; (8002924 <xTaskIncrementTick+0x164>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	4a22      	ldr	r2, [pc, #136]	; (8002924 <xTaskIncrementTick+0x164>)
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4a1f      	ldr	r2, [pc, #124]	; (8002928 <xTaskIncrementTick+0x168>)
 80028ac:	441a      	add	r2, r3
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7ff fcb6 	bl	8002226 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028be:	4b1b      	ldr	r3, [pc, #108]	; (800292c <xTaskIncrementTick+0x16c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3b5      	bcc.n	8002834 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 80028c8:	2301      	movs	r3, #1
 80028ca:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028cc:	e7b2      	b.n	8002834 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028ce:	4b17      	ldr	r3, [pc, #92]	; (800292c <xTaskIncrementTick+0x16c>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	4914      	ldr	r1, [pc, #80]	; (8002928 <xTaskIncrementTick+0x168>)
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	440b      	add	r3, r1
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d901      	bls.n	80028ea <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80028ea:	4b11      	ldr	r3, [pc, #68]	; (8002930 <xTaskIncrementTick+0x170>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d007      	beq.n	8002902 <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80028f2:	2301      	movs	r3, #1
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	e004      	b.n	8002902 <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <xTaskIncrementTick+0x174>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a0d      	ldr	r2, [pc, #52]	; (8002934 <xTaskIncrementTick+0x174>)
 8002900:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002902:	697b      	ldr	r3, [r7, #20]
}
 8002904:	4618      	mov	r0, r3
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	200001d8 	.word	0x200001d8
 8002910:	200001b4 	.word	0x200001b4
 8002914:	20000168 	.word	0x20000168
 8002918:	2000016c 	.word	0x2000016c
 800291c:	200001c8 	.word	0x200001c8
 8002920:	200001d0 	.word	0x200001d0
 8002924:	200001b8 	.word	0x200001b8
 8002928:	200000dc 	.word	0x200000dc
 800292c:	200000d8 	.word	0x200000d8
 8002930:	200001c4 	.word	0x200001c4
 8002934:	200001c0 	.word	0x200001c0

08002938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b086      	sub	sp, #24
 800293c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <vTaskSwitchContext+0xbc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002946:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <vTaskSwitchContext+0xc0>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800294c:	e04d      	b.n	80029ea <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800294e:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <vTaskSwitchContext+0xc0>)
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002954:	4b29      	ldr	r3, [pc, #164]	; (80029fc <vTaskSwitchContext+0xc4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	fab3 f383 	clz	r3, r3
 8002960:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002962:	7afb      	ldrb	r3, [r7, #11]
 8002964:	f1c3 031f 	rsb	r3, r3, #31
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <vTaskSwitchContext+0xc8>)
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d10a      	bne.n	8002994 <vTaskSwitchContext+0x5c>
        __asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	607b      	str	r3, [r7, #4]
    }
 8002990:	bf00      	nop
 8002992:	e7fe      	b.n	8002992 <vTaskSwitchContext+0x5a>
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	4a18      	ldr	r2, [pc, #96]	; (8002a00 <vTaskSwitchContext+0xc8>)
 80029a0:	4413      	add	r3, r2
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	3308      	adds	r3, #8
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d104      	bne.n	80029c4 <vTaskSwitchContext+0x8c>
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	605a      	str	r2, [r3, #4]
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <vTaskSwitchContext+0xcc>)
 80029cc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80029ce:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <vTaskSwitchContext+0xcc>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <vTaskSwitchContext+0xd0>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d102      	bne.n	80029e0 <vTaskSwitchContext+0xa8>
 80029da:	f002 f853 	bl	8004a84 <SEGGER_SYSVIEW_OnIdle>
}
 80029de:	e004      	b.n	80029ea <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <vTaskSwitchContext+0xcc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f002 f8ab 	bl	8004b40 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	200001d8 	.word	0x200001d8
 80029f8:	200001c4 	.word	0x200001c4
 80029fc:	200001b8 	.word	0x200001b8
 8002a00:	200000dc 	.word	0x200000dc
 8002a04:	200000d8 	.word	0x200000d8
 8002a08:	200001d4 	.word	0x200001d4

08002a0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002a14:	f000 f852 	bl	8002abc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <prvIdleTask+0x28>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d9f9      	bls.n	8002a14 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <prvIdleTask+0x2c>)
 8002a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	f3bf 8f4f 	dsb	sy
 8002a2c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002a30:	e7f0      	b.n	8002a14 <prvIdleTask+0x8>
 8002a32:	bf00      	nop
 8002a34:	200000dc 	.word	0x200000dc
 8002a38:	e000ed04 	.word	0xe000ed04

08002a3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a42:	2300      	movs	r3, #0
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	e00c      	b.n	8002a62 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	009b      	lsls	r3, r3, #2
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <prvInitialiseTaskLists+0x60>)
 8002a54:	4413      	add	r3, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fbb8 	bl	80021cc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	607b      	str	r3, [r7, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d9ef      	bls.n	8002a48 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002a68:	480d      	ldr	r0, [pc, #52]	; (8002aa0 <prvInitialiseTaskLists+0x64>)
 8002a6a:	f7ff fbaf 	bl	80021cc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002a6e:	480d      	ldr	r0, [pc, #52]	; (8002aa4 <prvInitialiseTaskLists+0x68>)
 8002a70:	f7ff fbac 	bl	80021cc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002a74:	480c      	ldr	r0, [pc, #48]	; (8002aa8 <prvInitialiseTaskLists+0x6c>)
 8002a76:	f7ff fba9 	bl	80021cc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002a7a:	480c      	ldr	r0, [pc, #48]	; (8002aac <prvInitialiseTaskLists+0x70>)
 8002a7c:	f7ff fba6 	bl	80021cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002a80:	480b      	ldr	r0, [pc, #44]	; (8002ab0 <prvInitialiseTaskLists+0x74>)
 8002a82:	f7ff fba3 	bl	80021cc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <prvInitialiseTaskLists+0x78>)
 8002a88:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <prvInitialiseTaskLists+0x64>)
 8002a8a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <prvInitialiseTaskLists+0x7c>)
 8002a8e:	4a05      	ldr	r2, [pc, #20]	; (8002aa4 <prvInitialiseTaskLists+0x68>)
 8002a90:	601a      	str	r2, [r3, #0]
}
 8002a92:	bf00      	nop
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200000dc 	.word	0x200000dc
 8002aa0:	20000140 	.word	0x20000140
 8002aa4:	20000154 	.word	0x20000154
 8002aa8:	20000170 	.word	0x20000170
 8002aac:	20000184 	.word	0x20000184
 8002ab0:	2000019c 	.word	0x2000019c
 8002ab4:	20000168 	.word	0x20000168
 8002ab8:	2000016c 	.word	0x2000016c

08002abc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ac2:	e019      	b.n	8002af8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ac4:	f000 f9fe 	bl	8002ec4 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <prvCheckTasksWaitingTermination+0x50>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fbca 	bl	800226e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <prvCheckTasksWaitingTermination+0x54>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	4a0b      	ldr	r2, [pc, #44]	; (8002b10 <prvCheckTasksWaitingTermination+0x54>)
 8002ae2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	; (8002b14 <prvCheckTasksWaitingTermination+0x58>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	4a0a      	ldr	r2, [pc, #40]	; (8002b14 <prvCheckTasksWaitingTermination+0x58>)
 8002aec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002aee:	f000 fa19 	bl	8002f24 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f810 	bl	8002b18 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <prvCheckTasksWaitingTermination+0x58>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1e1      	bne.n	8002ac4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	20000184 	.word	0x20000184
 8002b10:	200001b0 	.word	0x200001b0
 8002b14:	20000198 	.word	0x20000198

08002b18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 fbd9 	bl	80032dc <vPortFree>
                vPortFree( pxTCB );
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 fbd6 	bl	80032dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002b30:	bf00      	nop
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <prvResetNextTaskUnblockTime+0x30>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <prvResetNextTaskUnblockTime+0x34>)
 8002b48:	f04f 32ff 	mov.w	r2, #4294967295
 8002b4c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002b4e:	e005      	b.n	8002b5c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <prvResetNextTaskUnblockTime+0x30>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a04      	ldr	r2, [pc, #16]	; (8002b6c <prvResetNextTaskUnblockTime+0x34>)
 8002b5a:	6013      	str	r3, [r2, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	20000168 	.word	0x20000168
 8002b6c:	200001d0 	.word	0x200001d0

08002b70 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b88:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	3b04      	subs	r3, #4
 8002b8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	f023 0201 	bic.w	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	3b04      	subs	r3, #4
 8002b9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002ba0:	4a0c      	ldr	r2, [pc, #48]	; (8002bd4 <pxPortInitialiseStack+0x64>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3b14      	subs	r3, #20
 8002baa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	3b04      	subs	r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f06f 0202 	mvn.w	r2, #2
 8002bbe:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	3b20      	subs	r3, #32
 8002bc4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	08002bd9 	.word	0x08002bd9

08002bd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <prvTaskExitError+0x54>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bea:	d00a      	beq.n	8002c02 <prvTaskExitError+0x2a>
        __asm volatile
 8002bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf0:	f383 8811 	msr	BASEPRI, r3
 8002bf4:	f3bf 8f6f 	isb	sy
 8002bf8:	f3bf 8f4f 	dsb	sy
 8002bfc:	60fb      	str	r3, [r7, #12]
    }
 8002bfe:	bf00      	nop
 8002c00:	e7fe      	b.n	8002c00 <prvTaskExitError+0x28>
        __asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	60bb      	str	r3, [r7, #8]
    }
 8002c14:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002c16:	bf00      	nop
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0fc      	beq.n	8002c18 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	20000010 	.word	0x20000010

08002c30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002c30:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <pxCurrentTCBConst2>)
 8002c32:	6819      	ldr	r1, [r3, #0]
 8002c34:	6808      	ldr	r0, [r1, #0]
 8002c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c3a:	f380 8809 	msr	PSP, r0
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f04f 0000 	mov.w	r0, #0
 8002c46:	f380 8811 	msr	BASEPRI, r0
 8002c4a:	4770      	bx	lr
 8002c4c:	f3af 8000 	nop.w

08002c50 <pxCurrentTCBConst2>:
 8002c50:	200000d8 	.word	0x200000d8
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop

08002c58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002c58:	4808      	ldr	r0, [pc, #32]	; (8002c7c <prvPortStartFirstTask+0x24>)
 8002c5a:	6800      	ldr	r0, [r0, #0]
 8002c5c:	6800      	ldr	r0, [r0, #0]
 8002c5e:	f380 8808 	msr	MSP, r0
 8002c62:	f04f 0000 	mov.w	r0, #0
 8002c66:	f380 8814 	msr	CONTROL, r0
 8002c6a:	b662      	cpsie	i
 8002c6c:	b661      	cpsie	f
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	df00      	svc	0
 8002c78:	bf00      	nop
 8002c7a:	0000      	.short	0x0000
 8002c7c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop

08002c84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <xPortStartScheduler+0x120>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <xPortStartScheduler+0x124>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d10a      	bne.n	8002caa <xPortStartScheduler+0x26>
        __asm volatile
 8002c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c98:	f383 8811 	msr	BASEPRI, r3
 8002c9c:	f3bf 8f6f 	isb	sy
 8002ca0:	f3bf 8f4f 	dsb	sy
 8002ca4:	613b      	str	r3, [r7, #16]
    }
 8002ca6:	bf00      	nop
 8002ca8:	e7fe      	b.n	8002ca8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002caa:	4b3e      	ldr	r3, [pc, #248]	; (8002da4 <xPortStartScheduler+0x120>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a3f      	ldr	r2, [pc, #252]	; (8002dac <xPortStartScheduler+0x128>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d10a      	bne.n	8002cca <xPortStartScheduler+0x46>
        __asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	60fb      	str	r3, [r7, #12]
    }
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002cca:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <xPortStartScheduler+0x12c>)
 8002ccc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	22ff      	movs	r2, #255	; 0xff
 8002cda:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	4b31      	ldr	r3, [pc, #196]	; (8002db4 <xPortStartScheduler+0x130>)
 8002cf0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002cf2:	4b31      	ldr	r3, [pc, #196]	; (8002db8 <xPortStartScheduler+0x134>)
 8002cf4:	2207      	movs	r2, #7
 8002cf6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002cf8:	e009      	b.n	8002d0e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002cfa:	4b2f      	ldr	r3, [pc, #188]	; (8002db8 <xPortStartScheduler+0x134>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	4a2d      	ldr	r2, [pc, #180]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d02:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002d04:	78fb      	ldrb	r3, [r7, #3]
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d16:	2b80      	cmp	r3, #128	; 0x80
 8002d18:	d0ef      	beq.n	8002cfa <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002d1a:	4b27      	ldr	r3, [pc, #156]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d00a      	beq.n	8002d3c <xPortStartScheduler+0xb8>
        __asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	60bb      	str	r3, [r7, #8]
    }
 8002d38:	bf00      	nop
 8002d3a:	e7fe      	b.n	8002d3a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002d3c:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d44:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002d46:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d4e:	4a1a      	ldr	r2, [pc, #104]	; (8002db8 <xPortStartScheduler+0x134>)
 8002d50:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d64:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a14      	ldr	r2, [pc, #80]	; (8002dbc <xPortStartScheduler+0x138>)
 8002d6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002d70:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002d72:	f000 f963 	bl	800303c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <xPortStartScheduler+0x13c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002d7c:	f000 f982 	bl	8003084 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002d80:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <xPortStartScheduler+0x140>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0f      	ldr	r2, [pc, #60]	; (8002dc4 <xPortStartScheduler+0x140>)
 8002d86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002d8a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002d8c:	f7ff ff64 	bl	8002c58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002d90:	f7ff fdd2 	bl	8002938 <vTaskSwitchContext>
    prvTaskExitError();
 8002d94:	f7ff ff20 	bl	8002bd8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3718      	adds	r7, #24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	e000ed00 	.word	0xe000ed00
 8002da8:	410fc271 	.word	0x410fc271
 8002dac:	410fc270 	.word	0x410fc270
 8002db0:	e000e400 	.word	0xe000e400
 8002db4:	200001dc 	.word	0x200001dc
 8002db8:	200001e0 	.word	0x200001e0
 8002dbc:	e000ed20 	.word	0xe000ed20
 8002dc0:	20000010 	.word	0x20000010
 8002dc4:	e000ef34 	.word	0xe000ef34

08002dc8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002dce:	4b37      	ldr	r3, [pc, #220]	; (8002eac <vInitPrioGroupValue+0xe4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a37      	ldr	r2, [pc, #220]	; (8002eb0 <vInitPrioGroupValue+0xe8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10a      	bne.n	8002dee <vInitPrioGroupValue+0x26>
        __asm volatile
 8002dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ddc:	f383 8811 	msr	BASEPRI, r3
 8002de0:	f3bf 8f6f 	isb	sy
 8002de4:	f3bf 8f4f 	dsb	sy
 8002de8:	613b      	str	r3, [r7, #16]
    }
 8002dea:	bf00      	nop
 8002dec:	e7fe      	b.n	8002dec <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002dee:	4b2f      	ldr	r3, [pc, #188]	; (8002eac <vInitPrioGroupValue+0xe4>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a30      	ldr	r2, [pc, #192]	; (8002eb4 <vInitPrioGroupValue+0xec>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d10a      	bne.n	8002e0e <vInitPrioGroupValue+0x46>
        __asm volatile
 8002df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dfc:	f383 8811 	msr	BASEPRI, r3
 8002e00:	f3bf 8f6f 	isb	sy
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	60fb      	str	r3, [r7, #12]
    }
 8002e0a:	bf00      	nop
 8002e0c:	e7fe      	b.n	8002e0c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e0e:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <vInitPrioGroupValue+0xf0>)
 8002e10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	4b22      	ldr	r3, [pc, #136]	; (8002ebc <vInitPrioGroupValue+0xf4>)
 8002e34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e3c:	e009      	b.n	8002e52 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e3e:	4b20      	ldr	r3, [pc, #128]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	4a1e      	ldr	r2, [pc, #120]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e52:	78fb      	ldrb	r3, [r7, #3]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e5a:	2b80      	cmp	r3, #128	; 0x80
 8002e5c:	d0ef      	beq.n	8002e3e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e5e:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f1c3 0307 	rsb	r3, r3, #7
 8002e66:	2b04      	cmp	r3, #4
 8002e68:	d00a      	beq.n	8002e80 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8002e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6e:	f383 8811 	msr	BASEPRI, r3
 8002e72:	f3bf 8f6f 	isb	sy
 8002e76:	f3bf 8f4f 	dsb	sy
 8002e7a:	60bb      	str	r3, [r7, #8]
    }
 8002e7c:	bf00      	nop
 8002e7e:	e7fe      	b.n	8002e7e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	4a0e      	ldr	r2, [pc, #56]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e88:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e92:	4a0b      	ldr	r2, [pc, #44]	; (8002ec0 <vInitPrioGroupValue+0xf8>)
 8002e94:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000ed00 	.word	0xe000ed00
 8002eb0:	410fc271 	.word	0x410fc271
 8002eb4:	410fc270 	.word	0x410fc270
 8002eb8:	e000e400 	.word	0xe000e400
 8002ebc:	200001dc 	.word	0x200001dc
 8002ec0:	200001e0 	.word	0x200001e0

08002ec4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
        __asm volatile
 8002eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ece:	f383 8811 	msr	BASEPRI, r3
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	f3bf 8f4f 	dsb	sy
 8002eda:	607b      	str	r3, [r7, #4]
    }
 8002edc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002ede:	4b0f      	ldr	r3, [pc, #60]	; (8002f1c <vPortEnterCritical+0x58>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <vPortEnterCritical+0x58>)
 8002ee6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002ee8:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <vPortEnterCritical+0x58>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10f      	bne.n	8002f10 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <vPortEnterCritical+0x5c>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <vPortEnterCritical+0x4c>
        __asm volatile
 8002efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002efe:	f383 8811 	msr	BASEPRI, r3
 8002f02:	f3bf 8f6f 	isb	sy
 8002f06:	f3bf 8f4f 	dsb	sy
 8002f0a:	603b      	str	r3, [r7, #0]
    }
 8002f0c:	bf00      	nop
 8002f0e:	e7fe      	b.n	8002f0e <vPortEnterCritical+0x4a>
    }
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	20000010 	.word	0x20000010
 8002f20:	e000ed04 	.word	0xe000ed04

08002f24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <vPortExitCritical+0x50>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10a      	bne.n	8002f48 <vPortExitCritical+0x24>
        __asm volatile
 8002f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f36:	f383 8811 	msr	BASEPRI, r3
 8002f3a:	f3bf 8f6f 	isb	sy
 8002f3e:	f3bf 8f4f 	dsb	sy
 8002f42:	607b      	str	r3, [r7, #4]
    }
 8002f44:	bf00      	nop
 8002f46:	e7fe      	b.n	8002f46 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <vPortExitCritical+0x50>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <vPortExitCritical+0x50>)
 8002f50:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002f52:	4b08      	ldr	r3, [pc, #32]	; (8002f74 <vPortExitCritical+0x50>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d105      	bne.n	8002f66 <vPortExitCritical+0x42>
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f64:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f66:	bf00      	nop
 8002f68:	370c      	adds	r7, #12
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	20000010 	.word	0x20000010
	...

08002f80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f80:	f3ef 8009 	mrs	r0, PSP
 8002f84:	f3bf 8f6f 	isb	sy
 8002f88:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <pxCurrentTCBConst>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	f01e 0f10 	tst.w	lr, #16
 8002f90:	bf08      	it	eq
 8002f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f9a:	6010      	str	r0, [r2, #0]
 8002f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002fa4:	f380 8811 	msr	BASEPRI, r0
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f7ff fcc2 	bl	8002938 <vTaskSwitchContext>
 8002fb4:	f04f 0000 	mov.w	r0, #0
 8002fb8:	f380 8811 	msr	BASEPRI, r0
 8002fbc:	bc09      	pop	{r0, r3}
 8002fbe:	6819      	ldr	r1, [r3, #0]
 8002fc0:	6808      	ldr	r0, [r1, #0]
 8002fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fc6:	f01e 0f10 	tst.w	lr, #16
 8002fca:	bf08      	it	eq
 8002fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002fd0:	f380 8809 	msr	PSP, r0
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	f3af 8000 	nop.w

08002fe0 <pxCurrentTCBConst>:
 8002fe0:	200000d8 	.word	0x200000d8
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop

08002fe8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	607b      	str	r3, [r7, #4]
    }
 8003000:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003002:	f001 fcc5 	bl	8004990 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003006:	f7ff fbdb 	bl	80027c0 <xTaskIncrementTick>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003010:	f001 fd1c 	bl	8004a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <SysTick_Handler+0x50>)
 8003016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	e001      	b.n	8003022 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800301e:	f001 fcf9 	bl	8004a14 <SEGGER_SYSVIEW_RecordExitISR>
 8003022:	2300      	movs	r3, #0
 8003024:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	f383 8811 	msr	BASEPRI, r3
    }
 800302c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800302e:	bf00      	nop
 8003030:	3708      	adds	r7, #8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003040:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <vPortSetupTimerInterrupt+0x34>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <vPortSetupTimerInterrupt+0x38>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <vPortSetupTimerInterrupt+0x3c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0a      	ldr	r2, [pc, #40]	; (800307c <vPortSetupTimerInterrupt+0x40>)
 8003052:	fba2 2303 	umull	r2, r3, r2, r3
 8003056:	099b      	lsrs	r3, r3, #6
 8003058:	4a09      	ldr	r2, [pc, #36]	; (8003080 <vPortSetupTimerInterrupt+0x44>)
 800305a:	3b01      	subs	r3, #1
 800305c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800305e:	4b04      	ldr	r3, [pc, #16]	; (8003070 <vPortSetupTimerInterrupt+0x34>)
 8003060:	2207      	movs	r2, #7
 8003062:	601a      	str	r2, [r3, #0]
}
 8003064:	bf00      	nop
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e000e010 	.word	0xe000e010
 8003074:	e000e018 	.word	0xe000e018
 8003078:	20000000 	.word	0x20000000
 800307c:	10624dd3 	.word	0x10624dd3
 8003080:	e000e014 	.word	0xe000e014

08003084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003094 <vPortEnableVFP+0x10>
 8003088:	6801      	ldr	r1, [r0, #0]
 800308a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800308e:	6001      	str	r1, [r0, #0]
 8003090:	4770      	bx	lr
 8003092:	0000      	.short	0x0000
 8003094:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003098:	bf00      	nop
 800309a:	bf00      	nop

0800309c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80030a2:	f3ef 8305 	mrs	r3, IPSR
 80030a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b0f      	cmp	r3, #15
 80030ac:	d914      	bls.n	80030d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80030ae:	4a17      	ldr	r2, [pc, #92]	; (800310c <vPortValidateInterruptPriority+0x70>)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80030b8:	4b15      	ldr	r3, [pc, #84]	; (8003110 <vPortValidateInterruptPriority+0x74>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	7afa      	ldrb	r2, [r7, #11]
 80030be:	429a      	cmp	r2, r3
 80030c0:	d20a      	bcs.n	80030d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80030c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c6:	f383 8811 	msr	BASEPRI, r3
 80030ca:	f3bf 8f6f 	isb	sy
 80030ce:	f3bf 8f4f 	dsb	sy
 80030d2:	607b      	str	r3, [r7, #4]
    }
 80030d4:	bf00      	nop
 80030d6:	e7fe      	b.n	80030d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80030d8:	4b0e      	ldr	r3, [pc, #56]	; (8003114 <vPortValidateInterruptPriority+0x78>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80030e0:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <vPortValidateInterruptPriority+0x7c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d90a      	bls.n	80030fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	603b      	str	r3, [r7, #0]
    }
 80030fa:	bf00      	nop
 80030fc:	e7fe      	b.n	80030fc <vPortValidateInterruptPriority+0x60>
    }
 80030fe:	bf00      	nop
 8003100:	3714      	adds	r7, #20
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	e000e3f0 	.word	0xe000e3f0
 8003110:	200001dc 	.word	0x200001dc
 8003114:	e000ed0c 	.word	0xe000ed0c
 8003118:	200001e0 	.word	0x200001e0

0800311c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003124:	2300      	movs	r3, #0
 8003126:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003128:	f7ff fa8a 	bl	8002640 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800312c:	4b65      	ldr	r3, [pc, #404]	; (80032c4 <pvPortMalloc+0x1a8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d101      	bne.n	8003138 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003134:	f000 f934 	bl	80033a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003138:	4b63      	ldr	r3, [pc, #396]	; (80032c8 <pvPortMalloc+0x1ac>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f040 80a7 	bne.w	8003294 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d02d      	beq.n	80031a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800314c:	2208      	movs	r2, #8
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d227      	bcs.n	80031a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003158:	2208      	movs	r2, #8
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4413      	add	r3, r2
 800315e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d021      	beq.n	80031ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f023 0307 	bic.w	r3, r3, #7
 8003170:	3308      	adds	r3, #8
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	429a      	cmp	r2, r3
 8003176:	d214      	bcs.n	80031a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	f023 0307 	bic.w	r3, r3, #7
 800317e:	3308      	adds	r3, #8
 8003180:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f003 0307 	and.w	r3, r3, #7
 8003188:	2b00      	cmp	r3, #0
 800318a:	d010      	beq.n	80031ae <pvPortMalloc+0x92>
        __asm volatile
 800318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003190:	f383 8811 	msr	BASEPRI, r3
 8003194:	f3bf 8f6f 	isb	sy
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	617b      	str	r3, [r7, #20]
    }
 800319e:	bf00      	nop
 80031a0:	e7fe      	b.n	80031a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031a6:	e002      	b.n	80031ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	e000      	b.n	80031b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d06e      	beq.n	8003294 <pvPortMalloc+0x178>
 80031b6:	4b45      	ldr	r3, [pc, #276]	; (80032cc <pvPortMalloc+0x1b0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	d869      	bhi.n	8003294 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031c0:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <pvPortMalloc+0x1b4>)
 80031c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031c4:	4b42      	ldr	r3, [pc, #264]	; (80032d0 <pvPortMalloc+0x1b4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031ca:	e004      	b.n	80031d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d903      	bls.n	80031e8 <pvPortMalloc+0xcc>
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1f1      	bne.n	80031cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <pvPortMalloc+0x1a8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d050      	beq.n	8003294 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2208      	movs	r2, #8
 80031f8:	4413      	add	r3, r2
 80031fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	6a3b      	ldr	r3, [r7, #32]
 8003202:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	685a      	ldr	r2, [r3, #4]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	1ad2      	subs	r2, r2, r3
 800320c:	2308      	movs	r3, #8
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	429a      	cmp	r2, r3
 8003212:	d91f      	bls.n	8003254 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <pvPortMalloc+0x120>
        __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	613b      	str	r3, [r7, #16]
    }
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	1ad2      	subs	r2, r2, r3
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800324e:	69b8      	ldr	r0, [r7, #24]
 8003250:	f000 f908 	bl	8003464 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <pvPortMalloc+0x1b0>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4a1b      	ldr	r2, [pc, #108]	; (80032cc <pvPortMalloc+0x1b0>)
 8003260:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <pvPortMalloc+0x1b0>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <pvPortMalloc+0x1b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d203      	bcs.n	8003276 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <pvPortMalloc+0x1b0>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a18      	ldr	r2, [pc, #96]	; (80032d4 <pvPortMalloc+0x1b8>)
 8003274:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <pvPortMalloc+0x1ac>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	431a      	orrs	r2, r3
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <pvPortMalloc+0x1bc>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	3301      	adds	r3, #1
 8003290:	4a11      	ldr	r2, [pc, #68]	; (80032d8 <pvPortMalloc+0x1bc>)
 8003292:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003294:	f7ff f9e2 	bl	800265c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0307 	and.w	r3, r3, #7
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <pvPortMalloc+0x19c>
        __asm volatile
 80032a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a6:	f383 8811 	msr	BASEPRI, r3
 80032aa:	f3bf 8f6f 	isb	sy
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	60fb      	str	r3, [r7, #12]
    }
 80032b4:	bf00      	nop
 80032b6:	e7fe      	b.n	80032b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80032b8:	69fb      	ldr	r3, [r7, #28]
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3728      	adds	r7, #40	; 0x28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20012dec 	.word	0x20012dec
 80032c8:	20012e00 	.word	0x20012e00
 80032cc:	20012df0 	.word	0x20012df0
 80032d0:	20012de4 	.word	0x20012de4
 80032d4:	20012df4 	.word	0x20012df4
 80032d8:	20012df8 	.word	0x20012df8

080032dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b086      	sub	sp, #24
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04d      	beq.n	800338a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032ee:	2308      	movs	r3, #8
 80032f0:	425b      	negs	r3, r3
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	4413      	add	r3, r2
 80032f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	685a      	ldr	r2, [r3, #4]
 8003300:	4b24      	ldr	r3, [pc, #144]	; (8003394 <vPortFree+0xb8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <vPortFree+0x44>
        __asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	60fb      	str	r3, [r7, #12]
    }
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <vPortFree+0x62>
        __asm volatile
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	60bb      	str	r3, [r7, #8]
    }
 800333a:	bf00      	nop
 800333c:	e7fe      	b.n	800333c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	4b14      	ldr	r3, [pc, #80]	; (8003394 <vPortFree+0xb8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01e      	beq.n	800338a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11a      	bne.n	800338a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	685a      	ldr	r2, [r3, #4]
 8003358:	4b0e      	ldr	r3, [pc, #56]	; (8003394 <vPortFree+0xb8>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	43db      	mvns	r3, r3
 800335e:	401a      	ands	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003364:	f7ff f96c 	bl	8002640 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <vPortFree+0xbc>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4413      	add	r3, r2
 8003372:	4a09      	ldr	r2, [pc, #36]	; (8003398 <vPortFree+0xbc>)
 8003374:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003376:	6938      	ldr	r0, [r7, #16]
 8003378:	f000 f874 	bl	8003464 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800337c:	4b07      	ldr	r3, [pc, #28]	; (800339c <vPortFree+0xc0>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	3301      	adds	r3, #1
 8003382:	4a06      	ldr	r2, [pc, #24]	; (800339c <vPortFree+0xc0>)
 8003384:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003386:	f7ff f969 	bl	800265c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20012e00 	.word	0x20012e00
 8003398:	20012df0 	.word	0x20012df0
 800339c:	20012dfc 	.word	0x20012dfc

080033a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80033a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80033aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80033ac:	4b27      	ldr	r3, [pc, #156]	; (800344c <prvHeapInit+0xac>)
 80033ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00c      	beq.n	80033d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	3307      	adds	r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0307 	bic.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	4a1f      	ldr	r2, [pc, #124]	; (800344c <prvHeapInit+0xac>)
 80033d0:	4413      	add	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033d8:	4a1d      	ldr	r2, [pc, #116]	; (8003450 <prvHeapInit+0xb0>)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033de:	4b1c      	ldr	r3, [pc, #112]	; (8003450 <prvHeapInit+0xb0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	4413      	add	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033ec:	2208      	movs	r2, #8
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0307 	bic.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4a15      	ldr	r2, [pc, #84]	; (8003454 <prvHeapInit+0xb4>)
 8003400:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003402:	4b14      	ldr	r3, [pc, #80]	; (8003454 <prvHeapInit+0xb4>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800340a:	4b12      	ldr	r3, [pc, #72]	; (8003454 <prvHeapInit+0xb4>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	1ad2      	subs	r2, r2, r3
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003420:	4b0c      	ldr	r3, [pc, #48]	; (8003454 <prvHeapInit+0xb4>)
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a0a      	ldr	r2, [pc, #40]	; (8003458 <prvHeapInit+0xb8>)
 800342e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <prvHeapInit+0xbc>)
 8003436:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <prvHeapInit+0xc0>)
 800343a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800343e:	601a      	str	r2, [r3, #0]
}
 8003440:	bf00      	nop
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	200001e4 	.word	0x200001e4
 8003450:	20012de4 	.word	0x20012de4
 8003454:	20012dec 	.word	0x20012dec
 8003458:	20012df4 	.word	0x20012df4
 800345c:	20012df0 	.word	0x20012df0
 8003460:	20012e00 	.word	0x20012e00

08003464 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800346c:	4b28      	ldr	r3, [pc, #160]	; (8003510 <prvInsertBlockIntoFreeList+0xac>)
 800346e:	60fb      	str	r3, [r7, #12]
 8003470:	e002      	b.n	8003478 <prvInsertBlockIntoFreeList+0x14>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	429a      	cmp	r2, r3
 8003480:	d8f7      	bhi.n	8003472 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	4413      	add	r3, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d108      	bne.n	80034a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	441a      	add	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	441a      	add	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d118      	bne.n	80034ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	4b15      	ldr	r3, [pc, #84]	; (8003514 <prvInsertBlockIntoFreeList+0xb0>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d00d      	beq.n	80034e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685a      	ldr	r2, [r3, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	441a      	add	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	e008      	b.n	80034f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034e2:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <prvInsertBlockIntoFreeList+0xb0>)
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e003      	b.n	80034f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d002      	beq.n	8003502 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003502:	bf00      	nop
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20012de4 	.word	0x20012de4
 8003514:	20012dec 	.word	0x20012dec

08003518 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800351c:	4803      	ldr	r0, [pc, #12]	; (800352c <_cbSendSystemDesc+0x14>)
 800351e:	f001 f9e1 	bl	80048e4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003522:	4803      	ldr	r0, [pc, #12]	; (8003530 <_cbSendSystemDesc+0x18>)
 8003524:	f001 f9de 	bl	80048e4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003528:	bf00      	nop
 800352a:	bd80      	pop	{r7, pc}
 800352c:	08005dec 	.word	0x08005dec
 8003530:	08005e20 	.word	0x08005e20

08003534 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003538:	4b06      	ldr	r3, [pc, #24]	; (8003554 <SEGGER_SYSVIEW_Conf+0x20>)
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <SEGGER_SYSVIEW_Conf+0x20>)
 800353e:	6819      	ldr	r1, [r3, #0]
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <SEGGER_SYSVIEW_Conf+0x24>)
 8003542:	4a06      	ldr	r2, [pc, #24]	; (800355c <SEGGER_SYSVIEW_Conf+0x28>)
 8003544:	f000 fe54 	bl	80041f0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003548:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800354c:	f000 fe94 	bl	8004278 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003550:	bf00      	nop
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000000 	.word	0x20000000
 8003558:	08003519 	.word	0x08003519
 800355c:	08005ec0 	.word	0x08005ec0

08003560 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003562:	b085      	sub	sp, #20
 8003564:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003566:	2300      	movs	r3, #0
 8003568:	607b      	str	r3, [r7, #4]
 800356a:	e033      	b.n	80035d4 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800356c:	491e      	ldr	r1, [pc, #120]	; (80035e8 <_cbSendTaskList+0x88>)
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	491a      	ldr	r1, [pc, #104]	; (80035e8 <_cbSendTaskList+0x88>)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	3304      	adds	r3, #4
 800358c:	6819      	ldr	r1, [r3, #0]
 800358e:	4c16      	ldr	r4, [pc, #88]	; (80035e8 <_cbSendTaskList+0x88>)
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4423      	add	r3, r4
 800359c:	3308      	adds	r3, #8
 800359e:	681c      	ldr	r4, [r3, #0]
 80035a0:	4d11      	ldr	r5, [pc, #68]	; (80035e8 <_cbSendTaskList+0x88>)
 80035a2:	687a      	ldr	r2, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	442b      	add	r3, r5
 80035ae:	330c      	adds	r3, #12
 80035b0:	681d      	ldr	r5, [r3, #0]
 80035b2:	4e0d      	ldr	r6, [pc, #52]	; (80035e8 <_cbSendTaskList+0x88>)
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4613      	mov	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4433      	add	r3, r6
 80035c0:	3310      	adds	r3, #16
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	9300      	str	r3, [sp, #0]
 80035c6:	462b      	mov	r3, r5
 80035c8:	4622      	mov	r2, r4
 80035ca:	f000 f8bd 	bl	8003748 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	607b      	str	r3, [r7, #4]
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <_cbSendTaskList+0x8c>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	429a      	cmp	r2, r3
 80035dc:	d3c6      	bcc.n	800356c <_cbSendTaskList+0xc>
  }
}
 80035de:	bf00      	nop
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035e8:	20012e04 	.word	0x20012e04
 80035ec:	20012ea4 	.word	0x20012ea4

080035f0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80035f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035f4:	b082      	sub	sp, #8
 80035f6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80035f8:	f7ff f8d0 	bl	800279c <xTaskGetTickCountFromISR>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2200      	movs	r2, #0
 8003600:	469a      	mov	sl, r3
 8003602:	4693      	mov	fp, r2
 8003604:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003608:	e9d7 0100 	ldrd	r0, r1, [r7]
 800360c:	4602      	mov	r2, r0
 800360e:	460b      	mov	r3, r1
 8003610:	f04f 0a00 	mov.w	sl, #0
 8003614:	f04f 0b00 	mov.w	fp, #0
 8003618:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800361c:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003620:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003624:	4652      	mov	r2, sl
 8003626:	465b      	mov	r3, fp
 8003628:	1a14      	subs	r4, r2, r0
 800362a:	eb63 0501 	sbc.w	r5, r3, r1
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	00ab      	lsls	r3, r5, #2
 8003638:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800363c:	00a2      	lsls	r2, r4, #2
 800363e:	4614      	mov	r4, r2
 8003640:	461d      	mov	r5, r3
 8003642:	eb14 0800 	adds.w	r8, r4, r0
 8003646:	eb45 0901 	adc.w	r9, r5, r1
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003656:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800365a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365e:	4690      	mov	r8, r2
 8003660:	4699      	mov	r9, r3
 8003662:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003666:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003678 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	607a      	str	r2, [r7, #4]
 8003684:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003686:	2205      	movs	r2, #5
 8003688:	492b      	ldr	r1, [pc, #172]	; (8003738 <SYSVIEW_AddTask+0xc0>)
 800368a:	68b8      	ldr	r0, [r7, #8]
 800368c:	f001 fd3d 	bl	800510a <memcmp>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d04b      	beq.n	800372e <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <SYSVIEW_AddTask+0xc4>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b07      	cmp	r3, #7
 800369c:	d903      	bls.n	80036a6 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800369e:	4828      	ldr	r0, [pc, #160]	; (8003740 <SYSVIEW_AddTask+0xc8>)
 80036a0:	f001 fbae 	bl	8004e00 <SEGGER_SYSVIEW_Warn>
    return;
 80036a4:	e044      	b.n	8003730 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80036a6:	4b25      	ldr	r3, [pc, #148]	; (800373c <SYSVIEW_AddTask+0xc4>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4926      	ldr	r1, [pc, #152]	; (8003744 <SYSVIEW_AddTask+0xcc>)
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <SYSVIEW_AddTask+0xc4>)
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	4921      	ldr	r1, [pc, #132]	; (8003744 <SYSVIEW_AddTask+0xcc>)
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <SYSVIEW_AddTask+0xc4>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	491b      	ldr	r1, [pc, #108]	; (8003744 <SYSVIEW_AddTask+0xcc>)
 80036d6:	4613      	mov	r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	4413      	add	r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3308      	adds	r3, #8
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <SYSVIEW_AddTask+0xc4>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4916      	ldr	r1, [pc, #88]	; (8003744 <SYSVIEW_AddTask+0xcc>)
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	330c      	adds	r3, #12
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <SYSVIEW_AddTask+0xc4>)
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	4910      	ldr	r1, [pc, #64]	; (8003744 <SYSVIEW_AddTask+0xcc>)
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3310      	adds	r3, #16
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003712:	4b0a      	ldr	r3, [pc, #40]	; (800373c <SYSVIEW_AddTask+0xc4>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a08      	ldr	r2, [pc, #32]	; (800373c <SYSVIEW_AddTask+0xc4>)
 800371a:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	9300      	str	r3, [sp, #0]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f80e 	bl	8003748 <SYSVIEW_SendTaskInfo>
 800372c:	e000      	b.n	8003730 <SYSVIEW_AddTask+0xb8>
    return;
 800372e:	bf00      	nop

}
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	08005e30 	.word	0x08005e30
 800373c:	20012ea4 	.word	0x20012ea4
 8003740:	08005e38 	.word	0x08005e38
 8003744:	20012e04 	.word	0x20012e04

08003748 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
 8003754:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	2214      	movs	r2, #20
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f001 fce3 	bl	800512a <memset>
  TaskInfo.TaskID     = TaskID;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003778:	f107 0314 	add.w	r3, r7, #20
 800377c:	4618      	mov	r0, r3
 800377e:	f000 ffb9 	bl	80046f4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003782:	bf00      	nop
 8003784:	3728      	adds	r7, #40	; 0x28
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <_DoInit+0x98>)
 8003794:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2203      	movs	r2, #3
 800379a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2203      	movs	r2, #3
 80037a0:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a20      	ldr	r2, [pc, #128]	; (8003828 <_DoInit+0x9c>)
 80037a6:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a20      	ldr	r2, [pc, #128]	; (800382c <_DoInit+0xa0>)
 80037ac:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037b4:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <_DoInit+0x9c>)
 80037cc:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a17      	ldr	r2, [pc, #92]	; (8003830 <_DoInit+0xa4>)
 80037d2:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2210      	movs	r2, #16
 80037d8:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3307      	adds	r3, #7
 80037f0:	4a10      	ldr	r2, [pc, #64]	; (8003834 <_DoInit+0xa8>)
 80037f2:	6810      	ldr	r0, [r2, #0]
 80037f4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80037f6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <_DoInit+0xac>)
 80037fe:	6810      	ldr	r0, [r2, #0]
 8003800:	6018      	str	r0, [r3, #0]
 8003802:	8891      	ldrh	r1, [r2, #4]
 8003804:	7992      	ldrb	r2, [r2, #6]
 8003806:	8099      	strh	r1, [r3, #4]
 8003808:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800380a:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2220      	movs	r2, #32
 8003812:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003814:	f3bf 8f5f 	dmb	sy
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	20012ea8 	.word	0x20012ea8
 8003828:	08005e88 	.word	0x08005e88
 800382c:	20012f50 	.word	0x20012f50
 8003830:	20013350 	.word	0x20013350
 8003834:	08005e94 	.word	0x08005e94
 8003838:	08005e98 	.word	0x08005e98

0800383c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800383c:	b580      	push	{r7, lr}
 800383e:	b08a      	sub	sp, #40	; 0x28
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	429a      	cmp	r2, r3
 800385e:	d905      	bls.n	800386c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	627b      	str	r3, [r7, #36]	; 0x24
 800386a:	e007      	b.n	800387c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	69b9      	ldr	r1, [r7, #24]
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	1acb      	subs	r3, r1, r3
 8003876:	4413      	add	r3, r2
 8003878:	3b01      	subs	r3, #1
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003886:	4293      	cmp	r3, r2
 8003888:	bf28      	it	cs
 800388a:	4613      	movcs	r3, r2
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4293      	cmp	r3, r2
 8003894:	bf28      	it	cs
 8003896:	4613      	movcs	r3, r2
 8003898:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80038a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	6978      	ldr	r0, [r7, #20]
 80038aa:	f001 fca2 	bl	80051f2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80038ae:	6a3a      	ldr	r2, [r7, #32]
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	4413      	add	r3, r2
 80038b4:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ba:	4413      	add	r3, r2
 80038bc:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	4413      	add	r3, r2
 80038cc:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d101      	bne.n	80038dc <_WriteBlocking+0xa0>
      WrOff = 0u;
 80038d8:	2300      	movs	r3, #0
 80038da:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80038dc:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1b2      	bne.n	8003852 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80038ec:	6a3b      	ldr	r3, [r7, #32]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3728      	adds	r7, #40	; 0x28
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b088      	sub	sp, #32
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	60f8      	str	r0, [r7, #12]
 80038fe:	60b9      	str	r1, [r7, #8]
 8003900:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	429a      	cmp	r2, r3
 8003918:	d911      	bls.n	800393e <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	4413      	add	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68b9      	ldr	r1, [r7, #8]
 8003928:	6938      	ldr	r0, [r7, #16]
 800392a:	f001 fc62 	bl	80051f2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800392e:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	441a      	add	r2, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800393c:	e01f      	b.n	800397e <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800394c:	697a      	ldr	r2, [r7, #20]
 800394e:	68b9      	ldr	r1, [r7, #8]
 8003950:	6938      	ldr	r0, [r7, #16]
 8003952:	f001 fc4e 	bl	80051f2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8003964:	68ba      	ldr	r2, [r7, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	4413      	add	r3, r2
 800396a:	697a      	ldr	r2, [r7, #20]
 800396c:	4619      	mov	r1, r3
 800396e:	6938      	ldr	r0, [r7, #16]
 8003970:	f001 fc3f 	bl	80051f2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003974:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	60da      	str	r2, [r3, #12]
}
 800397e:	bf00      	nop
 8003980:	3720      	adds	r7, #32
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8003986:	b480      	push	{r7}
 8003988:	b087      	sub	sp, #28
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	429a      	cmp	r2, r3
 80039a0:	d808      	bhi.n	80039b4 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	1ad2      	subs	r2, r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	4413      	add	r3, r2
 80039ae:	3b01      	subs	r3, #1
 80039b0:	617b      	str	r3, [r7, #20]
 80039b2:	e004      	b.n	80039be <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  }
  return r;
 80039be:	697b      	ldr	r3, [r7, #20]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b08c      	sub	sp, #48	; 0x30
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80039d8:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <SEGGER_RTT_ReadNoLock+0x108>)
 80039da:	623b      	str	r3, [r7, #32]
 80039dc:	6a3b      	ldr	r3, [r7, #32]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <SEGGER_RTT_ReadNoLock+0x1e>
 80039e6:	f7ff fed1 	bl	800378c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4613      	mov	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	4413      	add	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	3360      	adds	r3, #96	; 0x60
 80039f6:	4a37      	ldr	r2, [pc, #220]	; (8003ad4 <SEGGER_RTT_ReadNoLock+0x108>)
 80039f8:	4413      	add	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d92b      	bls.n	8003a70 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4293      	cmp	r3, r2
 8003a28:	bf28      	it	cs
 8003a2a:	4613      	movcs	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a34:	4413      	add	r3, r2
 8003a36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	6939      	ldr	r1, [r7, #16]
 8003a3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a3e:	f001 fbd8 	bl	80051f2 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4413      	add	r3, r2
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	4413      	add	r3, r2
 8003a50:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4413      	add	r3, r2
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d101      	bne.n	8003a70 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	bf28      	it	cs
 8003a80:	4613      	movcs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d019      	beq.n	8003abe <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a90:	4413      	add	r3, r2
 8003a92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003a94:	697a      	ldr	r2, [r7, #20]
 8003a96:	6939      	ldr	r1, [r7, #16]
 8003a98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a9a:	f001 fbaa 	bl	80051f2 <memcpy>
    NumBytesRead += NumBytesRem;
 8003a9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8003aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4413      	add	r3, r2
 8003aac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003ab6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	4413      	add	r3, r2
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003ac4:	69fb      	ldr	r3, [r7, #28]
 8003ac6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ac8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3730      	adds	r7, #48	; 0x30
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	20012ea8 	.word	0x20012ea8

08003ad8 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	4613      	mov	r3, r2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	4413      	add	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <SEGGER_RTT_WriteNoLock+0x9c>)
 8003af6:	4413      	add	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d029      	beq.n	8003b56 <SEGGER_RTT_WriteNoLock+0x7e>
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d82e      	bhi.n	8003b64 <SEGGER_RTT_WriteNoLock+0x8c>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d002      	beq.n	8003b10 <SEGGER_RTT_WriteNoLock+0x38>
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d013      	beq.n	8003b36 <SEGGER_RTT_WriteNoLock+0x5e>
 8003b0e:	e029      	b.n	8003b64 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003b10:	6978      	ldr	r0, [r7, #20]
 8003b12:	f7ff ff38 	bl	8003986 <_GetAvailWriteSpace>
 8003b16:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d202      	bcs.n	8003b26 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8003b20:	2300      	movs	r3, #0
 8003b22:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8003b24:	e021      	b.n	8003b6a <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	69b9      	ldr	r1, [r7, #24]
 8003b2e:	6978      	ldr	r0, [r7, #20]
 8003b30:	f7ff fee1 	bl	80038f6 <_WriteNoCheck>
    break;
 8003b34:	e019      	b.n	8003b6a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8003b36:	6978      	ldr	r0, [r7, #20]
 8003b38:	f7ff ff25 	bl	8003986 <_GetAvailWriteSpace>
 8003b3c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4293      	cmp	r3, r2
 8003b44:	bf28      	it	cs
 8003b46:	4613      	movcs	r3, r2
 8003b48:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	69b9      	ldr	r1, [r7, #24]
 8003b4e:	6978      	ldr	r0, [r7, #20]
 8003b50:	f7ff fed1 	bl	80038f6 <_WriteNoCheck>
    break;
 8003b54:	e009      	b.n	8003b6a <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	6978      	ldr	r0, [r7, #20]
 8003b5c:	f7ff fe6e 	bl	800383c <_WriteBlocking>
 8003b60:	61f8      	str	r0, [r7, #28]
    break;
 8003b62:	e002      	b.n	8003b6a <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
    break;
 8003b68:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3720      	adds	r7, #32
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20012ea8 	.word	0x20012ea8

08003b78 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8003b84:	4b0e      	ldr	r3, [pc, #56]	; (8003bc0 <SEGGER_RTT_Write+0x48>)
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <SEGGER_RTT_Write+0x1e>
 8003b92:	f7ff fdfb 	bl	800378c <_DoInit>
  SEGGER_RTT_LOCK();
 8003b96:	f3ef 8311 	mrs	r3, BASEPRI
 8003b9a:	f04f 0120 	mov.w	r1, #32
 8003b9e:	f381 8811 	msr	BASEPRI, r1
 8003ba2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	68b9      	ldr	r1, [r7, #8]
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff ff95 	bl	8003ad8 <SEGGER_RTT_WriteNoLock>
 8003bae:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8003bb6:	697b      	ldr	r3, [r7, #20]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3720      	adds	r7, #32
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20012ea8 	.word	0x20012ea8

08003bc4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b088      	sub	sp, #32
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]
 8003bd0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d101      	bne.n	8003be4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003be0:	f7ff fdd4 	bl	800378c <_DoInit>
  SEGGER_RTT_LOCK();
 8003be4:	f3ef 8311 	mrs	r3, BASEPRI
 8003be8:	f04f 0120 	mov.w	r1, #32
 8003bec:	f381 8811 	msr	BASEPRI, r1
 8003bf0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003bf2:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003bf4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003bfa:	6939      	ldr	r1, [r7, #16]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	4613      	mov	r3, r2
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	4413      	add	r3, r2
 8003c06:	00db      	lsls	r3, r3, #3
 8003c08:	440b      	add	r3, r1
 8003c0a:	3304      	adds	r3, #4
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d008      	beq.n	8003c24 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	3301      	adds	r3, #1
 8003c16:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	dbeb      	blt.n	8003bfa <SEGGER_RTT_AllocUpBuffer+0x36>
 8003c22:	e000      	b.n	8003c26 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003c24:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	da3f      	bge.n	8003cb0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003c30:	6939      	ldr	r1, [r7, #16]
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	440b      	add	r3, r1
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003c44:	6939      	ldr	r1, [r7, #16]
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	4413      	add	r3, r2
 8003c50:	00db      	lsls	r3, r3, #3
 8003c52:	440b      	add	r3, r1
 8003c54:	3304      	adds	r3, #4
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003c5a:	6939      	ldr	r1, [r7, #16]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	440b      	add	r3, r1
 8003c68:	3320      	adds	r3, #32
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003c6e:	6939      	ldr	r1, [r7, #16]
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	4613      	mov	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	4413      	add	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	440b      	add	r3, r1
 8003c7c:	3328      	adds	r3, #40	; 0x28
 8003c7e:	2200      	movs	r2, #0
 8003c80:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003c82:	6939      	ldr	r1, [r7, #16]
 8003c84:	69fa      	ldr	r2, [r7, #28]
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	440b      	add	r3, r1
 8003c90:	3324      	adds	r3, #36	; 0x24
 8003c92:	2200      	movs	r2, #0
 8003c94:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003c96:	6939      	ldr	r1, [r7, #16]
 8003c98:	69fa      	ldr	r2, [r7, #28]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	4413      	add	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	440b      	add	r3, r1
 8003ca4:	332c      	adds	r3, #44	; 0x2c
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003caa:	f3bf 8f5f 	dmb	sy
 8003cae:	e002      	b.n	8003cb6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20012ea8 	.word	0x20012ea8

08003ccc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b088      	sub	sp, #32
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003cda:	4b33      	ldr	r3, [pc, #204]	; (8003da8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003ce8:	f7ff fd50 	bl	800378c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003cec:	4b2e      	ldr	r3, [pc, #184]	; (8003da8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003cee:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d24d      	bcs.n	8003d98 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003cfc:	f3ef 8311 	mrs	r3, BASEPRI
 8003d00:	f04f 0120 	mov.w	r1, #32
 8003d04:	f381 8811 	msr	BASEPRI, r1
 8003d08:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d031      	beq.n	8003d74 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003d10:	6979      	ldr	r1, [r7, #20]
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	440b      	add	r3, r1
 8003d1e:	3360      	adds	r3, #96	; 0x60
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003d24:	6979      	ldr	r1, [r7, #20]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	4413      	add	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	440b      	add	r3, r1
 8003d32:	3364      	adds	r3, #100	; 0x64
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003d38:	6979      	ldr	r1, [r7, #20]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	005b      	lsls	r3, r3, #1
 8003d40:	4413      	add	r3, r2
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	440b      	add	r3, r1
 8003d46:	3368      	adds	r3, #104	; 0x68
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8003d4c:	6979      	ldr	r1, [r7, #20]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	440b      	add	r3, r1
 8003d5a:	3370      	adds	r3, #112	; 0x70
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8003d60:	6979      	ldr	r1, [r7, #20]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	4613      	mov	r3, r2
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	440b      	add	r3, r1
 8003d6e:	336c      	adds	r3, #108	; 0x6c
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8003d74:	6979      	ldr	r1, [r7, #20]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	005b      	lsls	r3, r3, #1
 8003d7c:	4413      	add	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	440b      	add	r3, r1
 8003d82:	3374      	adds	r3, #116	; 0x74
 8003d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d86:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003d88:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e002      	b.n	8003d9e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003d9e:	69fb      	ldr	r3, [r7, #28]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3720      	adds	r7, #32
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20012ea8 	.word	0x20012ea8

08003dac <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003dac:	b480      	push	{r7}
 8003dae:	b087      	sub	sp, #28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003dbc:	e002      	b.n	8003dc4 <_EncodeStr+0x18>
    Len++;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1f6      	bne.n	8003dbe <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d901      	bls.n	8003ddc <_EncodeStr+0x30>
    Len = Limit;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	2bfe      	cmp	r3, #254	; 0xfe
 8003de0:	d806      	bhi.n	8003df0 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	60fa      	str	r2, [r7, #12]
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	e011      	b.n	8003e14 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60fa      	str	r2, [r7, #12]
 8003df6:	22ff      	movs	r2, #255	; 0xff
 8003df8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	60fa      	str	r2, [r7, #12]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	0a19      	lsrs	r1, r3, #8
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	60fa      	str	r2, [r7, #12]
 8003e10:	b2ca      	uxtb	r2, r1
 8003e12:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e18:	e00a      	b.n	8003e30 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003e1a:	68ba      	ldr	r2, [r7, #8]
 8003e1c:	1c53      	adds	r3, r2, #1
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	1c59      	adds	r1, r3, #1
 8003e24:	60f9      	str	r1, [r7, #12]
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	701a      	strb	r2, [r3, #0]
    n++;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d3f0      	bcc.n	8003e1a <_EncodeStr+0x6e>
  }
  return pPayload;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3304      	adds	r3, #4
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr
	...

08003e60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003e66:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <_HandleIncomingPacket+0xdc>)
 8003e68:	7e1b      	ldrb	r3, [r3, #24]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	1cfb      	adds	r3, r7, #3
 8003e6e:	2201      	movs	r2, #1
 8003e70:	4619      	mov	r1, r3
 8003e72:	f7ff fdab 	bl	80039cc <SEGGER_RTT_ReadNoLock>
 8003e76:	4603      	mov	r3, r0
 8003e78:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	dd59      	ble.n	8003f34 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003e80:	78fb      	ldrb	r3, [r7, #3]
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d032      	beq.n	8003eec <_HandleIncomingPacket+0x8c>
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	dc42      	bgt.n	8003f10 <_HandleIncomingPacket+0xb0>
 8003e8a:	2b07      	cmp	r3, #7
 8003e8c:	dc16      	bgt.n	8003ebc <_HandleIncomingPacket+0x5c>
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	dd3e      	ble.n	8003f10 <_HandleIncomingPacket+0xb0>
 8003e92:	3b01      	subs	r3, #1
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d83b      	bhi.n	8003f10 <_HandleIncomingPacket+0xb0>
 8003e98:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <_HandleIncomingPacket+0x40>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003ec3 	.word	0x08003ec3
 8003ea4:	08003ec9 	.word	0x08003ec9
 8003ea8:	08003ecf 	.word	0x08003ecf
 8003eac:	08003ed5 	.word	0x08003ed5
 8003eb0:	08003edb 	.word	0x08003edb
 8003eb4:	08003ee1 	.word	0x08003ee1
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ebe:	d034      	beq.n	8003f2a <_HandleIncomingPacket+0xca>
 8003ec0:	e026      	b.n	8003f10 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8003ec2:	f000 fa9d 	bl	8004400 <SEGGER_SYSVIEW_Start>
      break;
 8003ec6:	e035      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003ec8:	f000 fb54 	bl	8004574 <SEGGER_SYSVIEW_Stop>
      break;
 8003ecc:	e032      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003ece:	f000 fd2d 	bl	800492c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8003ed2:	e02f      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003ed4:	f000 fcf2 	bl	80048bc <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003ed8:	e02c      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003eda:	f000 fb71 	bl	80045c0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003ede:	e029      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003ee0:	f000 ff50 	bl	8004d84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003ee4:	e026      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003ee6:	f000 ff2f 	bl	8004d48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003eea:	e023      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003eec:	4b13      	ldr	r3, [pc, #76]	; (8003f3c <_HandleIncomingPacket+0xdc>)
 8003eee:	7e1b      	ldrb	r3, [r3, #24]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	1cfb      	adds	r3, r7, #3
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f7ff fd68 	bl	80039cc <SEGGER_RTT_ReadNoLock>
 8003efc:	4603      	mov	r3, r0
 8003efe:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	dd13      	ble.n	8003f2e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003f06:	78fb      	ldrb	r3, [r7, #3]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fe9d 	bl	8004c48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003f0e:	e00e      	b.n	8003f2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da0c      	bge.n	8003f32 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003f18:	4b08      	ldr	r3, [pc, #32]	; (8003f3c <_HandleIncomingPacket+0xdc>)
 8003f1a:	7e1b      	ldrb	r3, [r3, #24]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	1cfb      	adds	r3, r7, #3
 8003f20:	2201      	movs	r2, #1
 8003f22:	4619      	mov	r1, r3
 8003f24:	f7ff fd52 	bl	80039cc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003f28:	e003      	b.n	8003f32 <_HandleIncomingPacket+0xd2>
      break;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
      break;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <_HandleIncomingPacket+0xd4>
      break;
 8003f32:	bf00      	nop
    }
  }
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	20014368 	.word	0x20014368

08003f40 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08c      	sub	sp, #48	; 0x30
 8003f44:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003f46:	2301      	movs	r3, #1
 8003f48:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003f4a:	1d3b      	adds	r3, r7, #4
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f54:	4b31      	ldr	r3, [pc, #196]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f5a:	e00b      	b.n	8003f74 <_TrySendOverflowPacket+0x34>
 8003f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f62:	1c59      	adds	r1, r3, #1
 8003f64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003f66:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	09db      	lsrs	r3, r3, #7
 8003f72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f76:	2b7f      	cmp	r3, #127	; 0x7f
 8003f78:	d8f0      	bhi.n	8003f5c <_TrySendOverflowPacket+0x1c>
 8003f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <_TrySendOverflowPacket+0xe0>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003f90:	4b22      	ldr	r3, [pc, #136]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	e00b      	b.n	8003fbc <_TrySendOverflowPacket+0x7c>
 8003fa4:	6a3b      	ldr	r3, [r7, #32]
 8003fa6:	b2da      	uxtb	r2, r3
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	6279      	str	r1, [r7, #36]	; 0x24
 8003fae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	09db      	lsrs	r3, r3, #7
 8003fba:	623b      	str	r3, [r7, #32]
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8003fc0:	d8f0      	bhi.n	8003fa4 <_TrySendOverflowPacket+0x64>
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	627a      	str	r2, [r7, #36]	; 0x24
 8003fc8:	6a3a      	ldr	r2, [r7, #32]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	701a      	strb	r2, [r3, #0]
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8003fd2:	4b12      	ldr	r3, [pc, #72]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8003fd4:	785b      	ldrb	r3, [r3, #1]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	1d3b      	adds	r3, r7, #4
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	1d3b      	adds	r3, r7, #4
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	f7fc f8f4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	4b06      	ldr	r3, [pc, #24]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8004002:	701a      	strb	r2, [r3, #0]
 8004004:	e004      	b.n	8004010 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <_TrySendOverflowPacket+0xdc>)
 8004008:	695b      	ldr	r3, [r3, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	4a03      	ldr	r2, [pc, #12]	; (800401c <_TrySendOverflowPacket+0xdc>)
 800400e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004010:	693b      	ldr	r3, [r7, #16]
}
 8004012:	4618      	mov	r0, r3
 8004014:	3730      	adds	r7, #48	; 0x30
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	20014368 	.word	0x20014368
 8004020:	e0001004 	.word	0xe0001004

08004024 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b08a      	sub	sp, #40	; 0x28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004030:	4b6c      	ldr	r3, [pc, #432]	; (80041e4 <_SendPacket+0x1c0>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d010      	beq.n	800405a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004038:	4b6a      	ldr	r3, [pc, #424]	; (80041e4 <_SendPacket+0x1c0>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	f000 80a3 	beq.w	8004188 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004042:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <_SendPacket+0x1c0>)
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d109      	bne.n	800405e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800404a:	f7ff ff79 	bl	8003f40 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <_SendPacket+0x1c0>)
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	2b01      	cmp	r3, #1
 8004054:	f040 809a 	bne.w	800418c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004058:	e001      	b.n	800405e <_SendPacket+0x3a>
    goto Send;
 800405a:	bf00      	nop
 800405c:	e000      	b.n	8004060 <_SendPacket+0x3c>
Send:
 800405e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b1f      	cmp	r3, #31
 8004064:	d809      	bhi.n	800407a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004066:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <_SendPacket+0x1c0>)
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	fa22 f303 	lsr.w	r3, r2, r3
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	2b00      	cmp	r3, #0
 8004076:	f040 808b 	bne.w	8004190 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b17      	cmp	r3, #23
 800407e:	d807      	bhi.n	8004090 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b01      	subs	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e03d      	b.n	800410c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	2b7f      	cmp	r3, #127	; 0x7f
 800409c:	d912      	bls.n	80040c4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	09da      	lsrs	r2, r3, #7
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	3b01      	subs	r3, #1
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	b2d2      	uxtb	r2, r2
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	3a01      	subs	r2, #1
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	701a      	strb	r2, [r3, #0]
 80040c2:	e006      	b.n	80040d2 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	3b01      	subs	r3, #1
 80040c8:	60fb      	str	r3, [r7, #12]
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b7f      	cmp	r3, #127	; 0x7f
 80040d6:	d912      	bls.n	80040fe <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	09da      	lsrs	r2, r3, #7
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	3a01      	subs	r2, #1
 80040f0:	60fa      	str	r2, [r7, #12]
 80040f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040f6:	b2da      	uxtb	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	701a      	strb	r2, [r3, #0]
 80040fc:	e006      	b.n	800410c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	3b01      	subs	r3, #1
 8004102:	60fb      	str	r3, [r7, #12]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	b2da      	uxtb	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800410c:	4b36      	ldr	r3, [pc, #216]	; (80041e8 <_SendPacket+0x1c4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004112:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <_SendPacket+0x1c0>)
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	627b      	str	r3, [r7, #36]	; 0x24
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	623b      	str	r3, [r7, #32]
 8004124:	e00b      	b.n	800413e <_SendPacket+0x11a>
 8004126:	6a3b      	ldr	r3, [r7, #32]
 8004128:	b2da      	uxtb	r2, r3
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	1c59      	adds	r1, r3, #1
 800412e:	6279      	str	r1, [r7, #36]	; 0x24
 8004130:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	6a3b      	ldr	r3, [r7, #32]
 800413a:	09db      	lsrs	r3, r3, #7
 800413c:	623b      	str	r3, [r7, #32]
 800413e:	6a3b      	ldr	r3, [r7, #32]
 8004140:	2b7f      	cmp	r3, #127	; 0x7f
 8004142:	d8f0      	bhi.n	8004126 <_SendPacket+0x102>
 8004144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	627a      	str	r2, [r7, #36]	; 0x24
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	b2d2      	uxtb	r2, r2
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004154:	4b23      	ldr	r3, [pc, #140]	; (80041e4 <_SendPacket+0x1c0>)
 8004156:	785b      	ldrb	r3, [r3, #1]
 8004158:	4618      	mov	r0, r3
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	461a      	mov	r2, r3
 8004162:	68f9      	ldr	r1, [r7, #12]
 8004164:	f7fc f834 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004168:	4603      	mov	r3, r0
 800416a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004172:	4a1c      	ldr	r2, [pc, #112]	; (80041e4 <_SendPacket+0x1c0>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	60d3      	str	r3, [r2, #12]
 8004178:	e00b      	b.n	8004192 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800417a:	4b1a      	ldr	r3, [pc, #104]	; (80041e4 <_SendPacket+0x1c0>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	3301      	adds	r3, #1
 8004180:	b2da      	uxtb	r2, r3
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <_SendPacket+0x1c0>)
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e004      	b.n	8004192 <_SendPacket+0x16e>
    goto SendDone;
 8004188:	bf00      	nop
 800418a:	e002      	b.n	8004192 <_SendPacket+0x16e>
      goto SendDone;
 800418c:	bf00      	nop
 800418e:	e000      	b.n	8004192 <_SendPacket+0x16e>
      goto SendDone;
 8004190:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004192:	4b14      	ldr	r3, [pc, #80]	; (80041e4 <_SendPacket+0x1c0>)
 8004194:	7e1b      	ldrb	r3, [r3, #24]
 8004196:	4619      	mov	r1, r3
 8004198:	4a14      	ldr	r2, [pc, #80]	; (80041ec <_SendPacket+0x1c8>)
 800419a:	460b      	mov	r3, r1
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	440b      	add	r3, r1
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	4413      	add	r3, r2
 80041a4:	336c      	adds	r3, #108	; 0x6c
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	4b0e      	ldr	r3, [pc, #56]	; (80041e4 <_SendPacket+0x1c0>)
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
 80041ac:	4618      	mov	r0, r3
 80041ae:	490f      	ldr	r1, [pc, #60]	; (80041ec <_SendPacket+0x1c8>)
 80041b0:	4603      	mov	r3, r0
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4403      	add	r3, r0
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	3370      	adds	r3, #112	; 0x70
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d00b      	beq.n	80041da <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <_SendPacket+0x1c0>)
 80041c4:	789b      	ldrb	r3, [r3, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d107      	bne.n	80041da <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80041ca:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <_SendPacket+0x1c0>)
 80041cc:	2201      	movs	r2, #1
 80041ce:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80041d0:	f7ff fe46 	bl	8003e60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80041d4:	4b03      	ldr	r3, [pc, #12]	; (80041e4 <_SendPacket+0x1c0>)
 80041d6:	2200      	movs	r2, #0
 80041d8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80041da:	bf00      	nop
 80041dc:	3728      	adds	r7, #40	; 0x28
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20014368 	.word	0x20014368
 80041e8:	e0001004 	.word	0xe0001004
 80041ec:	20012ea8 	.word	0x20012ea8

080041f0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80041fe:	2300      	movs	r3, #0
 8004200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004204:	4917      	ldr	r1, [pc, #92]	; (8004264 <SEGGER_SYSVIEW_Init+0x74>)
 8004206:	4818      	ldr	r0, [pc, #96]	; (8004268 <SEGGER_SYSVIEW_Init+0x78>)
 8004208:	f7ff fcdc 	bl	8003bc4 <SEGGER_RTT_AllocUpBuffer>
 800420c:	4603      	mov	r3, r0
 800420e:	b2da      	uxtb	r2, r3
 8004210:	4b16      	ldr	r3, [pc, #88]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004212:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004216:	785a      	ldrb	r2, [r3, #1]
 8004218:	4b14      	ldr	r3, [pc, #80]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 800421a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800421c:	4b13      	ldr	r3, [pc, #76]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 800421e:	7e1b      	ldrb	r3, [r3, #24]
 8004220:	4618      	mov	r0, r3
 8004222:	2300      	movs	r3, #0
 8004224:	9300      	str	r3, [sp, #0]
 8004226:	2308      	movs	r3, #8
 8004228:	4a11      	ldr	r2, [pc, #68]	; (8004270 <SEGGER_SYSVIEW_Init+0x80>)
 800422a:	490f      	ldr	r1, [pc, #60]	; (8004268 <SEGGER_SYSVIEW_Init+0x78>)
 800422c:	f7ff fd4e 	bl	8003ccc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004230:	4b0e      	ldr	r3, [pc, #56]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004236:	4b0f      	ldr	r3, [pc, #60]	; (8004274 <SEGGER_SYSVIEW_Init+0x84>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a0c      	ldr	r2, [pc, #48]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 800423c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800423e:	4a0b      	ldr	r2, [pc, #44]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004244:	4a09      	ldr	r2, [pc, #36]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800424a:	4a08      	ldr	r2, [pc, #32]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004250:	4a06      	ldr	r2, [pc, #24]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004256:	4b05      	ldr	r3, [pc, #20]	; (800426c <SEGGER_SYSVIEW_Init+0x7c>)
 8004258:	2200      	movs	r2, #0
 800425a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800425c:	bf00      	nop
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	20013360 	.word	0x20013360
 8004268:	08005ea0 	.word	0x08005ea0
 800426c:	20014368 	.word	0x20014368
 8004270:	20014360 	.word	0x20014360
 8004274:	e0001004 	.word	0xe0001004

08004278 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6113      	str	r3, [r2, #16]
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	20014368 	.word	0x20014368

08004298 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80042a0:	f3ef 8311 	mrs	r3, BASEPRI
 80042a4:	f04f 0120 	mov.w	r1, #32
 80042a8:	f381 8811 	msr	BASEPRI, r1
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4808      	ldr	r0, [pc, #32]	; (80042d0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80042b0:	f7ff fdc9 	bl	8003e46 <_PreparePacket>
 80042b4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68b8      	ldr	r0, [r7, #8]
 80042bc:	f7ff feb2 	bl	8004024 <_SendPacket>
  RECORD_END();
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f383 8811 	msr	BASEPRI, r3
}
 80042c6:	bf00      	nop
 80042c8:	3710      	adds	r7, #16
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	20014398 	.word	0x20014398

080042d4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b088      	sub	sp, #32
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042de:	f3ef 8311 	mrs	r3, BASEPRI
 80042e2:	f04f 0120 	mov.w	r1, #32
 80042e6:	f381 8811 	msr	BASEPRI, r1
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	4816      	ldr	r0, [pc, #88]	; (8004348 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80042ee:	f7ff fdaa 	bl	8003e46 <_PreparePacket>
 80042f2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e00b      	b.n	800431a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	61f9      	str	r1, [r7, #28]
 800430c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	09db      	lsrs	r3, r3, #7
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b7f      	cmp	r3, #127	; 0x7f
 800431e:	d8f0      	bhi.n	8004302 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	61fa      	str	r2, [r7, #28]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	6938      	ldr	r0, [r7, #16]
 8004336:	f7ff fe75 	bl	8004024 <_SendPacket>
  RECORD_END();
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f383 8811 	msr	BASEPRI, r3
}
 8004340:	bf00      	nop
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20014398 	.word	0x20014398

0800434c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	; 0x30
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004358:	f3ef 8311 	mrs	r3, BASEPRI
 800435c:	f04f 0120 	mov.w	r1, #32
 8004360:	f381 8811 	msr	BASEPRI, r1
 8004364:	61fb      	str	r3, [r7, #28]
 8004366:	4825      	ldr	r0, [pc, #148]	; (80043fc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004368:	f7ff fd6d 	bl	8003e46 <_PreparePacket>
 800436c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	62bb      	str	r3, [r7, #40]	; 0x28
 800437a:	e00b      	b.n	8004394 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800437c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437e:	b2da      	uxtb	r2, r3
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	1c59      	adds	r1, r3, #1
 8004384:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004386:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	09db      	lsrs	r3, r3, #7
 8004392:	62bb      	str	r3, [r7, #40]	; 0x28
 8004394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004396:	2b7f      	cmp	r3, #127	; 0x7f
 8004398:	d8f0      	bhi.n	800437c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800439a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	627b      	str	r3, [r7, #36]	; 0x24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	623b      	str	r3, [r7, #32]
 80043b2:	e00b      	b.n	80043cc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80043b4:	6a3b      	ldr	r3, [r7, #32]
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	6279      	str	r1, [r7, #36]	; 0x24
 80043be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]
 80043c6:	6a3b      	ldr	r3, [r7, #32]
 80043c8:	09db      	lsrs	r3, r3, #7
 80043ca:	623b      	str	r3, [r7, #32]
 80043cc:	6a3b      	ldr	r3, [r7, #32]
 80043ce:	2b7f      	cmp	r3, #127	; 0x7f
 80043d0:	d8f0      	bhi.n	80043b4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80043d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	627a      	str	r2, [r7, #36]	; 0x24
 80043d8:	6a3a      	ldr	r2, [r7, #32]
 80043da:	b2d2      	uxtb	r2, r2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6979      	ldr	r1, [r7, #20]
 80043e6:	69b8      	ldr	r0, [r7, #24]
 80043e8:	f7ff fe1c 	bl	8004024 <_SendPacket>
  RECORD_END();
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f383 8811 	msr	BASEPRI, r3
}
 80043f2:	bf00      	nop
 80043f4:	3730      	adds	r7, #48	; 0x30
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	20014398 	.word	0x20014398

08004400 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004406:	4b58      	ldr	r3, [pc, #352]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800440c:	f3ef 8311 	mrs	r3, BASEPRI
 8004410:	f04f 0120 	mov.w	r1, #32
 8004414:	f381 8811 	msr	BASEPRI, r1
 8004418:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800441a:	4b53      	ldr	r3, [pc, #332]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	220a      	movs	r2, #10
 8004420:	4952      	ldr	r1, [pc, #328]	; (800456c <SEGGER_SYSVIEW_Start+0x16c>)
 8004422:	4618      	mov	r0, r3
 8004424:	f7fb fed4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800442e:	200a      	movs	r0, #10
 8004430:	f7ff ff32 	bl	8004298 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004434:	f3ef 8311 	mrs	r3, BASEPRI
 8004438:	f04f 0120 	mov.w	r1, #32
 800443c:	f381 8811 	msr	BASEPRI, r1
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	484b      	ldr	r0, [pc, #300]	; (8004570 <SEGGER_SYSVIEW_Start+0x170>)
 8004444:	f7ff fcff 	bl	8003e46 <_PreparePacket>
 8004448:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004452:	4b45      	ldr	r3, [pc, #276]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	62bb      	str	r3, [r7, #40]	; 0x28
 8004458:	e00b      	b.n	8004472 <SEGGER_SYSVIEW_Start+0x72>
 800445a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445c:	b2da      	uxtb	r2, r3
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	1c59      	adds	r1, r3, #1
 8004462:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004464:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446e:	09db      	lsrs	r3, r3, #7
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	2b7f      	cmp	r3, #127	; 0x7f
 8004476:	d8f0      	bhi.n	800445a <SEGGER_SYSVIEW_Start+0x5a>
 8004478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800447e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	701a      	strb	r2, [r3, #0]
 8004484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004486:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
 800448c:	4b36      	ldr	r3, [pc, #216]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	623b      	str	r3, [r7, #32]
 8004492:	e00b      	b.n	80044ac <SEGGER_SYSVIEW_Start+0xac>
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	b2da      	uxtb	r2, r3
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	6279      	str	r1, [r7, #36]	; 0x24
 800449e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	09db      	lsrs	r3, r3, #7
 80044aa:	623b      	str	r3, [r7, #32]
 80044ac:	6a3b      	ldr	r3, [r7, #32]
 80044ae:	2b7f      	cmp	r3, #127	; 0x7f
 80044b0:	d8f0      	bhi.n	8004494 <SEGGER_SYSVIEW_Start+0x94>
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	627a      	str	r2, [r7, #36]	; 0x24
 80044b8:	6a3a      	ldr	r2, [r7, #32]
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	61fb      	str	r3, [r7, #28]
 80044c6:	4b28      	ldr	r3, [pc, #160]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	61bb      	str	r3, [r7, #24]
 80044cc:	e00b      	b.n	80044e6 <SEGGER_SYSVIEW_Start+0xe6>
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	b2da      	uxtb	r2, r3
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	1c59      	adds	r1, r3, #1
 80044d6:	61f9      	str	r1, [r7, #28]
 80044d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	701a      	strb	r2, [r3, #0]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	09db      	lsrs	r3, r3, #7
 80044e4:	61bb      	str	r3, [r7, #24]
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b7f      	cmp	r3, #127	; 0x7f
 80044ea:	d8f0      	bhi.n	80044ce <SEGGER_SYSVIEW_Start+0xce>
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	61fa      	str	r2, [r7, #28]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	617b      	str	r3, [r7, #20]
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
 8004504:	e00b      	b.n	800451e <SEGGER_SYSVIEW_Start+0x11e>
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	b2da      	uxtb	r2, r3
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	1c59      	adds	r1, r3, #1
 800450e:	6179      	str	r1, [r7, #20]
 8004510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004514:	b2d2      	uxtb	r2, r2
 8004516:	701a      	strb	r2, [r3, #0]
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	09db      	lsrs	r3, r3, #7
 800451c:	613b      	str	r3, [r7, #16]
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	2b7f      	cmp	r3, #127	; 0x7f
 8004522:	d8f0      	bhi.n	8004506 <SEGGER_SYSVIEW_Start+0x106>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	617a      	str	r2, [r7, #20]
 800452a:	693a      	ldr	r2, [r7, #16]
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004534:	2218      	movs	r2, #24
 8004536:	6839      	ldr	r1, [r7, #0]
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fd73 	bl	8004024 <_SendPacket>
      RECORD_END();
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004544:	4b08      	ldr	r3, [pc, #32]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800454c:	4b06      	ldr	r3, [pc, #24]	; (8004568 <SEGGER_SYSVIEW_Start+0x168>)
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004552:	f000 f9eb 	bl	800492c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004556:	f000 f9b1 	bl	80048bc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800455a:	f000 fc13 	bl	8004d84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800455e:	bf00      	nop
 8004560:	3730      	adds	r7, #48	; 0x30
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20014368 	.word	0x20014368
 800456c:	08005ec8 	.word	0x08005ec8
 8004570:	20014398 	.word	0x20014398

08004574 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004574:	b580      	push	{r7, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800457a:	f3ef 8311 	mrs	r3, BASEPRI
 800457e:	f04f 0120 	mov.w	r1, #32
 8004582:	f381 8811 	msr	BASEPRI, r1
 8004586:	607b      	str	r3, [r7, #4]
 8004588:	480b      	ldr	r0, [pc, #44]	; (80045b8 <SEGGER_SYSVIEW_Stop+0x44>)
 800458a:	f7ff fc5c 	bl	8003e46 <_PreparePacket>
 800458e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <SEGGER_SYSVIEW_Stop+0x48>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d007      	beq.n	80045a8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004598:	220b      	movs	r2, #11
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	6838      	ldr	r0, [r7, #0]
 800459e:	f7ff fd41 	bl	8004024 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <SEGGER_SYSVIEW_Stop+0x48>)
 80045a4:	2200      	movs	r2, #0
 80045a6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f383 8811 	msr	BASEPRI, r3
}
 80045ae:	bf00      	nop
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
 80045b6:	bf00      	nop
 80045b8:	20014398 	.word	0x20014398
 80045bc:	20014368 	.word	0x20014368

080045c0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08c      	sub	sp, #48	; 0x30
 80045c4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80045c6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ca:	f04f 0120 	mov.w	r1, #32
 80045ce:	f381 8811 	msr	BASEPRI, r1
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	4845      	ldr	r0, [pc, #276]	; (80046ec <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80045d6:	f7ff fc36 	bl	8003e46 <_PreparePacket>
 80045da:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e4:	4b42      	ldr	r3, [pc, #264]	; (80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80045ea:	e00b      	b.n	8004604 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80045ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045fa:	b2d2      	uxtb	r2, r2
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004600:	09db      	lsrs	r3, r3, #7
 8004602:	62bb      	str	r3, [r7, #40]	; 0x28
 8004604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004606:	2b7f      	cmp	r3, #127	; 0x7f
 8004608:	d8f0      	bhi.n	80045ec <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800460a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004618:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	4b34      	ldr	r3, [pc, #208]	; (80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	623b      	str	r3, [r7, #32]
 8004624:	e00b      	b.n	800463e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	b2da      	uxtb	r2, r3
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	1c59      	adds	r1, r3, #1
 800462e:	6279      	str	r1, [r7, #36]	; 0x24
 8004630:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004634:	b2d2      	uxtb	r2, r2
 8004636:	701a      	strb	r2, [r3, #0]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	09db      	lsrs	r3, r3, #7
 800463c:	623b      	str	r3, [r7, #32]
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	2b7f      	cmp	r3, #127	; 0x7f
 8004642:	d8f0      	bhi.n	8004626 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	627a      	str	r2, [r7, #36]	; 0x24
 800464a:	6a3a      	ldr	r2, [r7, #32]
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	4b25      	ldr	r3, [pc, #148]	; (80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	61bb      	str	r3, [r7, #24]
 800465e:	e00b      	b.n	8004678 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	b2da      	uxtb	r2, r3
 8004664:	69fb      	ldr	r3, [r7, #28]
 8004666:	1c59      	adds	r1, r3, #1
 8004668:	61f9      	str	r1, [r7, #28]
 800466a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	09db      	lsrs	r3, r3, #7
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2b7f      	cmp	r3, #127	; 0x7f
 800467c:	d8f0      	bhi.n	8004660 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	61fa      	str	r2, [r7, #28]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	617b      	str	r3, [r7, #20]
 8004692:	2300      	movs	r3, #0
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	e00b      	b.n	80046b0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	b2da      	uxtb	r2, r3
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	1c59      	adds	r1, r3, #1
 80046a0:	6179      	str	r1, [r7, #20]
 80046a2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80046a6:	b2d2      	uxtb	r2, r2
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	09db      	lsrs	r3, r3, #7
 80046ae:	613b      	str	r3, [r7, #16]
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	2b7f      	cmp	r3, #127	; 0x7f
 80046b4:	d8f0      	bhi.n	8004698 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	617a      	str	r2, [r7, #20]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	b2d2      	uxtb	r2, r2
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80046c6:	2218      	movs	r2, #24
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	68b8      	ldr	r0, [r7, #8]
 80046cc:	f7ff fcaa 	bl	8004024 <_SendPacket>
  RECORD_END();
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80046d6:	4b06      	ldr	r3, [pc, #24]	; (80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d002      	beq.n	80046e4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80046de:	4b04      	ldr	r3, [pc, #16]	; (80046f0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80046e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e2:	4798      	blx	r3
  }
}
 80046e4:	bf00      	nop
 80046e6:	3730      	adds	r7, #48	; 0x30
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	20014398 	.word	0x20014398
 80046f0:	20014368 	.word	0x20014368

080046f4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b092      	sub	sp, #72	; 0x48
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80046fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004700:	f04f 0120 	mov.w	r1, #32
 8004704:	f381 8811 	msr	BASEPRI, r1
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	486a      	ldr	r0, [pc, #424]	; (80048b4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800470c:	f7ff fb9b 	bl	8003e46 <_PreparePacket>
 8004710:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	4b66      	ldr	r3, [pc, #408]	; (80048b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	643b      	str	r3, [r7, #64]	; 0x40
 8004726:	e00b      	b.n	8004740 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800472a:	b2da      	uxtb	r2, r3
 800472c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800472e:	1c59      	adds	r1, r3, #1
 8004730:	6479      	str	r1, [r7, #68]	; 0x44
 8004732:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800473c:	09db      	lsrs	r3, r3, #7
 800473e:	643b      	str	r3, [r7, #64]	; 0x40
 8004740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004742:	2b7f      	cmp	r3, #127	; 0x7f
 8004744:	d8f0      	bhi.n	8004728 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	647a      	str	r2, [r7, #68]	; 0x44
 800474c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800474e:	b2d2      	uxtb	r2, r2
 8004750:	701a      	strb	r2, [r3, #0]
 8004752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004754:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	63fb      	str	r3, [r7, #60]	; 0x3c
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004760:	e00b      	b.n	800477a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	b2da      	uxtb	r2, r3
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	1c59      	adds	r1, r3, #1
 800476a:	63f9      	str	r1, [r7, #60]	; 0x3c
 800476c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	701a      	strb	r2, [r3, #0]
 8004774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004776:	09db      	lsrs	r3, r3, #7
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	2b7f      	cmp	r3, #127	; 0x7f
 800477e:	d8f0      	bhi.n	8004762 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004786:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800478e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	4619      	mov	r1, r3
 8004798:	68f8      	ldr	r0, [r7, #12]
 800479a:	f7ff fb07 	bl	8003dac <_EncodeStr>
 800479e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80047a0:	2209      	movs	r2, #9
 80047a2:	68f9      	ldr	r1, [r7, #12]
 80047a4:	6938      	ldr	r0, [r7, #16]
 80047a6:	f7ff fc3d 	bl	8004024 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	637b      	str	r3, [r7, #52]	; 0x34
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b40      	ldr	r3, [pc, #256]	; (80048b8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	633b      	str	r3, [r7, #48]	; 0x30
 80047be:	e00b      	b.n	80047d8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80047c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047c6:	1c59      	adds	r1, r3, #1
 80047c8:	6379      	str	r1, [r7, #52]	; 0x34
 80047ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	701a      	strb	r2, [r3, #0]
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	09db      	lsrs	r3, r3, #7
 80047d6:	633b      	str	r3, [r7, #48]	; 0x30
 80047d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047da:	2b7f      	cmp	r3, #127	; 0x7f
 80047dc:	d8f0      	bhi.n	80047c0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	1c5a      	adds	r2, r3, #1
 80047e2:	637a      	str	r2, [r7, #52]	; 0x34
 80047e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80047f8:	e00b      	b.n	8004812 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	1c59      	adds	r1, r3, #1
 8004802:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004804:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004808:	b2d2      	uxtb	r2, r2
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800480e:	09db      	lsrs	r3, r3, #7
 8004810:	62bb      	str	r3, [r7, #40]	; 0x28
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2b7f      	cmp	r3, #127	; 0x7f
 8004816:	d8f0      	bhi.n	80047fa <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800481e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004826:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	627b      	str	r3, [r7, #36]	; 0x24
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	623b      	str	r3, [r7, #32]
 8004832:	e00b      	b.n	800484c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483a:	1c59      	adds	r1, r3, #1
 800483c:	6279      	str	r1, [r7, #36]	; 0x24
 800483e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	09db      	lsrs	r3, r3, #7
 800484a:	623b      	str	r3, [r7, #32]
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	2b7f      	cmp	r3, #127	; 0x7f
 8004850:	d8f0      	bhi.n	8004834 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	627a      	str	r2, [r7, #36]	; 0x24
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	e00b      	b.n	8004884 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800486c:	69bb      	ldr	r3, [r7, #24]
 800486e:	b2da      	uxtb	r2, r3
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1c59      	adds	r1, r3, #1
 8004874:	61f9      	str	r1, [r7, #28]
 8004876:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	09db      	lsrs	r3, r3, #7
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b7f      	cmp	r3, #127	; 0x7f
 8004888:	d8f0      	bhi.n	800486c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	61fa      	str	r2, [r7, #28]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800489a:	2215      	movs	r2, #21
 800489c:	68f9      	ldr	r1, [r7, #12]
 800489e:	6938      	ldr	r0, [r7, #16]
 80048a0:	f7ff fbc0 	bl	8004024 <_SendPacket>
  RECORD_END();
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f383 8811 	msr	BASEPRI, r3
}
 80048aa:	bf00      	nop
 80048ac:	3748      	adds	r7, #72	; 0x48
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20014398 	.word	0x20014398
 80048b8:	20014368 	.word	0x20014368

080048bc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d008      	beq.n	80048da <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80048c8:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048ca:	6a1b      	ldr	r3, [r3, #32]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80048d2:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4798      	blx	r3
  }
}
 80048da:	bf00      	nop
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20014368 	.word	0x20014368

080048e4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80048ec:	f3ef 8311 	mrs	r3, BASEPRI
 80048f0:	f04f 0120 	mov.w	r1, #32
 80048f4:	f381 8811 	msr	BASEPRI, r1
 80048f8:	617b      	str	r3, [r7, #20]
 80048fa:	480b      	ldr	r0, [pc, #44]	; (8004928 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80048fc:	f7ff faa3 	bl	8003e46 <_PreparePacket>
 8004900:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004902:	2280      	movs	r2, #128	; 0x80
 8004904:	6879      	ldr	r1, [r7, #4]
 8004906:	6938      	ldr	r0, [r7, #16]
 8004908:	f7ff fa50 	bl	8003dac <_EncodeStr>
 800490c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800490e:	220e      	movs	r2, #14
 8004910:	68f9      	ldr	r1, [r7, #12]
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f7ff fb86 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f383 8811 	msr	BASEPRI, r3
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	20014398 	.word	0x20014398

0800492c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800492c:	b590      	push	{r4, r7, lr}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004932:	4b15      	ldr	r3, [pc, #84]	; (8004988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d01a      	beq.n	8004970 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800493a:	4b13      	ldr	r3, [pc, #76]	; (8004988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d015      	beq.n	8004970 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004944:	4b10      	ldr	r3, [pc, #64]	; (8004988 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004946:	6a1b      	ldr	r3, [r3, #32]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4798      	blx	r3
 800494c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004950:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004952:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004956:	f04f 0200 	mov.w	r2, #0
 800495a:	f04f 0300 	mov.w	r3, #0
 800495e:	000a      	movs	r2, r1
 8004960:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004962:	4613      	mov	r3, r2
 8004964:	461a      	mov	r2, r3
 8004966:	4621      	mov	r1, r4
 8004968:	200d      	movs	r0, #13
 800496a:	f7ff fcef 	bl	800434c <SEGGER_SYSVIEW_RecordU32x2>
 800496e:	e006      	b.n	800497e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004970:	4b06      	ldr	r3, [pc, #24]	; (800498c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	200c      	movs	r0, #12
 8004978:	f7ff fcac 	bl	80042d4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	bd90      	pop	{r4, r7, pc}
 8004986:	bf00      	nop
 8004988:	20014368 	.word	0x20014368
 800498c:	e0001004 	.word	0xe0001004

08004990 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004996:	f3ef 8311 	mrs	r3, BASEPRI
 800499a:	f04f 0120 	mov.w	r1, #32
 800499e:	f381 8811 	msr	BASEPRI, r1
 80049a2:	60fb      	str	r3, [r7, #12]
 80049a4:	4819      	ldr	r0, [pc, #100]	; (8004a0c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80049a6:	f7ff fa4e 	bl	8003e46 <_PreparePacket>
 80049aa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80049b0:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049b8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e00b      	b.n	80049dc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	1c59      	adds	r1, r3, #1
 80049cc:	6179      	str	r1, [r7, #20]
 80049ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d2:	b2d2      	uxtb	r2, r2
 80049d4:	701a      	strb	r2, [r3, #0]
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	09db      	lsrs	r3, r3, #7
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b7f      	cmp	r3, #127	; 0x7f
 80049e0:	d8f0      	bhi.n	80049c4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	617a      	str	r2, [r7, #20]
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80049f2:	2202      	movs	r2, #2
 80049f4:	6879      	ldr	r1, [r7, #4]
 80049f6:	68b8      	ldr	r0, [r7, #8]
 80049f8:	f7ff fb14 	bl	8004024 <_SendPacket>
  RECORD_END();
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f383 8811 	msr	BASEPRI, r3
}
 8004a02:	bf00      	nop
 8004a04:	3718      	adds	r7, #24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20014398 	.word	0x20014398
 8004a10:	e000ed04 	.word	0xe000ed04

08004a14 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a1a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a1e:	f04f 0120 	mov.w	r1, #32
 8004a22:	f381 8811 	msr	BASEPRI, r1
 8004a26:	607b      	str	r3, [r7, #4]
 8004a28:	4807      	ldr	r0, [pc, #28]	; (8004a48 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004a2a:	f7ff fa0c 	bl	8003e46 <_PreparePacket>
 8004a2e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004a30:	2203      	movs	r2, #3
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6838      	ldr	r0, [r7, #0]
 8004a36:	f7ff faf5 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f383 8811 	msr	BASEPRI, r3
}
 8004a40:	bf00      	nop
 8004a42:	3708      	adds	r7, #8
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20014398 	.word	0x20014398

08004a4c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a52:	f3ef 8311 	mrs	r3, BASEPRI
 8004a56:	f04f 0120 	mov.w	r1, #32
 8004a5a:	f381 8811 	msr	BASEPRI, r1
 8004a5e:	607b      	str	r3, [r7, #4]
 8004a60:	4807      	ldr	r0, [pc, #28]	; (8004a80 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004a62:	f7ff f9f0 	bl	8003e46 <_PreparePacket>
 8004a66:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004a68:	2212      	movs	r2, #18
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	6838      	ldr	r0, [r7, #0]
 8004a6e:	f7ff fad9 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f383 8811 	msr	BASEPRI, r3
}
 8004a78:	bf00      	nop
 8004a7a:	3708      	adds	r7, #8
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20014398 	.word	0x20014398

08004a84 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004a8e:	f04f 0120 	mov.w	r1, #32
 8004a92:	f381 8811 	msr	BASEPRI, r1
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	4807      	ldr	r0, [pc, #28]	; (8004ab8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004a9a:	f7ff f9d4 	bl	8003e46 <_PreparePacket>
 8004a9e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004aa0:	2211      	movs	r2, #17
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	6838      	ldr	r0, [r7, #0]
 8004aa6:	f7ff fabd 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f383 8811 	msr	BASEPRI, r3
}
 8004ab0:	bf00      	nop
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20014398 	.word	0x20014398

08004abc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b088      	sub	sp, #32
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac8:	f04f 0120 	mov.w	r1, #32
 8004acc:	f381 8811 	msr	BASEPRI, r1
 8004ad0:	617b      	str	r3, [r7, #20]
 8004ad2:	4819      	ldr	r0, [pc, #100]	; (8004b38 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004ad4:	f7ff f9b7 	bl	8003e46 <_PreparePacket>
 8004ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004ade:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	61fb      	str	r3, [r7, #28]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	61bb      	str	r3, [r7, #24]
 8004af0:	e00b      	b.n	8004b0a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	1c59      	adds	r1, r3, #1
 8004afa:	61f9      	str	r1, [r7, #28]
 8004afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	09db      	lsrs	r3, r3, #7
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004b0e:	d8f0      	bhi.n	8004af2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	61fa      	str	r2, [r7, #28]
 8004b16:	69ba      	ldr	r2, [r7, #24]
 8004b18:	b2d2      	uxtb	r2, r2
 8004b1a:	701a      	strb	r2, [r3, #0]
 8004b1c:	69fb      	ldr	r3, [r7, #28]
 8004b1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004b20:	2208      	movs	r2, #8
 8004b22:	68f9      	ldr	r1, [r7, #12]
 8004b24:	6938      	ldr	r0, [r7, #16]
 8004b26:	f7ff fa7d 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f383 8811 	msr	BASEPRI, r3
}
 8004b30:	bf00      	nop
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	20014398 	.word	0x20014398
 8004b3c:	20014368 	.word	0x20014368

08004b40 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b088      	sub	sp, #32
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004b48:	f3ef 8311 	mrs	r3, BASEPRI
 8004b4c:	f04f 0120 	mov.w	r1, #32
 8004b50:	f381 8811 	msr	BASEPRI, r1
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	4819      	ldr	r0, [pc, #100]	; (8004bbc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004b58:	f7ff f975 	bl	8003e46 <_PreparePacket>
 8004b5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61bb      	str	r3, [r7, #24]
 8004b74:	e00b      	b.n	8004b8e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	1c59      	adds	r1, r3, #1
 8004b7e:	61f9      	str	r1, [r7, #28]
 8004b80:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	701a      	strb	r2, [r3, #0]
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	09db      	lsrs	r3, r3, #7
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	2b7f      	cmp	r3, #127	; 0x7f
 8004b92:	d8f0      	bhi.n	8004b76 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	b2d2      	uxtb	r2, r2
 8004b9e:	701a      	strb	r2, [r3, #0]
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004ba4:	2204      	movs	r2, #4
 8004ba6:	68f9      	ldr	r1, [r7, #12]
 8004ba8:	6938      	ldr	r0, [r7, #16]
 8004baa:	f7ff fa3b 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f383 8811 	msr	BASEPRI, r3
}
 8004bb4:	bf00      	nop
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	20014398 	.word	0x20014398
 8004bc0:	20014368 	.word	0x20014368

08004bc4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b088      	sub	sp, #32
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004bcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004bd0:	f04f 0120 	mov.w	r1, #32
 8004bd4:	f381 8811 	msr	BASEPRI, r1
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	4819      	ldr	r0, [pc, #100]	; (8004c40 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004bdc:	f7ff f933 	bl	8003e46 <_PreparePacket>
 8004be0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004be6:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	61fb      	str	r3, [r7, #28]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	61bb      	str	r3, [r7, #24]
 8004bf8:	e00b      	b.n	8004c12 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	1c59      	adds	r1, r3, #1
 8004c02:	61f9      	str	r1, [r7, #28]
 8004c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c08:	b2d2      	uxtb	r2, r2
 8004c0a:	701a      	strb	r2, [r3, #0]
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	09db      	lsrs	r3, r3, #7
 8004c10:	61bb      	str	r3, [r7, #24]
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	2b7f      	cmp	r3, #127	; 0x7f
 8004c16:	d8f0      	bhi.n	8004bfa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	1c5a      	adds	r2, r3, #1
 8004c1c:	61fa      	str	r2, [r7, #28]
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004c28:	2206      	movs	r2, #6
 8004c2a:	68f9      	ldr	r1, [r7, #12]
 8004c2c:	6938      	ldr	r0, [r7, #16]
 8004c2e:	f7ff f9f9 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f383 8811 	msr	BASEPRI, r3
}
 8004c38:	bf00      	nop
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20014398 	.word	0x20014398
 8004c44:	20014368 	.word	0x20014368

08004c48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b08c      	sub	sp, #48	; 0x30
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	4603      	mov	r3, r0
 8004c50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004c52:	4b3b      	ldr	r3, [pc, #236]	; (8004d40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d06d      	beq.n	8004d36 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004c5a:	4b39      	ldr	r3, [pc, #228]	; (8004d40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004c60:	2300      	movs	r3, #0
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c64:	e008      	b.n	8004c78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	3301      	adds	r3, #1
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d3f2      	bcc.n	8004c66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004c80:	e000      	b.n	8004c84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004c82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d055      	beq.n	8004d36 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8e:	f04f 0120 	mov.w	r1, #32
 8004c92:	f381 8811 	msr	BASEPRI, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	482a      	ldr	r0, [pc, #168]	; (8004d44 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004c9a:	f7ff f8d4 	bl	8003e46 <_PreparePacket>
 8004c9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	623b      	str	r3, [r7, #32]
 8004cac:	e00b      	b.n	8004cc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004cae:	6a3b      	ldr	r3, [r7, #32]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	1c59      	adds	r1, r3, #1
 8004cb6:	6279      	str	r1, [r7, #36]	; 0x24
 8004cb8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cbc:	b2d2      	uxtb	r2, r2
 8004cbe:	701a      	strb	r2, [r3, #0]
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	09db      	lsrs	r3, r3, #7
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	2b7f      	cmp	r3, #127	; 0x7f
 8004cca:	d8f0      	bhi.n	8004cae <SEGGER_SYSVIEW_SendModule+0x66>
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	627a      	str	r2, [r7, #36]	; 0x24
 8004cd2:	6a3a      	ldr	r2, [r7, #32]
 8004cd4:	b2d2      	uxtb	r2, r2
 8004cd6:	701a      	strb	r2, [r3, #0]
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	61fb      	str	r3, [r7, #28]
 8004ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	61bb      	str	r3, [r7, #24]
 8004ce6:	e00b      	b.n	8004d00 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	b2da      	uxtb	r2, r3
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	1c59      	adds	r1, r3, #1
 8004cf0:	61f9      	str	r1, [r7, #28]
 8004cf2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	61bb      	str	r3, [r7, #24]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	2b7f      	cmp	r3, #127	; 0x7f
 8004d04:	d8f0      	bhi.n	8004ce8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	1c5a      	adds	r2, r3, #1
 8004d0a:	61fa      	str	r2, [r7, #28]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2280      	movs	r2, #128	; 0x80
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff f844 	bl	8003dac <_EncodeStr>
 8004d24:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004d26:	2216      	movs	r2, #22
 8004d28:	68f9      	ldr	r1, [r7, #12]
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f7ff f97a 	bl	8004024 <_SendPacket>
      RECORD_END();
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004d36:	bf00      	nop
 8004d38:	3730      	adds	r7, #48	; 0x30
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20014390 	.word	0x20014390
 8004d44:	20014398 	.word	0x20014398

08004d48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004d4e:	4b0c      	ldr	r3, [pc, #48]	; (8004d80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00f      	beq.n	8004d76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004d56:	4b0a      	ldr	r3, [pc, #40]	; (8004d80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1f2      	bne.n	8004d5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004d76:	bf00      	nop
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	20014390 	.word	0x20014390

08004d84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8004d8e:	f04f 0120 	mov.w	r1, #32
 8004d92:	f381 8811 	msr	BASEPRI, r1
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	4817      	ldr	r0, [pc, #92]	; (8004df8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004d9a:	f7ff f854 	bl	8003e46 <_PreparePacket>
 8004d9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	4b14      	ldr	r3, [pc, #80]	; (8004dfc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	e00b      	b.n	8004dc8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	1c59      	adds	r1, r3, #1
 8004db8:	6179      	str	r1, [r7, #20]
 8004dba:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	09db      	lsrs	r3, r3, #7
 8004dc6:	613b      	str	r3, [r7, #16]
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b7f      	cmp	r3, #127	; 0x7f
 8004dcc:	d8f0      	bhi.n	8004db0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	1c5a      	adds	r2, r3, #1
 8004dd2:	617a      	str	r2, [r7, #20]
 8004dd4:	693a      	ldr	r2, [r7, #16]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004dde:	221b      	movs	r2, #27
 8004de0:	6879      	ldr	r1, [r7, #4]
 8004de2:	68b8      	ldr	r0, [r7, #8]
 8004de4:	f7ff f91e 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f383 8811 	msr	BASEPRI, r3
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	20014398 	.word	0x20014398
 8004dfc:	20014394 	.word	0x20014394

08004e00 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e08:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0c:	f04f 0120 	mov.w	r1, #32
 8004e10:	f381 8811 	msr	BASEPRI, r1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	4827      	ldr	r0, [pc, #156]	; (8004eb4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004e18:	f7ff f815 	bl	8003e46 <_PreparePacket>
 8004e1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e1e:	2280      	movs	r2, #128	; 0x80
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	6938      	ldr	r0, [r7, #16]
 8004e24:	f7fe ffc2 	bl	8003dac <_EncodeStr>
 8004e28:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e2e:	2301      	movs	r3, #1
 8004e30:	623b      	str	r3, [r7, #32]
 8004e32:	e00b      	b.n	8004e4c <SEGGER_SYSVIEW_Warn+0x4c>
 8004e34:	6a3b      	ldr	r3, [r7, #32]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3a:	1c59      	adds	r1, r3, #1
 8004e3c:	6279      	str	r1, [r7, #36]	; 0x24
 8004e3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e42:	b2d2      	uxtb	r2, r2
 8004e44:	701a      	strb	r2, [r3, #0]
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	09db      	lsrs	r3, r3, #7
 8004e4a:	623b      	str	r3, [r7, #32]
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	2b7f      	cmp	r3, #127	; 0x7f
 8004e50:	d8f0      	bhi.n	8004e34 <SEGGER_SYSVIEW_Warn+0x34>
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	627a      	str	r2, [r7, #36]	; 0x24
 8004e58:	6a3a      	ldr	r2, [r7, #32]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	2300      	movs	r3, #0
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	e00b      	b.n	8004e84 <SEGGER_SYSVIEW_Warn+0x84>
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	1c59      	adds	r1, r3, #1
 8004e74:	61f9      	str	r1, [r7, #28]
 8004e76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	09db      	lsrs	r3, r3, #7
 8004e82:	61bb      	str	r3, [r7, #24]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b7f      	cmp	r3, #127	; 0x7f
 8004e88:	d8f0      	bhi.n	8004e6c <SEGGER_SYSVIEW_Warn+0x6c>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	1c5a      	adds	r2, r3, #1
 8004e8e:	61fa      	str	r2, [r7, #28]
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004e9a:	221a      	movs	r2, #26
 8004e9c:	68f9      	ldr	r1, [r7, #12]
 8004e9e:	6938      	ldr	r0, [r7, #16]
 8004ea0:	f7ff f8c0 	bl	8004024 <_SendPacket>
  RECORD_END();
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	f383 8811 	msr	BASEPRI, r3
}
 8004eaa:	bf00      	nop
 8004eac:	3728      	adds	r7, #40	; 0x28
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20014398 	.word	0x20014398

08004eb8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	6879      	ldr	r1, [r7, #4]
 8004eca:	2000      	movs	r0, #0
 8004ecc:	f7fe fe54 	bl	8003b78 <SEGGER_RTT_Write>
  return len;
 8004ed0:	683b      	ldr	r3, [r7, #0]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
	...

08004edc <std>:
 8004edc:	2300      	movs	r3, #0
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ee6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004eea:	6083      	str	r3, [r0, #8]
 8004eec:	8181      	strh	r1, [r0, #12]
 8004eee:	6643      	str	r3, [r0, #100]	; 0x64
 8004ef0:	81c2      	strh	r2, [r0, #14]
 8004ef2:	6183      	str	r3, [r0, #24]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	2208      	movs	r2, #8
 8004ef8:	305c      	adds	r0, #92	; 0x5c
 8004efa:	f000 f916 	bl	800512a <memset>
 8004efe:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <std+0x58>)
 8004f00:	6263      	str	r3, [r4, #36]	; 0x24
 8004f02:	4b0d      	ldr	r3, [pc, #52]	; (8004f38 <std+0x5c>)
 8004f04:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f06:	4b0d      	ldr	r3, [pc, #52]	; (8004f3c <std+0x60>)
 8004f08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	; (8004f40 <std+0x64>)
 8004f0c:	6323      	str	r3, [r4, #48]	; 0x30
 8004f0e:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <std+0x68>)
 8004f10:	6224      	str	r4, [r4, #32]
 8004f12:	429c      	cmp	r4, r3
 8004f14:	d006      	beq.n	8004f24 <std+0x48>
 8004f16:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004f1a:	4294      	cmp	r4, r2
 8004f1c:	d002      	beq.n	8004f24 <std+0x48>
 8004f1e:	33d0      	adds	r3, #208	; 0xd0
 8004f20:	429c      	cmp	r4, r3
 8004f22:	d105      	bne.n	8004f30 <std+0x54>
 8004f24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f2c:	f000 b95e 	b.w	80051ec <__retarget_lock_init_recursive>
 8004f30:	bd10      	pop	{r4, pc}
 8004f32:	bf00      	nop
 8004f34:	08005085 	.word	0x08005085
 8004f38:	080050a7 	.word	0x080050a7
 8004f3c:	080050df 	.word	0x080050df
 8004f40:	08005103 	.word	0x08005103
 8004f44:	2001447c 	.word	0x2001447c

08004f48 <stdio_exit_handler>:
 8004f48:	4a02      	ldr	r2, [pc, #8]	; (8004f54 <stdio_exit_handler+0xc>)
 8004f4a:	4903      	ldr	r1, [pc, #12]	; (8004f58 <stdio_exit_handler+0x10>)
 8004f4c:	4803      	ldr	r0, [pc, #12]	; (8004f5c <stdio_exit_handler+0x14>)
 8004f4e:	f000 b869 	b.w	8005024 <_fwalk_sglue>
 8004f52:	bf00      	nop
 8004f54:	20000014 	.word	0x20000014
 8004f58:	08005ab5 	.word	0x08005ab5
 8004f5c:	20000020 	.word	0x20000020

08004f60 <cleanup_stdio>:
 8004f60:	6841      	ldr	r1, [r0, #4]
 8004f62:	4b0c      	ldr	r3, [pc, #48]	; (8004f94 <cleanup_stdio+0x34>)
 8004f64:	4299      	cmp	r1, r3
 8004f66:	b510      	push	{r4, lr}
 8004f68:	4604      	mov	r4, r0
 8004f6a:	d001      	beq.n	8004f70 <cleanup_stdio+0x10>
 8004f6c:	f000 fda2 	bl	8005ab4 <_fflush_r>
 8004f70:	68a1      	ldr	r1, [r4, #8]
 8004f72:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <cleanup_stdio+0x38>)
 8004f74:	4299      	cmp	r1, r3
 8004f76:	d002      	beq.n	8004f7e <cleanup_stdio+0x1e>
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f000 fd9b 	bl	8005ab4 <_fflush_r>
 8004f7e:	68e1      	ldr	r1, [r4, #12]
 8004f80:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <cleanup_stdio+0x3c>)
 8004f82:	4299      	cmp	r1, r3
 8004f84:	d004      	beq.n	8004f90 <cleanup_stdio+0x30>
 8004f86:	4620      	mov	r0, r4
 8004f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f8c:	f000 bd92 	b.w	8005ab4 <_fflush_r>
 8004f90:	bd10      	pop	{r4, pc}
 8004f92:	bf00      	nop
 8004f94:	2001447c 	.word	0x2001447c
 8004f98:	200144e4 	.word	0x200144e4
 8004f9c:	2001454c 	.word	0x2001454c

08004fa0 <global_stdio_init.part.0>:
 8004fa0:	b510      	push	{r4, lr}
 8004fa2:	4b0b      	ldr	r3, [pc, #44]	; (8004fd0 <global_stdio_init.part.0+0x30>)
 8004fa4:	4c0b      	ldr	r4, [pc, #44]	; (8004fd4 <global_stdio_init.part.0+0x34>)
 8004fa6:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <global_stdio_init.part.0+0x38>)
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	4620      	mov	r0, r4
 8004fac:	2200      	movs	r2, #0
 8004fae:	2104      	movs	r1, #4
 8004fb0:	f7ff ff94 	bl	8004edc <std>
 8004fb4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004fb8:	2201      	movs	r2, #1
 8004fba:	2109      	movs	r1, #9
 8004fbc:	f7ff ff8e 	bl	8004edc <std>
 8004fc0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004fc4:	2202      	movs	r2, #2
 8004fc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fca:	2112      	movs	r1, #18
 8004fcc:	f7ff bf86 	b.w	8004edc <std>
 8004fd0:	200145b4 	.word	0x200145b4
 8004fd4:	2001447c 	.word	0x2001447c
 8004fd8:	08004f49 	.word	0x08004f49

08004fdc <__sfp_lock_acquire>:
 8004fdc:	4801      	ldr	r0, [pc, #4]	; (8004fe4 <__sfp_lock_acquire+0x8>)
 8004fde:	f000 b906 	b.w	80051ee <__retarget_lock_acquire_recursive>
 8004fe2:	bf00      	nop
 8004fe4:	200145bd 	.word	0x200145bd

08004fe8 <__sfp_lock_release>:
 8004fe8:	4801      	ldr	r0, [pc, #4]	; (8004ff0 <__sfp_lock_release+0x8>)
 8004fea:	f000 b901 	b.w	80051f0 <__retarget_lock_release_recursive>
 8004fee:	bf00      	nop
 8004ff0:	200145bd 	.word	0x200145bd

08004ff4 <__sinit>:
 8004ff4:	b510      	push	{r4, lr}
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	f7ff fff0 	bl	8004fdc <__sfp_lock_acquire>
 8004ffc:	6a23      	ldr	r3, [r4, #32]
 8004ffe:	b11b      	cbz	r3, 8005008 <__sinit+0x14>
 8005000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005004:	f7ff bff0 	b.w	8004fe8 <__sfp_lock_release>
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <__sinit+0x28>)
 800500a:	6223      	str	r3, [r4, #32]
 800500c:	4b04      	ldr	r3, [pc, #16]	; (8005020 <__sinit+0x2c>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f5      	bne.n	8005000 <__sinit+0xc>
 8005014:	f7ff ffc4 	bl	8004fa0 <global_stdio_init.part.0>
 8005018:	e7f2      	b.n	8005000 <__sinit+0xc>
 800501a:	bf00      	nop
 800501c:	08004f61 	.word	0x08004f61
 8005020:	200145b4 	.word	0x200145b4

08005024 <_fwalk_sglue>:
 8005024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005028:	4607      	mov	r7, r0
 800502a:	4688      	mov	r8, r1
 800502c:	4614      	mov	r4, r2
 800502e:	2600      	movs	r6, #0
 8005030:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005034:	f1b9 0901 	subs.w	r9, r9, #1
 8005038:	d505      	bpl.n	8005046 <_fwalk_sglue+0x22>
 800503a:	6824      	ldr	r4, [r4, #0]
 800503c:	2c00      	cmp	r4, #0
 800503e:	d1f7      	bne.n	8005030 <_fwalk_sglue+0xc>
 8005040:	4630      	mov	r0, r6
 8005042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005046:	89ab      	ldrh	r3, [r5, #12]
 8005048:	2b01      	cmp	r3, #1
 800504a:	d907      	bls.n	800505c <_fwalk_sglue+0x38>
 800504c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005050:	3301      	adds	r3, #1
 8005052:	d003      	beq.n	800505c <_fwalk_sglue+0x38>
 8005054:	4629      	mov	r1, r5
 8005056:	4638      	mov	r0, r7
 8005058:	47c0      	blx	r8
 800505a:	4306      	orrs	r6, r0
 800505c:	3568      	adds	r5, #104	; 0x68
 800505e:	e7e9      	b.n	8005034 <_fwalk_sglue+0x10>

08005060 <iprintf>:
 8005060:	b40f      	push	{r0, r1, r2, r3}
 8005062:	b507      	push	{r0, r1, r2, lr}
 8005064:	4906      	ldr	r1, [pc, #24]	; (8005080 <iprintf+0x20>)
 8005066:	ab04      	add	r3, sp, #16
 8005068:	6808      	ldr	r0, [r1, #0]
 800506a:	f853 2b04 	ldr.w	r2, [r3], #4
 800506e:	6881      	ldr	r1, [r0, #8]
 8005070:	9301      	str	r3, [sp, #4]
 8005072:	f000 f9ef 	bl	8005454 <_vfiprintf_r>
 8005076:	b003      	add	sp, #12
 8005078:	f85d eb04 	ldr.w	lr, [sp], #4
 800507c:	b004      	add	sp, #16
 800507e:	4770      	bx	lr
 8005080:	2000006c 	.word	0x2000006c

08005084 <__sread>:
 8005084:	b510      	push	{r4, lr}
 8005086:	460c      	mov	r4, r1
 8005088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800508c:	f000 f878 	bl	8005180 <_read_r>
 8005090:	2800      	cmp	r0, #0
 8005092:	bfab      	itete	ge
 8005094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005096:	89a3      	ldrhlt	r3, [r4, #12]
 8005098:	181b      	addge	r3, r3, r0
 800509a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800509e:	bfac      	ite	ge
 80050a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80050a2:	81a3      	strhlt	r3, [r4, #12]
 80050a4:	bd10      	pop	{r4, pc}

080050a6 <__swrite>:
 80050a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050aa:	461f      	mov	r7, r3
 80050ac:	898b      	ldrh	r3, [r1, #12]
 80050ae:	05db      	lsls	r3, r3, #23
 80050b0:	4605      	mov	r5, r0
 80050b2:	460c      	mov	r4, r1
 80050b4:	4616      	mov	r6, r2
 80050b6:	d505      	bpl.n	80050c4 <__swrite+0x1e>
 80050b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050bc:	2302      	movs	r3, #2
 80050be:	2200      	movs	r2, #0
 80050c0:	f000 f84c 	bl	800515c <_lseek_r>
 80050c4:	89a3      	ldrh	r3, [r4, #12]
 80050c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ce:	81a3      	strh	r3, [r4, #12]
 80050d0:	4632      	mov	r2, r6
 80050d2:	463b      	mov	r3, r7
 80050d4:	4628      	mov	r0, r5
 80050d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050da:	f7ff beed 	b.w	8004eb8 <_write_r>

080050de <__sseek>:
 80050de:	b510      	push	{r4, lr}
 80050e0:	460c      	mov	r4, r1
 80050e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e6:	f000 f839 	bl	800515c <_lseek_r>
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	89a3      	ldrh	r3, [r4, #12]
 80050ee:	bf15      	itete	ne
 80050f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80050f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050fa:	81a3      	strheq	r3, [r4, #12]
 80050fc:	bf18      	it	ne
 80050fe:	81a3      	strhne	r3, [r4, #12]
 8005100:	bd10      	pop	{r4, pc}

08005102 <__sclose>:
 8005102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005106:	f000 b819 	b.w	800513c <_close_r>

0800510a <memcmp>:
 800510a:	b510      	push	{r4, lr}
 800510c:	3901      	subs	r1, #1
 800510e:	4402      	add	r2, r0
 8005110:	4290      	cmp	r0, r2
 8005112:	d101      	bne.n	8005118 <memcmp+0xe>
 8005114:	2000      	movs	r0, #0
 8005116:	e005      	b.n	8005124 <memcmp+0x1a>
 8005118:	7803      	ldrb	r3, [r0, #0]
 800511a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800511e:	42a3      	cmp	r3, r4
 8005120:	d001      	beq.n	8005126 <memcmp+0x1c>
 8005122:	1b18      	subs	r0, r3, r4
 8005124:	bd10      	pop	{r4, pc}
 8005126:	3001      	adds	r0, #1
 8005128:	e7f2      	b.n	8005110 <memcmp+0x6>

0800512a <memset>:
 800512a:	4402      	add	r2, r0
 800512c:	4603      	mov	r3, r0
 800512e:	4293      	cmp	r3, r2
 8005130:	d100      	bne.n	8005134 <memset+0xa>
 8005132:	4770      	bx	lr
 8005134:	f803 1b01 	strb.w	r1, [r3], #1
 8005138:	e7f9      	b.n	800512e <memset+0x4>
	...

0800513c <_close_r>:
 800513c:	b538      	push	{r3, r4, r5, lr}
 800513e:	4d06      	ldr	r5, [pc, #24]	; (8005158 <_close_r+0x1c>)
 8005140:	2300      	movs	r3, #0
 8005142:	4604      	mov	r4, r0
 8005144:	4608      	mov	r0, r1
 8005146:	602b      	str	r3, [r5, #0]
 8005148:	f7fb fd91 	bl	8000c6e <_close>
 800514c:	1c43      	adds	r3, r0, #1
 800514e:	d102      	bne.n	8005156 <_close_r+0x1a>
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	b103      	cbz	r3, 8005156 <_close_r+0x1a>
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	bd38      	pop	{r3, r4, r5, pc}
 8005158:	200145b8 	.word	0x200145b8

0800515c <_lseek_r>:
 800515c:	b538      	push	{r3, r4, r5, lr}
 800515e:	4d07      	ldr	r5, [pc, #28]	; (800517c <_lseek_r+0x20>)
 8005160:	4604      	mov	r4, r0
 8005162:	4608      	mov	r0, r1
 8005164:	4611      	mov	r1, r2
 8005166:	2200      	movs	r2, #0
 8005168:	602a      	str	r2, [r5, #0]
 800516a:	461a      	mov	r2, r3
 800516c:	f7fb fda6 	bl	8000cbc <_lseek>
 8005170:	1c43      	adds	r3, r0, #1
 8005172:	d102      	bne.n	800517a <_lseek_r+0x1e>
 8005174:	682b      	ldr	r3, [r5, #0]
 8005176:	b103      	cbz	r3, 800517a <_lseek_r+0x1e>
 8005178:	6023      	str	r3, [r4, #0]
 800517a:	bd38      	pop	{r3, r4, r5, pc}
 800517c:	200145b8 	.word	0x200145b8

08005180 <_read_r>:
 8005180:	b538      	push	{r3, r4, r5, lr}
 8005182:	4d07      	ldr	r5, [pc, #28]	; (80051a0 <_read_r+0x20>)
 8005184:	4604      	mov	r4, r0
 8005186:	4608      	mov	r0, r1
 8005188:	4611      	mov	r1, r2
 800518a:	2200      	movs	r2, #0
 800518c:	602a      	str	r2, [r5, #0]
 800518e:	461a      	mov	r2, r3
 8005190:	f7fb fd50 	bl	8000c34 <_read>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d102      	bne.n	800519e <_read_r+0x1e>
 8005198:	682b      	ldr	r3, [r5, #0]
 800519a:	b103      	cbz	r3, 800519e <_read_r+0x1e>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	bd38      	pop	{r3, r4, r5, pc}
 80051a0:	200145b8 	.word	0x200145b8

080051a4 <__libc_init_array>:
 80051a4:	b570      	push	{r4, r5, r6, lr}
 80051a6:	4d0d      	ldr	r5, [pc, #52]	; (80051dc <__libc_init_array+0x38>)
 80051a8:	4c0d      	ldr	r4, [pc, #52]	; (80051e0 <__libc_init_array+0x3c>)
 80051aa:	1b64      	subs	r4, r4, r5
 80051ac:	10a4      	asrs	r4, r4, #2
 80051ae:	2600      	movs	r6, #0
 80051b0:	42a6      	cmp	r6, r4
 80051b2:	d109      	bne.n	80051c8 <__libc_init_array+0x24>
 80051b4:	4d0b      	ldr	r5, [pc, #44]	; (80051e4 <__libc_init_array+0x40>)
 80051b6:	4c0c      	ldr	r4, [pc, #48]	; (80051e8 <__libc_init_array+0x44>)
 80051b8:	f000 fddc 	bl	8005d74 <_init>
 80051bc:	1b64      	subs	r4, r4, r5
 80051be:	10a4      	asrs	r4, r4, #2
 80051c0:	2600      	movs	r6, #0
 80051c2:	42a6      	cmp	r6, r4
 80051c4:	d105      	bne.n	80051d2 <__libc_init_array+0x2e>
 80051c6:	bd70      	pop	{r4, r5, r6, pc}
 80051c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80051cc:	4798      	blx	r3
 80051ce:	3601      	adds	r6, #1
 80051d0:	e7ee      	b.n	80051b0 <__libc_init_array+0xc>
 80051d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80051d6:	4798      	blx	r3
 80051d8:	3601      	adds	r6, #1
 80051da:	e7f2      	b.n	80051c2 <__libc_init_array+0x1e>
 80051dc:	08005f10 	.word	0x08005f10
 80051e0:	08005f10 	.word	0x08005f10
 80051e4:	08005f10 	.word	0x08005f10
 80051e8:	08005f14 	.word	0x08005f14

080051ec <__retarget_lock_init_recursive>:
 80051ec:	4770      	bx	lr

080051ee <__retarget_lock_acquire_recursive>:
 80051ee:	4770      	bx	lr

080051f0 <__retarget_lock_release_recursive>:
 80051f0:	4770      	bx	lr

080051f2 <memcpy>:
 80051f2:	440a      	add	r2, r1
 80051f4:	4291      	cmp	r1, r2
 80051f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80051fa:	d100      	bne.n	80051fe <memcpy+0xc>
 80051fc:	4770      	bx	lr
 80051fe:	b510      	push	{r4, lr}
 8005200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005208:	4291      	cmp	r1, r2
 800520a:	d1f9      	bne.n	8005200 <memcpy+0xe>
 800520c:	bd10      	pop	{r4, pc}
	...

08005210 <_free_r>:
 8005210:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005212:	2900      	cmp	r1, #0
 8005214:	d044      	beq.n	80052a0 <_free_r+0x90>
 8005216:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800521a:	9001      	str	r0, [sp, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f1a1 0404 	sub.w	r4, r1, #4
 8005222:	bfb8      	it	lt
 8005224:	18e4      	addlt	r4, r4, r3
 8005226:	f000 f8df 	bl	80053e8 <__malloc_lock>
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <_free_r+0x94>)
 800522c:	9801      	ldr	r0, [sp, #4]
 800522e:	6813      	ldr	r3, [r2, #0]
 8005230:	b933      	cbnz	r3, 8005240 <_free_r+0x30>
 8005232:	6063      	str	r3, [r4, #4]
 8005234:	6014      	str	r4, [r2, #0]
 8005236:	b003      	add	sp, #12
 8005238:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800523c:	f000 b8da 	b.w	80053f4 <__malloc_unlock>
 8005240:	42a3      	cmp	r3, r4
 8005242:	d908      	bls.n	8005256 <_free_r+0x46>
 8005244:	6825      	ldr	r5, [r4, #0]
 8005246:	1961      	adds	r1, r4, r5
 8005248:	428b      	cmp	r3, r1
 800524a:	bf01      	itttt	eq
 800524c:	6819      	ldreq	r1, [r3, #0]
 800524e:	685b      	ldreq	r3, [r3, #4]
 8005250:	1949      	addeq	r1, r1, r5
 8005252:	6021      	streq	r1, [r4, #0]
 8005254:	e7ed      	b.n	8005232 <_free_r+0x22>
 8005256:	461a      	mov	r2, r3
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b10b      	cbz	r3, 8005260 <_free_r+0x50>
 800525c:	42a3      	cmp	r3, r4
 800525e:	d9fa      	bls.n	8005256 <_free_r+0x46>
 8005260:	6811      	ldr	r1, [r2, #0]
 8005262:	1855      	adds	r5, r2, r1
 8005264:	42a5      	cmp	r5, r4
 8005266:	d10b      	bne.n	8005280 <_free_r+0x70>
 8005268:	6824      	ldr	r4, [r4, #0]
 800526a:	4421      	add	r1, r4
 800526c:	1854      	adds	r4, r2, r1
 800526e:	42a3      	cmp	r3, r4
 8005270:	6011      	str	r1, [r2, #0]
 8005272:	d1e0      	bne.n	8005236 <_free_r+0x26>
 8005274:	681c      	ldr	r4, [r3, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	6053      	str	r3, [r2, #4]
 800527a:	440c      	add	r4, r1
 800527c:	6014      	str	r4, [r2, #0]
 800527e:	e7da      	b.n	8005236 <_free_r+0x26>
 8005280:	d902      	bls.n	8005288 <_free_r+0x78>
 8005282:	230c      	movs	r3, #12
 8005284:	6003      	str	r3, [r0, #0]
 8005286:	e7d6      	b.n	8005236 <_free_r+0x26>
 8005288:	6825      	ldr	r5, [r4, #0]
 800528a:	1961      	adds	r1, r4, r5
 800528c:	428b      	cmp	r3, r1
 800528e:	bf04      	itt	eq
 8005290:	6819      	ldreq	r1, [r3, #0]
 8005292:	685b      	ldreq	r3, [r3, #4]
 8005294:	6063      	str	r3, [r4, #4]
 8005296:	bf04      	itt	eq
 8005298:	1949      	addeq	r1, r1, r5
 800529a:	6021      	streq	r1, [r4, #0]
 800529c:	6054      	str	r4, [r2, #4]
 800529e:	e7ca      	b.n	8005236 <_free_r+0x26>
 80052a0:	b003      	add	sp, #12
 80052a2:	bd30      	pop	{r4, r5, pc}
 80052a4:	200145c0 	.word	0x200145c0

080052a8 <sbrk_aligned>:
 80052a8:	b570      	push	{r4, r5, r6, lr}
 80052aa:	4e0e      	ldr	r6, [pc, #56]	; (80052e4 <sbrk_aligned+0x3c>)
 80052ac:	460c      	mov	r4, r1
 80052ae:	6831      	ldr	r1, [r6, #0]
 80052b0:	4605      	mov	r5, r0
 80052b2:	b911      	cbnz	r1, 80052ba <sbrk_aligned+0x12>
 80052b4:	f000 fcbc 	bl	8005c30 <_sbrk_r>
 80052b8:	6030      	str	r0, [r6, #0]
 80052ba:	4621      	mov	r1, r4
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 fcb7 	bl	8005c30 <_sbrk_r>
 80052c2:	1c43      	adds	r3, r0, #1
 80052c4:	d00a      	beq.n	80052dc <sbrk_aligned+0x34>
 80052c6:	1cc4      	adds	r4, r0, #3
 80052c8:	f024 0403 	bic.w	r4, r4, #3
 80052cc:	42a0      	cmp	r0, r4
 80052ce:	d007      	beq.n	80052e0 <sbrk_aligned+0x38>
 80052d0:	1a21      	subs	r1, r4, r0
 80052d2:	4628      	mov	r0, r5
 80052d4:	f000 fcac 	bl	8005c30 <_sbrk_r>
 80052d8:	3001      	adds	r0, #1
 80052da:	d101      	bne.n	80052e0 <sbrk_aligned+0x38>
 80052dc:	f04f 34ff 	mov.w	r4, #4294967295
 80052e0:	4620      	mov	r0, r4
 80052e2:	bd70      	pop	{r4, r5, r6, pc}
 80052e4:	200145c4 	.word	0x200145c4

080052e8 <_malloc_r>:
 80052e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052ec:	1ccd      	adds	r5, r1, #3
 80052ee:	f025 0503 	bic.w	r5, r5, #3
 80052f2:	3508      	adds	r5, #8
 80052f4:	2d0c      	cmp	r5, #12
 80052f6:	bf38      	it	cc
 80052f8:	250c      	movcc	r5, #12
 80052fa:	2d00      	cmp	r5, #0
 80052fc:	4607      	mov	r7, r0
 80052fe:	db01      	blt.n	8005304 <_malloc_r+0x1c>
 8005300:	42a9      	cmp	r1, r5
 8005302:	d905      	bls.n	8005310 <_malloc_r+0x28>
 8005304:	230c      	movs	r3, #12
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	2600      	movs	r6, #0
 800530a:	4630      	mov	r0, r6
 800530c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005310:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053e4 <_malloc_r+0xfc>
 8005314:	f000 f868 	bl	80053e8 <__malloc_lock>
 8005318:	f8d8 3000 	ldr.w	r3, [r8]
 800531c:	461c      	mov	r4, r3
 800531e:	bb5c      	cbnz	r4, 8005378 <_malloc_r+0x90>
 8005320:	4629      	mov	r1, r5
 8005322:	4638      	mov	r0, r7
 8005324:	f7ff ffc0 	bl	80052a8 <sbrk_aligned>
 8005328:	1c43      	adds	r3, r0, #1
 800532a:	4604      	mov	r4, r0
 800532c:	d155      	bne.n	80053da <_malloc_r+0xf2>
 800532e:	f8d8 4000 	ldr.w	r4, [r8]
 8005332:	4626      	mov	r6, r4
 8005334:	2e00      	cmp	r6, #0
 8005336:	d145      	bne.n	80053c4 <_malloc_r+0xdc>
 8005338:	2c00      	cmp	r4, #0
 800533a:	d048      	beq.n	80053ce <_malloc_r+0xe6>
 800533c:	6823      	ldr	r3, [r4, #0]
 800533e:	4631      	mov	r1, r6
 8005340:	4638      	mov	r0, r7
 8005342:	eb04 0903 	add.w	r9, r4, r3
 8005346:	f000 fc73 	bl	8005c30 <_sbrk_r>
 800534a:	4581      	cmp	r9, r0
 800534c:	d13f      	bne.n	80053ce <_malloc_r+0xe6>
 800534e:	6821      	ldr	r1, [r4, #0]
 8005350:	1a6d      	subs	r5, r5, r1
 8005352:	4629      	mov	r1, r5
 8005354:	4638      	mov	r0, r7
 8005356:	f7ff ffa7 	bl	80052a8 <sbrk_aligned>
 800535a:	3001      	adds	r0, #1
 800535c:	d037      	beq.n	80053ce <_malloc_r+0xe6>
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	442b      	add	r3, r5
 8005362:	6023      	str	r3, [r4, #0]
 8005364:	f8d8 3000 	ldr.w	r3, [r8]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d038      	beq.n	80053de <_malloc_r+0xf6>
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	42a2      	cmp	r2, r4
 8005370:	d12b      	bne.n	80053ca <_malloc_r+0xe2>
 8005372:	2200      	movs	r2, #0
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	e00f      	b.n	8005398 <_malloc_r+0xb0>
 8005378:	6822      	ldr	r2, [r4, #0]
 800537a:	1b52      	subs	r2, r2, r5
 800537c:	d41f      	bmi.n	80053be <_malloc_r+0xd6>
 800537e:	2a0b      	cmp	r2, #11
 8005380:	d917      	bls.n	80053b2 <_malloc_r+0xca>
 8005382:	1961      	adds	r1, r4, r5
 8005384:	42a3      	cmp	r3, r4
 8005386:	6025      	str	r5, [r4, #0]
 8005388:	bf18      	it	ne
 800538a:	6059      	strne	r1, [r3, #4]
 800538c:	6863      	ldr	r3, [r4, #4]
 800538e:	bf08      	it	eq
 8005390:	f8c8 1000 	streq.w	r1, [r8]
 8005394:	5162      	str	r2, [r4, r5]
 8005396:	604b      	str	r3, [r1, #4]
 8005398:	4638      	mov	r0, r7
 800539a:	f104 060b 	add.w	r6, r4, #11
 800539e:	f000 f829 	bl	80053f4 <__malloc_unlock>
 80053a2:	f026 0607 	bic.w	r6, r6, #7
 80053a6:	1d23      	adds	r3, r4, #4
 80053a8:	1af2      	subs	r2, r6, r3
 80053aa:	d0ae      	beq.n	800530a <_malloc_r+0x22>
 80053ac:	1b9b      	subs	r3, r3, r6
 80053ae:	50a3      	str	r3, [r4, r2]
 80053b0:	e7ab      	b.n	800530a <_malloc_r+0x22>
 80053b2:	42a3      	cmp	r3, r4
 80053b4:	6862      	ldr	r2, [r4, #4]
 80053b6:	d1dd      	bne.n	8005374 <_malloc_r+0x8c>
 80053b8:	f8c8 2000 	str.w	r2, [r8]
 80053bc:	e7ec      	b.n	8005398 <_malloc_r+0xb0>
 80053be:	4623      	mov	r3, r4
 80053c0:	6864      	ldr	r4, [r4, #4]
 80053c2:	e7ac      	b.n	800531e <_malloc_r+0x36>
 80053c4:	4634      	mov	r4, r6
 80053c6:	6876      	ldr	r6, [r6, #4]
 80053c8:	e7b4      	b.n	8005334 <_malloc_r+0x4c>
 80053ca:	4613      	mov	r3, r2
 80053cc:	e7cc      	b.n	8005368 <_malloc_r+0x80>
 80053ce:	230c      	movs	r3, #12
 80053d0:	603b      	str	r3, [r7, #0]
 80053d2:	4638      	mov	r0, r7
 80053d4:	f000 f80e 	bl	80053f4 <__malloc_unlock>
 80053d8:	e797      	b.n	800530a <_malloc_r+0x22>
 80053da:	6025      	str	r5, [r4, #0]
 80053dc:	e7dc      	b.n	8005398 <_malloc_r+0xb0>
 80053de:	605b      	str	r3, [r3, #4]
 80053e0:	deff      	udf	#255	; 0xff
 80053e2:	bf00      	nop
 80053e4:	200145c0 	.word	0x200145c0

080053e8 <__malloc_lock>:
 80053e8:	4801      	ldr	r0, [pc, #4]	; (80053f0 <__malloc_lock+0x8>)
 80053ea:	f7ff bf00 	b.w	80051ee <__retarget_lock_acquire_recursive>
 80053ee:	bf00      	nop
 80053f0:	200145bc 	.word	0x200145bc

080053f4 <__malloc_unlock>:
 80053f4:	4801      	ldr	r0, [pc, #4]	; (80053fc <__malloc_unlock+0x8>)
 80053f6:	f7ff befb 	b.w	80051f0 <__retarget_lock_release_recursive>
 80053fa:	bf00      	nop
 80053fc:	200145bc 	.word	0x200145bc

08005400 <__sfputc_r>:
 8005400:	6893      	ldr	r3, [r2, #8]
 8005402:	3b01      	subs	r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	b410      	push	{r4}
 8005408:	6093      	str	r3, [r2, #8]
 800540a:	da08      	bge.n	800541e <__sfputc_r+0x1e>
 800540c:	6994      	ldr	r4, [r2, #24]
 800540e:	42a3      	cmp	r3, r4
 8005410:	db01      	blt.n	8005416 <__sfputc_r+0x16>
 8005412:	290a      	cmp	r1, #10
 8005414:	d103      	bne.n	800541e <__sfputc_r+0x1e>
 8005416:	f85d 4b04 	ldr.w	r4, [sp], #4
 800541a:	f000 bb73 	b.w	8005b04 <__swbuf_r>
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	1c58      	adds	r0, r3, #1
 8005422:	6010      	str	r0, [r2, #0]
 8005424:	7019      	strb	r1, [r3, #0]
 8005426:	4608      	mov	r0, r1
 8005428:	f85d 4b04 	ldr.w	r4, [sp], #4
 800542c:	4770      	bx	lr

0800542e <__sfputs_r>:
 800542e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005430:	4606      	mov	r6, r0
 8005432:	460f      	mov	r7, r1
 8005434:	4614      	mov	r4, r2
 8005436:	18d5      	adds	r5, r2, r3
 8005438:	42ac      	cmp	r4, r5
 800543a:	d101      	bne.n	8005440 <__sfputs_r+0x12>
 800543c:	2000      	movs	r0, #0
 800543e:	e007      	b.n	8005450 <__sfputs_r+0x22>
 8005440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005444:	463a      	mov	r2, r7
 8005446:	4630      	mov	r0, r6
 8005448:	f7ff ffda 	bl	8005400 <__sfputc_r>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	d1f3      	bne.n	8005438 <__sfputs_r+0xa>
 8005450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005454 <_vfiprintf_r>:
 8005454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005458:	460d      	mov	r5, r1
 800545a:	b09d      	sub	sp, #116	; 0x74
 800545c:	4614      	mov	r4, r2
 800545e:	4698      	mov	r8, r3
 8005460:	4606      	mov	r6, r0
 8005462:	b118      	cbz	r0, 800546c <_vfiprintf_r+0x18>
 8005464:	6a03      	ldr	r3, [r0, #32]
 8005466:	b90b      	cbnz	r3, 800546c <_vfiprintf_r+0x18>
 8005468:	f7ff fdc4 	bl	8004ff4 <__sinit>
 800546c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800546e:	07d9      	lsls	r1, r3, #31
 8005470:	d405      	bmi.n	800547e <_vfiprintf_r+0x2a>
 8005472:	89ab      	ldrh	r3, [r5, #12]
 8005474:	059a      	lsls	r2, r3, #22
 8005476:	d402      	bmi.n	800547e <_vfiprintf_r+0x2a>
 8005478:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800547a:	f7ff feb8 	bl	80051ee <__retarget_lock_acquire_recursive>
 800547e:	89ab      	ldrh	r3, [r5, #12]
 8005480:	071b      	lsls	r3, r3, #28
 8005482:	d501      	bpl.n	8005488 <_vfiprintf_r+0x34>
 8005484:	692b      	ldr	r3, [r5, #16]
 8005486:	b99b      	cbnz	r3, 80054b0 <_vfiprintf_r+0x5c>
 8005488:	4629      	mov	r1, r5
 800548a:	4630      	mov	r0, r6
 800548c:	f000 fb78 	bl	8005b80 <__swsetup_r>
 8005490:	b170      	cbz	r0, 80054b0 <_vfiprintf_r+0x5c>
 8005492:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005494:	07dc      	lsls	r4, r3, #31
 8005496:	d504      	bpl.n	80054a2 <_vfiprintf_r+0x4e>
 8005498:	f04f 30ff 	mov.w	r0, #4294967295
 800549c:	b01d      	add	sp, #116	; 0x74
 800549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a2:	89ab      	ldrh	r3, [r5, #12]
 80054a4:	0598      	lsls	r0, r3, #22
 80054a6:	d4f7      	bmi.n	8005498 <_vfiprintf_r+0x44>
 80054a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054aa:	f7ff fea1 	bl	80051f0 <__retarget_lock_release_recursive>
 80054ae:	e7f3      	b.n	8005498 <_vfiprintf_r+0x44>
 80054b0:	2300      	movs	r3, #0
 80054b2:	9309      	str	r3, [sp, #36]	; 0x24
 80054b4:	2320      	movs	r3, #32
 80054b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80054ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80054be:	2330      	movs	r3, #48	; 0x30
 80054c0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005674 <_vfiprintf_r+0x220>
 80054c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80054c8:	f04f 0901 	mov.w	r9, #1
 80054cc:	4623      	mov	r3, r4
 80054ce:	469a      	mov	sl, r3
 80054d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054d4:	b10a      	cbz	r2, 80054da <_vfiprintf_r+0x86>
 80054d6:	2a25      	cmp	r2, #37	; 0x25
 80054d8:	d1f9      	bne.n	80054ce <_vfiprintf_r+0x7a>
 80054da:	ebba 0b04 	subs.w	fp, sl, r4
 80054de:	d00b      	beq.n	80054f8 <_vfiprintf_r+0xa4>
 80054e0:	465b      	mov	r3, fp
 80054e2:	4622      	mov	r2, r4
 80054e4:	4629      	mov	r1, r5
 80054e6:	4630      	mov	r0, r6
 80054e8:	f7ff ffa1 	bl	800542e <__sfputs_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	f000 80a9 	beq.w	8005644 <_vfiprintf_r+0x1f0>
 80054f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054f4:	445a      	add	r2, fp
 80054f6:	9209      	str	r2, [sp, #36]	; 0x24
 80054f8:	f89a 3000 	ldrb.w	r3, [sl]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	f000 80a1 	beq.w	8005644 <_vfiprintf_r+0x1f0>
 8005502:	2300      	movs	r3, #0
 8005504:	f04f 32ff 	mov.w	r2, #4294967295
 8005508:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800550c:	f10a 0a01 	add.w	sl, sl, #1
 8005510:	9304      	str	r3, [sp, #16]
 8005512:	9307      	str	r3, [sp, #28]
 8005514:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005518:	931a      	str	r3, [sp, #104]	; 0x68
 800551a:	4654      	mov	r4, sl
 800551c:	2205      	movs	r2, #5
 800551e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005522:	4854      	ldr	r0, [pc, #336]	; (8005674 <_vfiprintf_r+0x220>)
 8005524:	f7fa fea4 	bl	8000270 <memchr>
 8005528:	9a04      	ldr	r2, [sp, #16]
 800552a:	b9d8      	cbnz	r0, 8005564 <_vfiprintf_r+0x110>
 800552c:	06d1      	lsls	r1, r2, #27
 800552e:	bf44      	itt	mi
 8005530:	2320      	movmi	r3, #32
 8005532:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005536:	0713      	lsls	r3, r2, #28
 8005538:	bf44      	itt	mi
 800553a:	232b      	movmi	r3, #43	; 0x2b
 800553c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005540:	f89a 3000 	ldrb.w	r3, [sl]
 8005544:	2b2a      	cmp	r3, #42	; 0x2a
 8005546:	d015      	beq.n	8005574 <_vfiprintf_r+0x120>
 8005548:	9a07      	ldr	r2, [sp, #28]
 800554a:	4654      	mov	r4, sl
 800554c:	2000      	movs	r0, #0
 800554e:	f04f 0c0a 	mov.w	ip, #10
 8005552:	4621      	mov	r1, r4
 8005554:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005558:	3b30      	subs	r3, #48	; 0x30
 800555a:	2b09      	cmp	r3, #9
 800555c:	d94d      	bls.n	80055fa <_vfiprintf_r+0x1a6>
 800555e:	b1b0      	cbz	r0, 800558e <_vfiprintf_r+0x13a>
 8005560:	9207      	str	r2, [sp, #28]
 8005562:	e014      	b.n	800558e <_vfiprintf_r+0x13a>
 8005564:	eba0 0308 	sub.w	r3, r0, r8
 8005568:	fa09 f303 	lsl.w	r3, r9, r3
 800556c:	4313      	orrs	r3, r2
 800556e:	9304      	str	r3, [sp, #16]
 8005570:	46a2      	mov	sl, r4
 8005572:	e7d2      	b.n	800551a <_vfiprintf_r+0xc6>
 8005574:	9b03      	ldr	r3, [sp, #12]
 8005576:	1d19      	adds	r1, r3, #4
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	9103      	str	r1, [sp, #12]
 800557c:	2b00      	cmp	r3, #0
 800557e:	bfbb      	ittet	lt
 8005580:	425b      	neglt	r3, r3
 8005582:	f042 0202 	orrlt.w	r2, r2, #2
 8005586:	9307      	strge	r3, [sp, #28]
 8005588:	9307      	strlt	r3, [sp, #28]
 800558a:	bfb8      	it	lt
 800558c:	9204      	strlt	r2, [sp, #16]
 800558e:	7823      	ldrb	r3, [r4, #0]
 8005590:	2b2e      	cmp	r3, #46	; 0x2e
 8005592:	d10c      	bne.n	80055ae <_vfiprintf_r+0x15a>
 8005594:	7863      	ldrb	r3, [r4, #1]
 8005596:	2b2a      	cmp	r3, #42	; 0x2a
 8005598:	d134      	bne.n	8005604 <_vfiprintf_r+0x1b0>
 800559a:	9b03      	ldr	r3, [sp, #12]
 800559c:	1d1a      	adds	r2, r3, #4
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	9203      	str	r2, [sp, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bfb8      	it	lt
 80055a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80055aa:	3402      	adds	r4, #2
 80055ac:	9305      	str	r3, [sp, #20]
 80055ae:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005684 <_vfiprintf_r+0x230>
 80055b2:	7821      	ldrb	r1, [r4, #0]
 80055b4:	2203      	movs	r2, #3
 80055b6:	4650      	mov	r0, sl
 80055b8:	f7fa fe5a 	bl	8000270 <memchr>
 80055bc:	b138      	cbz	r0, 80055ce <_vfiprintf_r+0x17a>
 80055be:	9b04      	ldr	r3, [sp, #16]
 80055c0:	eba0 000a 	sub.w	r0, r0, sl
 80055c4:	2240      	movs	r2, #64	; 0x40
 80055c6:	4082      	lsls	r2, r0
 80055c8:	4313      	orrs	r3, r2
 80055ca:	3401      	adds	r4, #1
 80055cc:	9304      	str	r3, [sp, #16]
 80055ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055d2:	4829      	ldr	r0, [pc, #164]	; (8005678 <_vfiprintf_r+0x224>)
 80055d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055d8:	2206      	movs	r2, #6
 80055da:	f7fa fe49 	bl	8000270 <memchr>
 80055de:	2800      	cmp	r0, #0
 80055e0:	d03f      	beq.n	8005662 <_vfiprintf_r+0x20e>
 80055e2:	4b26      	ldr	r3, [pc, #152]	; (800567c <_vfiprintf_r+0x228>)
 80055e4:	bb1b      	cbnz	r3, 800562e <_vfiprintf_r+0x1da>
 80055e6:	9b03      	ldr	r3, [sp, #12]
 80055e8:	3307      	adds	r3, #7
 80055ea:	f023 0307 	bic.w	r3, r3, #7
 80055ee:	3308      	adds	r3, #8
 80055f0:	9303      	str	r3, [sp, #12]
 80055f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055f4:	443b      	add	r3, r7
 80055f6:	9309      	str	r3, [sp, #36]	; 0x24
 80055f8:	e768      	b.n	80054cc <_vfiprintf_r+0x78>
 80055fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80055fe:	460c      	mov	r4, r1
 8005600:	2001      	movs	r0, #1
 8005602:	e7a6      	b.n	8005552 <_vfiprintf_r+0xfe>
 8005604:	2300      	movs	r3, #0
 8005606:	3401      	adds	r4, #1
 8005608:	9305      	str	r3, [sp, #20]
 800560a:	4619      	mov	r1, r3
 800560c:	f04f 0c0a 	mov.w	ip, #10
 8005610:	4620      	mov	r0, r4
 8005612:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005616:	3a30      	subs	r2, #48	; 0x30
 8005618:	2a09      	cmp	r2, #9
 800561a:	d903      	bls.n	8005624 <_vfiprintf_r+0x1d0>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d0c6      	beq.n	80055ae <_vfiprintf_r+0x15a>
 8005620:	9105      	str	r1, [sp, #20]
 8005622:	e7c4      	b.n	80055ae <_vfiprintf_r+0x15a>
 8005624:	fb0c 2101 	mla	r1, ip, r1, r2
 8005628:	4604      	mov	r4, r0
 800562a:	2301      	movs	r3, #1
 800562c:	e7f0      	b.n	8005610 <_vfiprintf_r+0x1bc>
 800562e:	ab03      	add	r3, sp, #12
 8005630:	9300      	str	r3, [sp, #0]
 8005632:	462a      	mov	r2, r5
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <_vfiprintf_r+0x22c>)
 8005636:	a904      	add	r1, sp, #16
 8005638:	4630      	mov	r0, r6
 800563a:	f3af 8000 	nop.w
 800563e:	4607      	mov	r7, r0
 8005640:	1c78      	adds	r0, r7, #1
 8005642:	d1d6      	bne.n	80055f2 <_vfiprintf_r+0x19e>
 8005644:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005646:	07d9      	lsls	r1, r3, #31
 8005648:	d405      	bmi.n	8005656 <_vfiprintf_r+0x202>
 800564a:	89ab      	ldrh	r3, [r5, #12]
 800564c:	059a      	lsls	r2, r3, #22
 800564e:	d402      	bmi.n	8005656 <_vfiprintf_r+0x202>
 8005650:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005652:	f7ff fdcd 	bl	80051f0 <__retarget_lock_release_recursive>
 8005656:	89ab      	ldrh	r3, [r5, #12]
 8005658:	065b      	lsls	r3, r3, #25
 800565a:	f53f af1d 	bmi.w	8005498 <_vfiprintf_r+0x44>
 800565e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005660:	e71c      	b.n	800549c <_vfiprintf_r+0x48>
 8005662:	ab03      	add	r3, sp, #12
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	462a      	mov	r2, r5
 8005668:	4b05      	ldr	r3, [pc, #20]	; (8005680 <_vfiprintf_r+0x22c>)
 800566a:	a904      	add	r1, sp, #16
 800566c:	4630      	mov	r0, r6
 800566e:	f000 f879 	bl	8005764 <_printf_i>
 8005672:	e7e4      	b.n	800563e <_vfiprintf_r+0x1ea>
 8005674:	08005ed2 	.word	0x08005ed2
 8005678:	08005edc 	.word	0x08005edc
 800567c:	00000000 	.word	0x00000000
 8005680:	0800542f 	.word	0x0800542f
 8005684:	08005ed8 	.word	0x08005ed8

08005688 <_printf_common>:
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	4616      	mov	r6, r2
 800568e:	4699      	mov	r9, r3
 8005690:	688a      	ldr	r2, [r1, #8]
 8005692:	690b      	ldr	r3, [r1, #16]
 8005694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005698:	4293      	cmp	r3, r2
 800569a:	bfb8      	it	lt
 800569c:	4613      	movlt	r3, r2
 800569e:	6033      	str	r3, [r6, #0]
 80056a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80056a4:	4607      	mov	r7, r0
 80056a6:	460c      	mov	r4, r1
 80056a8:	b10a      	cbz	r2, 80056ae <_printf_common+0x26>
 80056aa:	3301      	adds	r3, #1
 80056ac:	6033      	str	r3, [r6, #0]
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	0699      	lsls	r1, r3, #26
 80056b2:	bf42      	ittt	mi
 80056b4:	6833      	ldrmi	r3, [r6, #0]
 80056b6:	3302      	addmi	r3, #2
 80056b8:	6033      	strmi	r3, [r6, #0]
 80056ba:	6825      	ldr	r5, [r4, #0]
 80056bc:	f015 0506 	ands.w	r5, r5, #6
 80056c0:	d106      	bne.n	80056d0 <_printf_common+0x48>
 80056c2:	f104 0a19 	add.w	sl, r4, #25
 80056c6:	68e3      	ldr	r3, [r4, #12]
 80056c8:	6832      	ldr	r2, [r6, #0]
 80056ca:	1a9b      	subs	r3, r3, r2
 80056cc:	42ab      	cmp	r3, r5
 80056ce:	dc26      	bgt.n	800571e <_printf_common+0x96>
 80056d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80056d4:	1e13      	subs	r3, r2, #0
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	bf18      	it	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	0692      	lsls	r2, r2, #26
 80056de:	d42b      	bmi.n	8005738 <_printf_common+0xb0>
 80056e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056e4:	4649      	mov	r1, r9
 80056e6:	4638      	mov	r0, r7
 80056e8:	47c0      	blx	r8
 80056ea:	3001      	adds	r0, #1
 80056ec:	d01e      	beq.n	800572c <_printf_common+0xa4>
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	6922      	ldr	r2, [r4, #16]
 80056f2:	f003 0306 	and.w	r3, r3, #6
 80056f6:	2b04      	cmp	r3, #4
 80056f8:	bf02      	ittt	eq
 80056fa:	68e5      	ldreq	r5, [r4, #12]
 80056fc:	6833      	ldreq	r3, [r6, #0]
 80056fe:	1aed      	subeq	r5, r5, r3
 8005700:	68a3      	ldr	r3, [r4, #8]
 8005702:	bf0c      	ite	eq
 8005704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005708:	2500      	movne	r5, #0
 800570a:	4293      	cmp	r3, r2
 800570c:	bfc4      	itt	gt
 800570e:	1a9b      	subgt	r3, r3, r2
 8005710:	18ed      	addgt	r5, r5, r3
 8005712:	2600      	movs	r6, #0
 8005714:	341a      	adds	r4, #26
 8005716:	42b5      	cmp	r5, r6
 8005718:	d11a      	bne.n	8005750 <_printf_common+0xc8>
 800571a:	2000      	movs	r0, #0
 800571c:	e008      	b.n	8005730 <_printf_common+0xa8>
 800571e:	2301      	movs	r3, #1
 8005720:	4652      	mov	r2, sl
 8005722:	4649      	mov	r1, r9
 8005724:	4638      	mov	r0, r7
 8005726:	47c0      	blx	r8
 8005728:	3001      	adds	r0, #1
 800572a:	d103      	bne.n	8005734 <_printf_common+0xac>
 800572c:	f04f 30ff 	mov.w	r0, #4294967295
 8005730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005734:	3501      	adds	r5, #1
 8005736:	e7c6      	b.n	80056c6 <_printf_common+0x3e>
 8005738:	18e1      	adds	r1, r4, r3
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	2030      	movs	r0, #48	; 0x30
 800573e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005742:	4422      	add	r2, r4
 8005744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800574c:	3302      	adds	r3, #2
 800574e:	e7c7      	b.n	80056e0 <_printf_common+0x58>
 8005750:	2301      	movs	r3, #1
 8005752:	4622      	mov	r2, r4
 8005754:	4649      	mov	r1, r9
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d0e6      	beq.n	800572c <_printf_common+0xa4>
 800575e:	3601      	adds	r6, #1
 8005760:	e7d9      	b.n	8005716 <_printf_common+0x8e>
	...

08005764 <_printf_i>:
 8005764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005768:	7e0f      	ldrb	r7, [r1, #24]
 800576a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800576c:	2f78      	cmp	r7, #120	; 0x78
 800576e:	4691      	mov	r9, r2
 8005770:	4680      	mov	r8, r0
 8005772:	460c      	mov	r4, r1
 8005774:	469a      	mov	sl, r3
 8005776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800577a:	d807      	bhi.n	800578c <_printf_i+0x28>
 800577c:	2f62      	cmp	r7, #98	; 0x62
 800577e:	d80a      	bhi.n	8005796 <_printf_i+0x32>
 8005780:	2f00      	cmp	r7, #0
 8005782:	f000 80d4 	beq.w	800592e <_printf_i+0x1ca>
 8005786:	2f58      	cmp	r7, #88	; 0x58
 8005788:	f000 80c0 	beq.w	800590c <_printf_i+0x1a8>
 800578c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005794:	e03a      	b.n	800580c <_printf_i+0xa8>
 8005796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800579a:	2b15      	cmp	r3, #21
 800579c:	d8f6      	bhi.n	800578c <_printf_i+0x28>
 800579e:	a101      	add	r1, pc, #4	; (adr r1, 80057a4 <_printf_i+0x40>)
 80057a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80057a4:	080057fd 	.word	0x080057fd
 80057a8:	08005811 	.word	0x08005811
 80057ac:	0800578d 	.word	0x0800578d
 80057b0:	0800578d 	.word	0x0800578d
 80057b4:	0800578d 	.word	0x0800578d
 80057b8:	0800578d 	.word	0x0800578d
 80057bc:	08005811 	.word	0x08005811
 80057c0:	0800578d 	.word	0x0800578d
 80057c4:	0800578d 	.word	0x0800578d
 80057c8:	0800578d 	.word	0x0800578d
 80057cc:	0800578d 	.word	0x0800578d
 80057d0:	08005915 	.word	0x08005915
 80057d4:	0800583d 	.word	0x0800583d
 80057d8:	080058cf 	.word	0x080058cf
 80057dc:	0800578d 	.word	0x0800578d
 80057e0:	0800578d 	.word	0x0800578d
 80057e4:	08005937 	.word	0x08005937
 80057e8:	0800578d 	.word	0x0800578d
 80057ec:	0800583d 	.word	0x0800583d
 80057f0:	0800578d 	.word	0x0800578d
 80057f4:	0800578d 	.word	0x0800578d
 80057f8:	080058d7 	.word	0x080058d7
 80057fc:	682b      	ldr	r3, [r5, #0]
 80057fe:	1d1a      	adds	r2, r3, #4
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	602a      	str	r2, [r5, #0]
 8005804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800580c:	2301      	movs	r3, #1
 800580e:	e09f      	b.n	8005950 <_printf_i+0x1ec>
 8005810:	6820      	ldr	r0, [r4, #0]
 8005812:	682b      	ldr	r3, [r5, #0]
 8005814:	0607      	lsls	r7, r0, #24
 8005816:	f103 0104 	add.w	r1, r3, #4
 800581a:	6029      	str	r1, [r5, #0]
 800581c:	d501      	bpl.n	8005822 <_printf_i+0xbe>
 800581e:	681e      	ldr	r6, [r3, #0]
 8005820:	e003      	b.n	800582a <_printf_i+0xc6>
 8005822:	0646      	lsls	r6, r0, #25
 8005824:	d5fb      	bpl.n	800581e <_printf_i+0xba>
 8005826:	f9b3 6000 	ldrsh.w	r6, [r3]
 800582a:	2e00      	cmp	r6, #0
 800582c:	da03      	bge.n	8005836 <_printf_i+0xd2>
 800582e:	232d      	movs	r3, #45	; 0x2d
 8005830:	4276      	negs	r6, r6
 8005832:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005836:	485a      	ldr	r0, [pc, #360]	; (80059a0 <_printf_i+0x23c>)
 8005838:	230a      	movs	r3, #10
 800583a:	e012      	b.n	8005862 <_printf_i+0xfe>
 800583c:	682b      	ldr	r3, [r5, #0]
 800583e:	6820      	ldr	r0, [r4, #0]
 8005840:	1d19      	adds	r1, r3, #4
 8005842:	6029      	str	r1, [r5, #0]
 8005844:	0605      	lsls	r5, r0, #24
 8005846:	d501      	bpl.n	800584c <_printf_i+0xe8>
 8005848:	681e      	ldr	r6, [r3, #0]
 800584a:	e002      	b.n	8005852 <_printf_i+0xee>
 800584c:	0641      	lsls	r1, r0, #25
 800584e:	d5fb      	bpl.n	8005848 <_printf_i+0xe4>
 8005850:	881e      	ldrh	r6, [r3, #0]
 8005852:	4853      	ldr	r0, [pc, #332]	; (80059a0 <_printf_i+0x23c>)
 8005854:	2f6f      	cmp	r7, #111	; 0x6f
 8005856:	bf0c      	ite	eq
 8005858:	2308      	moveq	r3, #8
 800585a:	230a      	movne	r3, #10
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005862:	6865      	ldr	r5, [r4, #4]
 8005864:	60a5      	str	r5, [r4, #8]
 8005866:	2d00      	cmp	r5, #0
 8005868:	bfa2      	ittt	ge
 800586a:	6821      	ldrge	r1, [r4, #0]
 800586c:	f021 0104 	bicge.w	r1, r1, #4
 8005870:	6021      	strge	r1, [r4, #0]
 8005872:	b90e      	cbnz	r6, 8005878 <_printf_i+0x114>
 8005874:	2d00      	cmp	r5, #0
 8005876:	d04b      	beq.n	8005910 <_printf_i+0x1ac>
 8005878:	4615      	mov	r5, r2
 800587a:	fbb6 f1f3 	udiv	r1, r6, r3
 800587e:	fb03 6711 	mls	r7, r3, r1, r6
 8005882:	5dc7      	ldrb	r7, [r0, r7]
 8005884:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005888:	4637      	mov	r7, r6
 800588a:	42bb      	cmp	r3, r7
 800588c:	460e      	mov	r6, r1
 800588e:	d9f4      	bls.n	800587a <_printf_i+0x116>
 8005890:	2b08      	cmp	r3, #8
 8005892:	d10b      	bne.n	80058ac <_printf_i+0x148>
 8005894:	6823      	ldr	r3, [r4, #0]
 8005896:	07de      	lsls	r6, r3, #31
 8005898:	d508      	bpl.n	80058ac <_printf_i+0x148>
 800589a:	6923      	ldr	r3, [r4, #16]
 800589c:	6861      	ldr	r1, [r4, #4]
 800589e:	4299      	cmp	r1, r3
 80058a0:	bfde      	ittt	le
 80058a2:	2330      	movle	r3, #48	; 0x30
 80058a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80058a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80058ac:	1b52      	subs	r2, r2, r5
 80058ae:	6122      	str	r2, [r4, #16]
 80058b0:	f8cd a000 	str.w	sl, [sp]
 80058b4:	464b      	mov	r3, r9
 80058b6:	aa03      	add	r2, sp, #12
 80058b8:	4621      	mov	r1, r4
 80058ba:	4640      	mov	r0, r8
 80058bc:	f7ff fee4 	bl	8005688 <_printf_common>
 80058c0:	3001      	adds	r0, #1
 80058c2:	d14a      	bne.n	800595a <_printf_i+0x1f6>
 80058c4:	f04f 30ff 	mov.w	r0, #4294967295
 80058c8:	b004      	add	sp, #16
 80058ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	f043 0320 	orr.w	r3, r3, #32
 80058d4:	6023      	str	r3, [r4, #0]
 80058d6:	4833      	ldr	r0, [pc, #204]	; (80059a4 <_printf_i+0x240>)
 80058d8:	2778      	movs	r7, #120	; 0x78
 80058da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80058de:	6823      	ldr	r3, [r4, #0]
 80058e0:	6829      	ldr	r1, [r5, #0]
 80058e2:	061f      	lsls	r7, r3, #24
 80058e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80058e8:	d402      	bmi.n	80058f0 <_printf_i+0x18c>
 80058ea:	065f      	lsls	r7, r3, #25
 80058ec:	bf48      	it	mi
 80058ee:	b2b6      	uxthmi	r6, r6
 80058f0:	07df      	lsls	r7, r3, #31
 80058f2:	bf48      	it	mi
 80058f4:	f043 0320 	orrmi.w	r3, r3, #32
 80058f8:	6029      	str	r1, [r5, #0]
 80058fa:	bf48      	it	mi
 80058fc:	6023      	strmi	r3, [r4, #0]
 80058fe:	b91e      	cbnz	r6, 8005908 <_printf_i+0x1a4>
 8005900:	6823      	ldr	r3, [r4, #0]
 8005902:	f023 0320 	bic.w	r3, r3, #32
 8005906:	6023      	str	r3, [r4, #0]
 8005908:	2310      	movs	r3, #16
 800590a:	e7a7      	b.n	800585c <_printf_i+0xf8>
 800590c:	4824      	ldr	r0, [pc, #144]	; (80059a0 <_printf_i+0x23c>)
 800590e:	e7e4      	b.n	80058da <_printf_i+0x176>
 8005910:	4615      	mov	r5, r2
 8005912:	e7bd      	b.n	8005890 <_printf_i+0x12c>
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	6826      	ldr	r6, [r4, #0]
 8005918:	6961      	ldr	r1, [r4, #20]
 800591a:	1d18      	adds	r0, r3, #4
 800591c:	6028      	str	r0, [r5, #0]
 800591e:	0635      	lsls	r5, r6, #24
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	d501      	bpl.n	8005928 <_printf_i+0x1c4>
 8005924:	6019      	str	r1, [r3, #0]
 8005926:	e002      	b.n	800592e <_printf_i+0x1ca>
 8005928:	0670      	lsls	r0, r6, #25
 800592a:	d5fb      	bpl.n	8005924 <_printf_i+0x1c0>
 800592c:	8019      	strh	r1, [r3, #0]
 800592e:	2300      	movs	r3, #0
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	4615      	mov	r5, r2
 8005934:	e7bc      	b.n	80058b0 <_printf_i+0x14c>
 8005936:	682b      	ldr	r3, [r5, #0]
 8005938:	1d1a      	adds	r2, r3, #4
 800593a:	602a      	str	r2, [r5, #0]
 800593c:	681d      	ldr	r5, [r3, #0]
 800593e:	6862      	ldr	r2, [r4, #4]
 8005940:	2100      	movs	r1, #0
 8005942:	4628      	mov	r0, r5
 8005944:	f7fa fc94 	bl	8000270 <memchr>
 8005948:	b108      	cbz	r0, 800594e <_printf_i+0x1ea>
 800594a:	1b40      	subs	r0, r0, r5
 800594c:	6060      	str	r0, [r4, #4]
 800594e:	6863      	ldr	r3, [r4, #4]
 8005950:	6123      	str	r3, [r4, #16]
 8005952:	2300      	movs	r3, #0
 8005954:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005958:	e7aa      	b.n	80058b0 <_printf_i+0x14c>
 800595a:	6923      	ldr	r3, [r4, #16]
 800595c:	462a      	mov	r2, r5
 800595e:	4649      	mov	r1, r9
 8005960:	4640      	mov	r0, r8
 8005962:	47d0      	blx	sl
 8005964:	3001      	adds	r0, #1
 8005966:	d0ad      	beq.n	80058c4 <_printf_i+0x160>
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	079b      	lsls	r3, r3, #30
 800596c:	d413      	bmi.n	8005996 <_printf_i+0x232>
 800596e:	68e0      	ldr	r0, [r4, #12]
 8005970:	9b03      	ldr	r3, [sp, #12]
 8005972:	4298      	cmp	r0, r3
 8005974:	bfb8      	it	lt
 8005976:	4618      	movlt	r0, r3
 8005978:	e7a6      	b.n	80058c8 <_printf_i+0x164>
 800597a:	2301      	movs	r3, #1
 800597c:	4632      	mov	r2, r6
 800597e:	4649      	mov	r1, r9
 8005980:	4640      	mov	r0, r8
 8005982:	47d0      	blx	sl
 8005984:	3001      	adds	r0, #1
 8005986:	d09d      	beq.n	80058c4 <_printf_i+0x160>
 8005988:	3501      	adds	r5, #1
 800598a:	68e3      	ldr	r3, [r4, #12]
 800598c:	9903      	ldr	r1, [sp, #12]
 800598e:	1a5b      	subs	r3, r3, r1
 8005990:	42ab      	cmp	r3, r5
 8005992:	dcf2      	bgt.n	800597a <_printf_i+0x216>
 8005994:	e7eb      	b.n	800596e <_printf_i+0x20a>
 8005996:	2500      	movs	r5, #0
 8005998:	f104 0619 	add.w	r6, r4, #25
 800599c:	e7f5      	b.n	800598a <_printf_i+0x226>
 800599e:	bf00      	nop
 80059a0:	08005ee3 	.word	0x08005ee3
 80059a4:	08005ef4 	.word	0x08005ef4

080059a8 <__sflush_r>:
 80059a8:	898a      	ldrh	r2, [r1, #12]
 80059aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ae:	4605      	mov	r5, r0
 80059b0:	0710      	lsls	r0, r2, #28
 80059b2:	460c      	mov	r4, r1
 80059b4:	d458      	bmi.n	8005a68 <__sflush_r+0xc0>
 80059b6:	684b      	ldr	r3, [r1, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	dc05      	bgt.n	80059c8 <__sflush_r+0x20>
 80059bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	dc02      	bgt.n	80059c8 <__sflush_r+0x20>
 80059c2:	2000      	movs	r0, #0
 80059c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059ca:	2e00      	cmp	r6, #0
 80059cc:	d0f9      	beq.n	80059c2 <__sflush_r+0x1a>
 80059ce:	2300      	movs	r3, #0
 80059d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80059d4:	682f      	ldr	r7, [r5, #0]
 80059d6:	6a21      	ldr	r1, [r4, #32]
 80059d8:	602b      	str	r3, [r5, #0]
 80059da:	d032      	beq.n	8005a42 <__sflush_r+0x9a>
 80059dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	075a      	lsls	r2, r3, #29
 80059e2:	d505      	bpl.n	80059f0 <__sflush_r+0x48>
 80059e4:	6863      	ldr	r3, [r4, #4]
 80059e6:	1ac0      	subs	r0, r0, r3
 80059e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80059ea:	b10b      	cbz	r3, 80059f0 <__sflush_r+0x48>
 80059ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80059ee:	1ac0      	subs	r0, r0, r3
 80059f0:	2300      	movs	r3, #0
 80059f2:	4602      	mov	r2, r0
 80059f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80059f6:	6a21      	ldr	r1, [r4, #32]
 80059f8:	4628      	mov	r0, r5
 80059fa:	47b0      	blx	r6
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	d106      	bne.n	8005a10 <__sflush_r+0x68>
 8005a02:	6829      	ldr	r1, [r5, #0]
 8005a04:	291d      	cmp	r1, #29
 8005a06:	d82b      	bhi.n	8005a60 <__sflush_r+0xb8>
 8005a08:	4a29      	ldr	r2, [pc, #164]	; (8005ab0 <__sflush_r+0x108>)
 8005a0a:	410a      	asrs	r2, r1
 8005a0c:	07d6      	lsls	r6, r2, #31
 8005a0e:	d427      	bmi.n	8005a60 <__sflush_r+0xb8>
 8005a10:	2200      	movs	r2, #0
 8005a12:	6062      	str	r2, [r4, #4]
 8005a14:	04d9      	lsls	r1, r3, #19
 8005a16:	6922      	ldr	r2, [r4, #16]
 8005a18:	6022      	str	r2, [r4, #0]
 8005a1a:	d504      	bpl.n	8005a26 <__sflush_r+0x7e>
 8005a1c:	1c42      	adds	r2, r0, #1
 8005a1e:	d101      	bne.n	8005a24 <__sflush_r+0x7c>
 8005a20:	682b      	ldr	r3, [r5, #0]
 8005a22:	b903      	cbnz	r3, 8005a26 <__sflush_r+0x7e>
 8005a24:	6560      	str	r0, [r4, #84]	; 0x54
 8005a26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a28:	602f      	str	r7, [r5, #0]
 8005a2a:	2900      	cmp	r1, #0
 8005a2c:	d0c9      	beq.n	80059c2 <__sflush_r+0x1a>
 8005a2e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a32:	4299      	cmp	r1, r3
 8005a34:	d002      	beq.n	8005a3c <__sflush_r+0x94>
 8005a36:	4628      	mov	r0, r5
 8005a38:	f7ff fbea 	bl	8005210 <_free_r>
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	6360      	str	r0, [r4, #52]	; 0x34
 8005a40:	e7c0      	b.n	80059c4 <__sflush_r+0x1c>
 8005a42:	2301      	movs	r3, #1
 8005a44:	4628      	mov	r0, r5
 8005a46:	47b0      	blx	r6
 8005a48:	1c41      	adds	r1, r0, #1
 8005a4a:	d1c8      	bne.n	80059de <__sflush_r+0x36>
 8005a4c:	682b      	ldr	r3, [r5, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d0c5      	beq.n	80059de <__sflush_r+0x36>
 8005a52:	2b1d      	cmp	r3, #29
 8005a54:	d001      	beq.n	8005a5a <__sflush_r+0xb2>
 8005a56:	2b16      	cmp	r3, #22
 8005a58:	d101      	bne.n	8005a5e <__sflush_r+0xb6>
 8005a5a:	602f      	str	r7, [r5, #0]
 8005a5c:	e7b1      	b.n	80059c2 <__sflush_r+0x1a>
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a64:	81a3      	strh	r3, [r4, #12]
 8005a66:	e7ad      	b.n	80059c4 <__sflush_r+0x1c>
 8005a68:	690f      	ldr	r7, [r1, #16]
 8005a6a:	2f00      	cmp	r7, #0
 8005a6c:	d0a9      	beq.n	80059c2 <__sflush_r+0x1a>
 8005a6e:	0793      	lsls	r3, r2, #30
 8005a70:	680e      	ldr	r6, [r1, #0]
 8005a72:	bf08      	it	eq
 8005a74:	694b      	ldreq	r3, [r1, #20]
 8005a76:	600f      	str	r7, [r1, #0]
 8005a78:	bf18      	it	ne
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	eba6 0807 	sub.w	r8, r6, r7
 8005a80:	608b      	str	r3, [r1, #8]
 8005a82:	f1b8 0f00 	cmp.w	r8, #0
 8005a86:	dd9c      	ble.n	80059c2 <__sflush_r+0x1a>
 8005a88:	6a21      	ldr	r1, [r4, #32]
 8005a8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a8c:	4643      	mov	r3, r8
 8005a8e:	463a      	mov	r2, r7
 8005a90:	4628      	mov	r0, r5
 8005a92:	47b0      	blx	r6
 8005a94:	2800      	cmp	r0, #0
 8005a96:	dc06      	bgt.n	8005aa6 <__sflush_r+0xfe>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a9e:	81a3      	strh	r3, [r4, #12]
 8005aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa4:	e78e      	b.n	80059c4 <__sflush_r+0x1c>
 8005aa6:	4407      	add	r7, r0
 8005aa8:	eba8 0800 	sub.w	r8, r8, r0
 8005aac:	e7e9      	b.n	8005a82 <__sflush_r+0xda>
 8005aae:	bf00      	nop
 8005ab0:	dfbffffe 	.word	0xdfbffffe

08005ab4 <_fflush_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	690b      	ldr	r3, [r1, #16]
 8005ab8:	4605      	mov	r5, r0
 8005aba:	460c      	mov	r4, r1
 8005abc:	b913      	cbnz	r3, 8005ac4 <_fflush_r+0x10>
 8005abe:	2500      	movs	r5, #0
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	bd38      	pop	{r3, r4, r5, pc}
 8005ac4:	b118      	cbz	r0, 8005ace <_fflush_r+0x1a>
 8005ac6:	6a03      	ldr	r3, [r0, #32]
 8005ac8:	b90b      	cbnz	r3, 8005ace <_fflush_r+0x1a>
 8005aca:	f7ff fa93 	bl	8004ff4 <__sinit>
 8005ace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f3      	beq.n	8005abe <_fflush_r+0xa>
 8005ad6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005ad8:	07d0      	lsls	r0, r2, #31
 8005ada:	d404      	bmi.n	8005ae6 <_fflush_r+0x32>
 8005adc:	0599      	lsls	r1, r3, #22
 8005ade:	d402      	bmi.n	8005ae6 <_fflush_r+0x32>
 8005ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae2:	f7ff fb84 	bl	80051ee <__retarget_lock_acquire_recursive>
 8005ae6:	4628      	mov	r0, r5
 8005ae8:	4621      	mov	r1, r4
 8005aea:	f7ff ff5d 	bl	80059a8 <__sflush_r>
 8005aee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005af0:	07da      	lsls	r2, r3, #31
 8005af2:	4605      	mov	r5, r0
 8005af4:	d4e4      	bmi.n	8005ac0 <_fflush_r+0xc>
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	059b      	lsls	r3, r3, #22
 8005afa:	d4e1      	bmi.n	8005ac0 <_fflush_r+0xc>
 8005afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005afe:	f7ff fb77 	bl	80051f0 <__retarget_lock_release_recursive>
 8005b02:	e7dd      	b.n	8005ac0 <_fflush_r+0xc>

08005b04 <__swbuf_r>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	460e      	mov	r6, r1
 8005b08:	4614      	mov	r4, r2
 8005b0a:	4605      	mov	r5, r0
 8005b0c:	b118      	cbz	r0, 8005b16 <__swbuf_r+0x12>
 8005b0e:	6a03      	ldr	r3, [r0, #32]
 8005b10:	b90b      	cbnz	r3, 8005b16 <__swbuf_r+0x12>
 8005b12:	f7ff fa6f 	bl	8004ff4 <__sinit>
 8005b16:	69a3      	ldr	r3, [r4, #24]
 8005b18:	60a3      	str	r3, [r4, #8]
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	071a      	lsls	r2, r3, #28
 8005b1e:	d525      	bpl.n	8005b6c <__swbuf_r+0x68>
 8005b20:	6923      	ldr	r3, [r4, #16]
 8005b22:	b31b      	cbz	r3, 8005b6c <__swbuf_r+0x68>
 8005b24:	6823      	ldr	r3, [r4, #0]
 8005b26:	6922      	ldr	r2, [r4, #16]
 8005b28:	1a98      	subs	r0, r3, r2
 8005b2a:	6963      	ldr	r3, [r4, #20]
 8005b2c:	b2f6      	uxtb	r6, r6
 8005b2e:	4283      	cmp	r3, r0
 8005b30:	4637      	mov	r7, r6
 8005b32:	dc04      	bgt.n	8005b3e <__swbuf_r+0x3a>
 8005b34:	4621      	mov	r1, r4
 8005b36:	4628      	mov	r0, r5
 8005b38:	f7ff ffbc 	bl	8005ab4 <_fflush_r>
 8005b3c:	b9e0      	cbnz	r0, 8005b78 <__swbuf_r+0x74>
 8005b3e:	68a3      	ldr	r3, [r4, #8]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	60a3      	str	r3, [r4, #8]
 8005b44:	6823      	ldr	r3, [r4, #0]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	6022      	str	r2, [r4, #0]
 8005b4a:	701e      	strb	r6, [r3, #0]
 8005b4c:	6962      	ldr	r2, [r4, #20]
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d004      	beq.n	8005b5e <__swbuf_r+0x5a>
 8005b54:	89a3      	ldrh	r3, [r4, #12]
 8005b56:	07db      	lsls	r3, r3, #31
 8005b58:	d506      	bpl.n	8005b68 <__swbuf_r+0x64>
 8005b5a:	2e0a      	cmp	r6, #10
 8005b5c:	d104      	bne.n	8005b68 <__swbuf_r+0x64>
 8005b5e:	4621      	mov	r1, r4
 8005b60:	4628      	mov	r0, r5
 8005b62:	f7ff ffa7 	bl	8005ab4 <_fflush_r>
 8005b66:	b938      	cbnz	r0, 8005b78 <__swbuf_r+0x74>
 8005b68:	4638      	mov	r0, r7
 8005b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4628      	mov	r0, r5
 8005b70:	f000 f806 	bl	8005b80 <__swsetup_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	d0d5      	beq.n	8005b24 <__swbuf_r+0x20>
 8005b78:	f04f 37ff 	mov.w	r7, #4294967295
 8005b7c:	e7f4      	b.n	8005b68 <__swbuf_r+0x64>
	...

08005b80 <__swsetup_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <__swsetup_r+0xac>)
 8005b84:	4605      	mov	r5, r0
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	460c      	mov	r4, r1
 8005b8a:	b118      	cbz	r0, 8005b94 <__swsetup_r+0x14>
 8005b8c:	6a03      	ldr	r3, [r0, #32]
 8005b8e:	b90b      	cbnz	r3, 8005b94 <__swsetup_r+0x14>
 8005b90:	f7ff fa30 	bl	8004ff4 <__sinit>
 8005b94:	89a3      	ldrh	r3, [r4, #12]
 8005b96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b9a:	0718      	lsls	r0, r3, #28
 8005b9c:	d422      	bmi.n	8005be4 <__swsetup_r+0x64>
 8005b9e:	06d9      	lsls	r1, r3, #27
 8005ba0:	d407      	bmi.n	8005bb2 <__swsetup_r+0x32>
 8005ba2:	2309      	movs	r3, #9
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005baa:	81a3      	strh	r3, [r4, #12]
 8005bac:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb0:	e034      	b.n	8005c1c <__swsetup_r+0x9c>
 8005bb2:	0758      	lsls	r0, r3, #29
 8005bb4:	d512      	bpl.n	8005bdc <__swsetup_r+0x5c>
 8005bb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005bb8:	b141      	cbz	r1, 8005bcc <__swsetup_r+0x4c>
 8005bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005bbe:	4299      	cmp	r1, r3
 8005bc0:	d002      	beq.n	8005bc8 <__swsetup_r+0x48>
 8005bc2:	4628      	mov	r0, r5
 8005bc4:	f7ff fb24 	bl	8005210 <_free_r>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	6363      	str	r3, [r4, #52]	; 0x34
 8005bcc:	89a3      	ldrh	r3, [r4, #12]
 8005bce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005bd2:	81a3      	strh	r3, [r4, #12]
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	6063      	str	r3, [r4, #4]
 8005bd8:	6923      	ldr	r3, [r4, #16]
 8005bda:	6023      	str	r3, [r4, #0]
 8005bdc:	89a3      	ldrh	r3, [r4, #12]
 8005bde:	f043 0308 	orr.w	r3, r3, #8
 8005be2:	81a3      	strh	r3, [r4, #12]
 8005be4:	6923      	ldr	r3, [r4, #16]
 8005be6:	b94b      	cbnz	r3, 8005bfc <__swsetup_r+0x7c>
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005bee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005bf2:	d003      	beq.n	8005bfc <__swsetup_r+0x7c>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f850 	bl	8005c9c <__smakebuf_r>
 8005bfc:	89a0      	ldrh	r0, [r4, #12]
 8005bfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c02:	f010 0301 	ands.w	r3, r0, #1
 8005c06:	d00a      	beq.n	8005c1e <__swsetup_r+0x9e>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60a3      	str	r3, [r4, #8]
 8005c0c:	6963      	ldr	r3, [r4, #20]
 8005c0e:	425b      	negs	r3, r3
 8005c10:	61a3      	str	r3, [r4, #24]
 8005c12:	6923      	ldr	r3, [r4, #16]
 8005c14:	b943      	cbnz	r3, 8005c28 <__swsetup_r+0xa8>
 8005c16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c1a:	d1c4      	bne.n	8005ba6 <__swsetup_r+0x26>
 8005c1c:	bd38      	pop	{r3, r4, r5, pc}
 8005c1e:	0781      	lsls	r1, r0, #30
 8005c20:	bf58      	it	pl
 8005c22:	6963      	ldrpl	r3, [r4, #20]
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	e7f4      	b.n	8005c12 <__swsetup_r+0x92>
 8005c28:	2000      	movs	r0, #0
 8005c2a:	e7f7      	b.n	8005c1c <__swsetup_r+0x9c>
 8005c2c:	2000006c 	.word	0x2000006c

08005c30 <_sbrk_r>:
 8005c30:	b538      	push	{r3, r4, r5, lr}
 8005c32:	4d06      	ldr	r5, [pc, #24]	; (8005c4c <_sbrk_r+0x1c>)
 8005c34:	2300      	movs	r3, #0
 8005c36:	4604      	mov	r4, r0
 8005c38:	4608      	mov	r0, r1
 8005c3a:	602b      	str	r3, [r5, #0]
 8005c3c:	f000 f88c 	bl	8005d58 <_sbrk>
 8005c40:	1c43      	adds	r3, r0, #1
 8005c42:	d102      	bne.n	8005c4a <_sbrk_r+0x1a>
 8005c44:	682b      	ldr	r3, [r5, #0]
 8005c46:	b103      	cbz	r3, 8005c4a <_sbrk_r+0x1a>
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	200145b8 	.word	0x200145b8

08005c50 <__swhatbuf_r>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	b096      	sub	sp, #88	; 0x58
 8005c5c:	4615      	mov	r5, r2
 8005c5e:	461e      	mov	r6, r3
 8005c60:	da0d      	bge.n	8005c7e <__swhatbuf_r+0x2e>
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005c68:	f04f 0100 	mov.w	r1, #0
 8005c6c:	bf0c      	ite	eq
 8005c6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005c72:	2340      	movne	r3, #64	; 0x40
 8005c74:	2000      	movs	r0, #0
 8005c76:	6031      	str	r1, [r6, #0]
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	b016      	add	sp, #88	; 0x58
 8005c7c:	bd70      	pop	{r4, r5, r6, pc}
 8005c7e:	466a      	mov	r2, sp
 8005c80:	f000 f848 	bl	8005d14 <_fstat_r>
 8005c84:	2800      	cmp	r0, #0
 8005c86:	dbec      	blt.n	8005c62 <__swhatbuf_r+0x12>
 8005c88:	9901      	ldr	r1, [sp, #4]
 8005c8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005c8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005c92:	4259      	negs	r1, r3
 8005c94:	4159      	adcs	r1, r3
 8005c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c9a:	e7eb      	b.n	8005c74 <__swhatbuf_r+0x24>

08005c9c <__smakebuf_r>:
 8005c9c:	898b      	ldrh	r3, [r1, #12]
 8005c9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ca0:	079d      	lsls	r5, r3, #30
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	460c      	mov	r4, r1
 8005ca6:	d507      	bpl.n	8005cb8 <__smakebuf_r+0x1c>
 8005ca8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005cac:	6023      	str	r3, [r4, #0]
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	6163      	str	r3, [r4, #20]
 8005cb4:	b002      	add	sp, #8
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	ab01      	add	r3, sp, #4
 8005cba:	466a      	mov	r2, sp
 8005cbc:	f7ff ffc8 	bl	8005c50 <__swhatbuf_r>
 8005cc0:	9900      	ldr	r1, [sp, #0]
 8005cc2:	4605      	mov	r5, r0
 8005cc4:	4630      	mov	r0, r6
 8005cc6:	f7ff fb0f 	bl	80052e8 <_malloc_r>
 8005cca:	b948      	cbnz	r0, 8005ce0 <__smakebuf_r+0x44>
 8005ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cd0:	059a      	lsls	r2, r3, #22
 8005cd2:	d4ef      	bmi.n	8005cb4 <__smakebuf_r+0x18>
 8005cd4:	f023 0303 	bic.w	r3, r3, #3
 8005cd8:	f043 0302 	orr.w	r3, r3, #2
 8005cdc:	81a3      	strh	r3, [r4, #12]
 8005cde:	e7e3      	b.n	8005ca8 <__smakebuf_r+0xc>
 8005ce0:	89a3      	ldrh	r3, [r4, #12]
 8005ce2:	6020      	str	r0, [r4, #0]
 8005ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	6163      	str	r3, [r4, #20]
 8005cee:	9b01      	ldr	r3, [sp, #4]
 8005cf0:	6120      	str	r0, [r4, #16]
 8005cf2:	b15b      	cbz	r3, 8005d0c <__smakebuf_r+0x70>
 8005cf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cf8:	4630      	mov	r0, r6
 8005cfa:	f000 f81d 	bl	8005d38 <_isatty_r>
 8005cfe:	b128      	cbz	r0, 8005d0c <__smakebuf_r+0x70>
 8005d00:	89a3      	ldrh	r3, [r4, #12]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	81a3      	strh	r3, [r4, #12]
 8005d0c:	89a3      	ldrh	r3, [r4, #12]
 8005d0e:	431d      	orrs	r5, r3
 8005d10:	81a5      	strh	r5, [r4, #12]
 8005d12:	e7cf      	b.n	8005cb4 <__smakebuf_r+0x18>

08005d14 <_fstat_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d07      	ldr	r5, [pc, #28]	; (8005d34 <_fstat_r+0x20>)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	4611      	mov	r1, r2
 8005d20:	602b      	str	r3, [r5, #0]
 8005d22:	f7fa ffb0 	bl	8000c86 <_fstat>
 8005d26:	1c43      	adds	r3, r0, #1
 8005d28:	d102      	bne.n	8005d30 <_fstat_r+0x1c>
 8005d2a:	682b      	ldr	r3, [r5, #0]
 8005d2c:	b103      	cbz	r3, 8005d30 <_fstat_r+0x1c>
 8005d2e:	6023      	str	r3, [r4, #0]
 8005d30:	bd38      	pop	{r3, r4, r5, pc}
 8005d32:	bf00      	nop
 8005d34:	200145b8 	.word	0x200145b8

08005d38 <_isatty_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d06      	ldr	r5, [pc, #24]	; (8005d54 <_isatty_r+0x1c>)
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4604      	mov	r4, r0
 8005d40:	4608      	mov	r0, r1
 8005d42:	602b      	str	r3, [r5, #0]
 8005d44:	f7fa ffaf 	bl	8000ca6 <_isatty>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d102      	bne.n	8005d52 <_isatty_r+0x1a>
 8005d4c:	682b      	ldr	r3, [r5, #0]
 8005d4e:	b103      	cbz	r3, 8005d52 <_isatty_r+0x1a>
 8005d50:	6023      	str	r3, [r4, #0]
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	200145b8 	.word	0x200145b8

08005d58 <_sbrk>:
 8005d58:	4a04      	ldr	r2, [pc, #16]	; (8005d6c <_sbrk+0x14>)
 8005d5a:	6811      	ldr	r1, [r2, #0]
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	b909      	cbnz	r1, 8005d64 <_sbrk+0xc>
 8005d60:	4903      	ldr	r1, [pc, #12]	; (8005d70 <_sbrk+0x18>)
 8005d62:	6011      	str	r1, [r2, #0]
 8005d64:	6810      	ldr	r0, [r2, #0]
 8005d66:	4403      	add	r3, r0
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	4770      	bx	lr
 8005d6c:	200145c8 	.word	0x200145c8
 8005d70:	200145d0 	.word	0x200145d0

08005d74 <_init>:
 8005d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d76:	bf00      	nop
 8005d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7a:	bc08      	pop	{r3}
 8005d7c:	469e      	mov	lr, r3
 8005d7e:	4770      	bx	lr

08005d80 <_fini>:
 8005d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d82:	bf00      	nop
 8005d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d86:	bc08      	pop	{r3}
 8005d88:	469e      	mov	lr, r3
 8005d8a:	4770      	bx	lr
